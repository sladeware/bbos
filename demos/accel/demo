' LCC 4.2 for Parallax Propeller
' (Catalina code generator by Ross Higson)
'
PUB Base : addr
   addr := @@0 ' Catalina Base Address

' Catalina Import main

DAT
        org  0
'
' first 2 longs reserved (for POD)
'
        long 0          '$00
        long 0          '$01
'                           
INIT    jmp  0          '$02
LODL    jmp  0          '$03
LODA    jmp  0          '$04
LODF    jmp  0          '$05
PSHL    jmp  0          '$06
PSHB    jmp  0          '$07
CPYB    jmp  0          '$08
NEWF    jmp  0          '$09
RETF    jmp  0          '$0a
CALA    jmp  0          '$0b
RETN    jmp  0          '$0c
CALI    jmp  0          '$0d
JMPA    jmp  0          '$0e
JMPI    jmp  0          '$0f
DIVS    jmp  0          '$10
DIVU    jmp  0          '$11
MULT    jmp  0          '$12
BR_Z    jmp  0          '$13
BRNZ    jmp  0          '$14
BRAE    jmp  0          '$15
BR_A    jmp  0          '$16
BRBE    jmp  0          '$17
BR_B    jmp  0          '$18
SYSP    jmp  0          '$19
PSHA    jmp  0          '$1a
FADD    jmp  0          '$1b
FSUB    jmp  0          '$1c
FMUL    jmp  0          '$1d
FDIV    jmp  0          '$1e
FCMP    jmp  0          '$1f
FLIN    jmp  0          '$20
INFL    jmp  0          '$21
PSHM    jmp  0          '$22
POPM    jmp  0          '$23
PSHF    jmp  0          '$24
RLNG    jmp  0          '$25
RWRD    jmp  0          '$26
RBYT    jmp  0          '$27
WLNG    jmp  0          '$28
WWRD    jmp  0          '$29
WBYT    jmp  0          '$2a
'                           
PC      long 0          '$2b
SP      long 0          '$2c
FP      long 0          '$2d
RI      long 0          '$2e
BC      long 0          '$2f
BA      long 0          '$30
BZ      long 0          '$31
CS      long 0          '$32
'
r0      long 0          '$33
r1      long 0          '$34
r2      long 0          '$35
r3      long 0          '$36
r4      long 0          '$37
r5      long 0          '$38
r6      long 0          '$39
r7      long 0          '$3a
r8      long 0          '$3b
r9      long 0          '$3c
r10     long 0          '$3d
r11     long 0          '$3e
r12     long 0          '$3f
r13     long 0          '$40
r14     long 0          '$41
r15     long 0          '$42
r16     long 0          '$43
r17     long 0          '$44
r18     long 0          '$45
r19     long 0          '$46
r20     long 0          '$47
r21     long 0          '$48
r22     long 0          '$49
r23     long 0          '$4a
'
Bit31   long  $80000000 '$4b
all_1s  long  $ffffffff '$4c
cviu_m1 long  $000000ff '$4d
cviu_m2 long  $0000ffff '$4e
top8    long  $ff000000 '$4f   ' top 8 bits bitmask
low24   long  $00ffffff '$50   ' low 24 bits bitmask
'
init_BZ long  @sbrkinit '$51   ' end of code / start of heap
init_PC long  @C_main   '$52   ' the initial PC
'
' seglayout specifies the layout of the segments (0, 1, 2, 3, 4, 5)
'
seglayout
        long  SEGMENT_LAYOUT
'
' segtable contains the start address of each of the segments
'
segtable
        long  @Catalina_Code
        long  @Catalina_Cnst
        long  @Catalina_Init
        long  @Catalina_Data
        long  @Catalina_Ends
'
' initial file is catalina_progbeg.s

' input file /usr/local/lib/catalina/target/catalina_default.s 

' input file /tmp/lcc102512.o 

' input file /tmp/lcc102513.o 

' input file /tmp/lcc102514.o 

' input file time.spin 

' input file /usr/local/lib/catalina/lib/libci/catalina_hmi_t_char.s 

' input file /usr/local/lib/catalina/lib/libci/catalina_hmi_t_hex.s 

' input file /usr/local/lib/catalina/lib/libci/catalina_hmi_t_string.s 

' input file /usr/local/lib/catalina/lib/libci/catalina_plugin.s 

' input file /usr/local/lib/catalina/lib/libci/catalina_putc.s 

' input file /usr/local/lib/catalina/lib/libci/clockfreq.s 

' input file /usr/local/lib/catalina/lib/libci/clockinit.s 

' input file /usr/local/lib/catalina/lib/libci/cnt.s 

' input file /usr/local/lib/catalina/lib/libci/data.s 

' input file /usr/local/lib/catalina/lib/libci/dira.s 

' input file /usr/local/lib/catalina/lib/libci/doprnt.s 

' input file /usr/local/lib/catalina/lib/libci/icompute.s 

' input file /usr/local/lib/catalina/lib/libci/ina.s 

' input file /usr/local/lib/catalina/lib/libci/outa.s 

' input file /usr/local/lib/catalina/lib/libci/printf.s 

' input file /usr/local/lib/catalina/lib/libci/putc.s 

' input file /usr/local/lib/catalina/lib/libci/toupper.s 

' input file /usr/local/lib/catalina/lib/libci/waitcnt.s 

' input file /usr/local/lib/catalina/target/lmm_progend.s 


CON

SEGMENT_LAYOUT=0 ' LMM segment layout (Code, Cnst, Init, Data)


' Catalina Code

DAT ' Code segment

 long ' align long

Catalina_Code
'
DAT ' code segment

 long ' align long
'
' Initial PASM goes here (if any) ...
'
'

DAT ' code segment

' Catalina Export _exit

 long ' align long

C__exit
' jmp #JMPA
' long @C__exit
 mov r0,#$80
 clkset r0

' Catalina Export _sys_plugin

C__sys_plugin
 jmp #SYSP
 jmp #RETN

{
#ifdef REG_PASSING

' not too bad ...
C__sys_plugin
 jmp #SYSP
 jmp #RETN

#else

' very inefficient! ...
C__sys_plugin
 jmp #NEWF
 mov RI, FP
 add RI, #8
 rdlong r2,RI
 mov RI, FP
 add RI, #12
 rdlong r3,RI
 jmp #SYSP
 jmp #RETF

#endif
}

DAT ' code segment

'
' C_arg_setup : setup argc in r2 and argv in r3
'
C_arg_setup
 jmp #LODA                 ' point to argv address
 long @C_argv_locn
#ifdef LARGE
 jmp #RLNG
#elseifdef SMALL
 jmp #RLNG
#else
 rdlong BC,RI
#endif 
 rdword r3,BC              ' load argc
 add BC,#2
 rdword r2,BC              ' load argv
 jmp #RETN                 ' done

C_argv_locn
 long $7F30                ' must match value in Catalina_Common_Input.spin

'
' C_debug_init : just in case we use '-g' but then specify the default target
'
C_debug_init
 jmp #RETN                 ' done

'
' Target-specific PASM goes here ...
'

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export bbos_time_init

 long ' align long
C_bbos_time_init ' <symbol:bbos_time_init>
 jmp #PSHM
 long $c00 ' save registers
 mov BC, #0 ' arg size
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 jmp #LODA
 long @C_bbos_time_init_L000004
 rdlong  r10, RI ' reg <- con
 mov r11, r0 ' ADDU
 add r11, r10 ' ADDU (3)
 jmp #LODA
 long @C_bbos_time_init_L000008
 rdlong  r10, RI ' reg <- con
 mov r0, r11 ' setup r0/r1 (2)
 mov r1, r10 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r11, r0 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_usec_delay
 wrlong r11, RI ' ASGNI4 addrg
' C_bbos_time_init_2 ' (symbol refcount = 0)
 jmp #POPM
 long $c00 ' restore registers
 jmp #RETN


' Catalina Export main

 long ' align long
C_main ' <symbol:main>
 jmp #CALA
 long @C_arg_setup
 jmp #LODA
 long @C_main_L000013
 rdlong r2, RI ' reg ARG con
 mov r3, #111 ' reg ARG coni
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__clockinit
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C__clockfreq
 mov r2, RI ' reg ARG ADDRG
 jmp #LODA
 long @C_main_16_L000017
 mov r3, RI ' reg ARG ADDRG
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_printf
 add SP, #8 ' CALL addrg
 mov BC, #0 ' arg size
 jmp #CALA
 long @C_bbos_time_init ' CALL addrg
 mov r2, #3 ' reg ARG coni
 mov r3, #0 ' reg ARG coni
 mov r4, #2 ' reg ARG coni
 mov r5, #1 ' reg ARG coni
 mov BC, #16 ' arg size
 sub SP, #16 ' stack space for reg ARGs
 jmp #CALA
 long @C_h48c_open
 add SP, #16 ' CALL addrg
 jmp #JMPA
 long @C_main_19 ' JUMPV addrg
C_main_18
 mov r2, #24 ' reg ARG coni
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C_h48c_gforce_of_axis
 add SP, #4 ' CALL addrg
 jmp #LODA
 long @C_gforce_x
 wrlong r0, RI ' ASGNI4 addrg
 mov r2, #25 ' reg ARG coni
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C_h48c_gforce_of_axis
 add SP, #4 ' CALL addrg
 jmp #LODA
 long @C_gforce_y
 wrlong r0, RI ' ASGNI4 addrg
 mov r2, #26 ' reg ARG coni
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C_h48c_gforce_of_axis
 add SP, #4 ' CALL addrg
 jmp #LODA
 long @C_gforce_z
 wrlong r0, RI ' ASGNI4 addrg
 mov BC, #0 ' arg size
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size
 jmp #CALA
 long @C__clockfreq ' CALL addrg
 mov r10, r0
 shr r10, #1 ' RSHU4 coni
 mov r2, r11 ' ADDU
 add r2, r10 ' ADDU (3)
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__waitcnt
 add SP, #4 ' CALL addrg
C_main_19
 jmp #JMPA
 long @C_main_18 ' JUMPV addrg
' C_main_11 ' (symbol refcount = 0)
 jmp #JMPA
 long @C__exit

' Catalina Import h48c_gforce_of_axis

' Catalina Import h48c_open

' Catalina Import printf


DAT ' code segment

' Catalina Import _cnt


DAT ' code segment

' Catalina Import _waitcnt


DAT ' code segment

' Catalina Import _clockinit


DAT ' code segment

' Catalina Import _clockfreq


DAT ' code segment
' end

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

 long ' align long
C_tmpfileWc2nVk_4d177fe4_post_clock_pulse_L000002 ' <symbol:post_clock_pulse>
 jmp #PSHM
 long $20c00 ' save registers
 mov r17, r2 ' reg var <- reg arg
 mov BC, #0 ' arg size
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_tmpfileWc2nVk_4d177fe4_post_clock_pulse_L000002_L000004
 rdlong  r10, RI ' reg <- con
 mov r2, r11 ' ADDI/P
 adds r2, r10 ' ADDI/P (3)
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__waitcnt
 add SP, #4 ' CALL addrg
 mov r11, #1 ' reg <- coni
 mov r10, r17 ' CVI, CVU or LOAD
 shl r11, r10 ' LSHI/U (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 mov BC, #0 ' arg size
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_tmpfileWc2nVk_4d177fe4_post_clock_pulse_L000002_L000004
 rdlong  r10, RI ' reg <- con
 mov r2, r11 ' ADDI/P
 adds r2, r10 ' ADDI/P (3)
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__waitcnt
 add SP, #4 ' CALL addrg
 mov r2, #0 ' reg ARG coni
 mov r11, #1 ' reg <- coni
 mov r10, r17 ' CVI, CVU or LOAD
 mov r3, r11 ' LSHI/U
 shl r3, r10 ' LSHI/U (3)
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
' C_tmpfileWc2nVk_4d177fe4_post_clock_pulse_L000002_3 ' (symbol refcount = 0)
 jmp #POPM
 long $20c00 ' restore registers
 jmp #RETN


 long ' align long
C_tmpfileALJXub_4d177fe4_pre_clock_pulse_L000007 ' <symbol:pre_clock_pulse>
 jmp #PSHM
 long $20c00 ' save registers
 mov r17, r2 ' reg var <- reg arg
 mov r11, #1 ' reg <- coni
 mov r10, r17 ' CVI, CVU or LOAD
 shl r11, r10 ' LSHI/U (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 mov BC, #0 ' arg size
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_tmpfileWc2nVk_4d177fe4_post_clock_pulse_L000002_L000004
 rdlong  r10, RI ' reg <- con
 mov r2, r11 ' ADDI/P
 adds r2, r10 ' ADDI/P (3)
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__waitcnt
 add SP, #4 ' CALL addrg
 mov r2, #0 ' reg ARG coni
 mov r11, #1 ' reg <- coni
 mov r10, r17 ' CVI, CVU or LOAD
 mov r3, r11 ' LSHI/U
 shl r3, r10 ' LSHI/U (3)
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 mov BC, #0 ' arg size
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_tmpfileWc2nVk_4d177fe4_post_clock_pulse_L000002_L000004
 rdlong  r10, RI ' reg <- con
 mov r2, r11 ' ADDI/P
 adds r2, r10 ' ADDI/P (3)
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__waitcnt
 add SP, #4 ' CALL addrg
' C_tmpfileALJXub_4d177fe4_pre_clock_pulse_L000007_8 ' (symbol refcount = 0)
 jmp #POPM
 long $20c00 ' restore registers
 jmp #RETN


' Catalina Export stamp_shiftout

 long ' align long
C_stamp_shiftout ' <symbol:stamp_shiftout>
 jmp #NEWF
 jmp #PSHM
 long $3cc00 ' save registers
 mov r17, r5 ' reg var <- reg arg
 mov r16, r4 ' reg var <- reg arg
 mov r15, r3 ' reg var <- reg arg
 mov r14, r2 ' reg var <- reg arg
 mov r2, #0 ' reg ARG coni
 mov r11, #1 ' reg <- coni
 mov r10, FP
 add r10, #8 ' reg <- addrfi
 rdlong r10, r10 ' reg <- INDIRU4 reg
 mov r3, r11 ' LSHI/U
 shl r3, r10 ' LSHI/U (3)
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 mov r11, #1 ' reg <- coni
 mov r10, FP
 add r10, #8 ' reg <- addrfi
 rdlong r10, r10 ' reg <- INDIRU4 reg
 shl r11, r10 ' LSHI/U (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #8 ' CALL addrg
 mov r2, #0 ' reg ARG coni
 mov r11, #1 ' reg <- coni
 mov r10, r17 ' CVI, CVU or LOAD
 mov r3, r11 ' LSHI/U
 shl r3, r10 ' LSHI/U (3)
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 mov r11, #1 ' reg <- coni
 mov r10, r17 ' CVI, CVU or LOAD
 shl r11, r10 ' LSHI/U (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #8 ' CALL addrg
 cmp r16,  #5 wz
 jmp #BRNZ
 long @C_stamp_shiftout_10 ' NEU4
 mov r11, #32 ' reg <- coni
 sub r11, r15 ' SUBU (1)
 shl r14, r11 ' LSHI/U (1)
 jmp #JMPA
 long @C_stamp_shiftout_13 ' JUMPV addrg
C_stamp_shiftout_12
 mov r11, r14
 shl r11, #1 ' LSHU4 coni
 mov r10, r14
 shr r10, #31 ' RSHU4 coni
 mov r14, r11 ' BORI/U
 or r14, r10 ' BORI/U (3)
 mov r11, r14
 and r11, #1 ' BANDU4 coni
 cmp r11,  #0 wz
 jmp #BR_Z
 long @C_stamp_shiftout_15 ' EQU4
 mov r11, #1 ' reg <- coni
 mov r10, FP
 add r10, #8 ' reg <- addrfi
 rdlong r10, r10 ' reg <- INDIRU4 reg
 shl r11, r10 ' LSHI/U (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 jmp #JMPA
 long @C_stamp_shiftout_16 ' JUMPV addrg
C_stamp_shiftout_15
 mov r2, #0 ' reg ARG coni
 mov r11, #1 ' reg <- coni
 mov r10, FP
 add r10, #8 ' reg <- addrfi
 rdlong r10, r10 ' reg <- INDIRU4 reg
 mov r3, r11 ' LSHI/U
 shl r3, r10 ' LSHI/U (3)
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
C_stamp_shiftout_16
 mov r2, r17 ' CVI, CVU or LOAD
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C_tmpfileWc2nVk_4d177fe4_post_clock_pulse_L000002
 add SP, #4 ' CALL addrg
C_stamp_shiftout_13
 mov r11, r15 ' CVI, CVU or LOAD
 mov r15, r11
 sub r15, #1 ' SUBU4 coni
 cmp r11,  #0 wz
 jmp #BRNZ
 long @C_stamp_shiftout_12 ' NEU4
 mov r2, #0 ' reg ARG coni
 mov r11, #1 ' reg <- coni
 mov r10, FP
 add r10, #8 ' reg <- addrfi
 rdlong r10, r10 ' reg <- INDIRU4 reg
 mov r3, r11 ' LSHI/U
 shl r3, r10 ' LSHI/U (3)
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
C_stamp_shiftout_10
' C_stamp_shiftout_9 ' (symbol refcount = 0)
 jmp #POPM
 long $3cc00 ' restore registers
 jmp #RETF


' Catalina Export stamp_shiftin

 long ' align long
C_stamp_shiftin ' <symbol:stamp_shiftin>
 jmp #PSHM
 long $3fe00 ' save registers
 mov r17, r5 ' reg var <- reg arg
 mov r16, r4 ' reg var <- reg arg
 mov r15, r3 ' reg var <- reg arg
 mov r14, r2 ' reg var <- reg arg
 mov r2, #0 ' reg ARG coni
 mov r11, #1 ' reg <- coni
 mov r10, r17 ' CVI, CVU or LOAD
 mov r3, r11 ' LSHI/U
 shl r3, r10 ' LSHI/U (3)
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #8 ' CALL addrg
 mov r2, #0 ' reg ARG coni
 mov r11, #1 ' reg <- coni
 mov r10, r16 ' CVI, CVU or LOAD
 mov r3, r11 ' LSHI/U
 shl r3, r10 ' LSHI/U (3)
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 mov r11, #1 ' reg <- coni
 mov r10, r16 ' CVI, CVU or LOAD
 shl r11, r10 ' LSHI/U (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #8 ' CALL addrg
 mov r13, #0 ' reg <- coni
 cmp r15,  #2 wz
 jmp #BRNZ
 long @C_stamp_shiftin_18 ' NEU4
 jmp #JMPA
 long @C_stamp_shiftin_21 ' JUMPV addrg
C_stamp_shiftin_20
 mov r2, r16 ' CVI, CVU or LOAD
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C_tmpfileALJXub_4d177fe4_pre_clock_pulse_L000007
 add SP, #4 ' CALL addrg
 mov BC, #0 ' arg size
 jmp #CALA
 long @C__ina ' CALL addrg
 mov r10, #1 ' reg <- coni
 mov r9, r17 ' CVI, CVU or LOAD
 shl r10, r9 ' LSHI/U (1)
 mov r11, r0 ' BANDI/U
 and r11, r10 ' BANDI/U (3)
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C_stamp_shiftin_24 ' EQI4
 mov r12, #1 ' reg <- coni
 jmp #JMPA
 long @C_stamp_shiftin_25 ' JUMPV addrg
C_stamp_shiftin_24
 mov r12, #0 ' reg <- coni
C_stamp_shiftin_25
 mov r11, r13
 shl r11, #1 ' LSHU4 coni
 mov r10, r12 ' CVI, CVU or LOAD
 mov r13, r11 ' BORI/U
 or r13, r10 ' BORI/U (3)
C_stamp_shiftin_21
 mov r11, r14 ' CVI, CVU or LOAD
 mov r14, r11
 sub r14, #1 ' SUBU4 coni
 cmp r11,  #0 wz
 jmp #BRNZ
 long @C_stamp_shiftin_20 ' NEU4
C_stamp_shiftin_18
 mov r0, r13 ' CVI, CVU or LOAD
' C_stamp_shiftin_17 ' (symbol refcount = 0)
 jmp #POPM
 long $3fe00 ' restore registers
 jmp #RETN


' Catalina Import _ina

' Catalina Import _dira

' Catalina Import _outa

' Catalina Import _cnt

' Catalina Import _waitcnt


DAT ' code segment
' end

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

 long ' align long
C_tmpfileNKgj9k_4d177fe4_umulf_L000002 ' <symbol:umulf>
 jmp #PSHM
 long $3ec00 ' save registers
 mov r17, r3 ' reg var <- reg arg
 mov r16, r2 ' reg var <- reg arg
 mov r11, #0 ' reg <- coni
 mov r13, r11 ' CVI, CVU or LOAD
 mov r14, r11 ' CVI, CVU or LOAD
 mov r15, #1 ' reg <- coni
C_tmpfileNKgj9k_4d177fe4_umulf_L000002_4
 cmps r16,  #0 wz,wc
 jmp #BRAE
 long @C_tmpfileNKgj9k_4d177fe4_umulf_L000002_8 ' GEI4
 sar r17, r15 ' RSHI (1)
 adds r14, r17 ' ADDI/P (1)
 mov r11, #1 ' reg <- coni
 shl r11, r15 ' LSHI/U (1)
 subs r11, #1 ' SUBI4 coni
 and r11, r17 ' BANDI/U (2)
 mov r10, #16 ' reg <- coni
 subs r10, r15 ' SUBI/P (1)
 shl r11, r10 ' LSHI/U (1)
 adds r13, r11 ' ADDI/P (1)
C_tmpfileNKgj9k_4d177fe4_umulf_L000002_8
 shl r16, #1 ' LSHI4 coni
' C_tmpfileNKgj9k_4d177fe4_umulf_L000002_5 ' (symbol refcount = 0)
 adds r15, #1 ' ADDI4 coni
 cmps r15,  #17 wz,wc
 jmp #BR_B
 long @C_tmpfileNKgj9k_4d177fe4_umulf_L000002_4 ' LTI4
 cmps r13,  #0 wz,wc
 jmp #BRAE
 long @C_tmpfileNKgj9k_4d177fe4_umulf_L000002_10 ' GEI4
 adds r14, #1 ' ADDI4 coni
C_tmpfileNKgj9k_4d177fe4_umulf_L000002_10
 mov r2, r14 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_tmpfileNKgj9k_4d177fe4_umulf_L000002_12_L000013
 mov r3, RI ' reg ARG ADDRG
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_printf
 add SP, #8 ' CALL addrg
 mov r0, r14 ' CVI, CVU or LOAD
' C_tmpfileNKgj9k_4d177fe4_umulf_L000002_3 ' (symbol refcount = 0)
 jmp #POPM
 long $3ec00 ' restore registers
 jmp #RETN



DAT ' code segment

 long ' align long
C_h48c_open ' <symbol:h48c_open>
 jmp #PSHM
 long $3cc00 ' save registers
 mov r17, r5 ' reg var <- reg arg
 mov r16, r4 ' reg var <- reg arg
 mov r15, r3 ' reg var <- reg arg
 mov r14, r2 ' reg var <- reg arg
 jmp #LODA
 long @C_tmpfileTYZSKb_4d177fe4_h48c_dio_pin_L000014
 wrlong r17, RI ' ASGNI4 addrg
 jmp #LODA
 long @C_tmpfilecpZG36_4d177fe4_h48c_clk_pin_L000015
 wrlong r16, RI ' ASGNI4 addrg
 jmp #LODA
 long @C_tmpfilehg4um2_4d177fe4_h48c_cs_pin_L000016
 mov r11, RI ' reg <- addrg
 jmp #LODA
 long @C_tmpfilehg4um2_4d177fe4_h48c_cs_pin_L000016
 wrlong r15, RI ' ASGNI4 addrg
 jmp #LODA
 long @C_tmpfilesAijFX_4d177fe4_h48c_zerog_pin_L000017
 wrlong r14, RI ' ASGNI4 addrg
 mov r10, #1 ' reg <- coni
 rdlong r11, r11 ' reg <- INDIRI4 reg
 mov RI, r10
 shl RI, r11
 mov r11, RI ' SHLI/U (2)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 mov r11, #1 ' reg <- coni
 jmp #LODA
 long @C_tmpfilehg4um2_4d177fe4_h48c_cs_pin_L000016
 rdlong r10, RI ' reg <- INDIRI4 addrg
 shl r11, r10 ' LSHI/U (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__dira
 add SP, #8 ' CALL addrg
' C_h48c_open_18 ' (symbol refcount = 0)
 jmp #POPM
 long $3cc00 ' restore registers
 jmp #RETN


' Catalina Export print_unsigned_as_float

 long ' align long
C_print_unsigned_as_float ' <symbol:print_unsigned_as_float>
 jmp #NEWF
 sub SP, #4
 jmp #PSHM
 long $30800 ' save registers
 mov r17, r4 ' reg var <- reg arg
 mov r16, r3 ' reg var <- reg arg
 mov RI, FP
 add RI, #16
 wrlong r2, RI ' spill reg
 mov r11, FP
 add r11, #16 ' reg <- addrfi
 jmp #LODF
 long -4
 wrlong r11, RI ' ASGNP4 addrl
 mov r2, r16 ' CVI, CVU or LOAD
 mov r3, r17 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_t_string
 add SP, #8 ' CALL addrg
 mov RI, FP
 add RI, #16
 rdlong r2, RI ' reg ARG INDIR ADDRFi
 mov r3, r17 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_t_hex
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C_print_unsigned_as_float_20_L000021
 mov r2, RI ' reg ARG ADDRG
 mov r3, r17 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_t_string
 add SP, #8 ' CALL addrg
 mov r2, #6 ' reg ARG coni
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRP4 reg
 rdlong r3, r11 ' reg <- INDIRF4 reg
 mov r4, r17 ' CVI, CVU or LOAD
 mov BC, #12 ' arg size
 sub SP, #12 ' stack space for reg ARGs
 jmp #CALA
 long @C_t_float
 add SP, #12 ' CALL addrg
 jmp #LODA
 long @C_print_unsigned_as_float_22_L000023
 mov r2, RI ' reg ARG ADDRG
 mov r3, r17 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_t_string
 add SP, #8 ' CALL addrg
' C_print_unsigned_as_float_19 ' (symbol refcount = 0)
 jmp #POPM
 long $30800 ' restore registers
 add SP, #4 ' framesize
 jmp #RETF


' Catalina Export h48c_gforce_of_axis

 long ' align long
C_h48c_gforce_of_axis ' <symbol:h48c_gforce_of_axis>
 jmp #PSHM
 long $fcc00 ' save registers
 mov r17, r2 ' reg var <- reg arg
 mov r2, #27 ' reg ARG coni
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C_h48c_read_value
 add SP, #4 ' CALL addrg
 mov r16, r0 ' CVI, CVU or LOAD
 mov BC, #0 ' arg size
 jmp #CALA
 long @C__cnt ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
 mov r2, r11
 add r2, #300 ' ADDU4 coni
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C__waitcnt
 add SP, #4 ' CALL addrg
 mov r2, r17 ' CVI, CVU or LOAD
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C_h48c_read_value
 add SP, #4 ' CALL addrg
 mov r15, r0 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_h48c_gforce_of_axis_30_L000031
 rdlong r19, RI ' reg <- INDIRF4 addrg
 mov r0, r15 ' SUBI/P
 subs r0, r16 ' SUBI/P (3)
 jmp #FLIN ' CVIF4
 mov r1, r0 ' setup r0/r1 (1)
 mov r0, r19 ' setup r0/r1 (1)
 jmp #FMUL ' MULF4
 mov r19, r0 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_h48c_gforce_of_axis_32_L000033
 rdlong r18, RI ' reg <- INDIRF4 addrg
 mov r0, r19 ' setup r0/r1 (2)
 mov r1, r18 ' setup r0/r1 (2)
 jmp #FCMP
 jmp #BR_B
 long @C_h48c_gforce_of_axis_28 ' LTF4
 mov r0, r19 ' setup r0/r1 (2)
 mov r1, r18 ' setup r0/r1 (2)
 jmp #FSUB ' SUBF4
 jmp #INFL ' CVFI4
 mov r11, r0 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_h48c_gforce_of_axis_L000035
 rdlong  r10, RI ' reg <- con
 mov r14, r11 ' ADDU
 add r14, r10 ' ADDU (3)
 jmp #JMPA
 long @C_h48c_gforce_of_axis_29 ' JUMPV addrg
C_h48c_gforce_of_axis_28
 mov r0, r19 ' CVI, CVU or LOAD
 jmp #INFL ' CVFI4
 mov r14, r0 ' CVI, CVU or LOAD
C_h48c_gforce_of_axis_29
 mov r2, r14 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_h48c_gforce_of_axis_25_L000026
 mov r3, RI ' reg ARG ADDRG
 mov r4, #1 ' reg ARG coni
 mov BC, #12 ' arg size
 sub SP, #12 ' stack space for reg ARGs
 jmp #CALA
 long @C_print_unsigned_as_float
 add SP, #12 ' CALL addrg
 jmp #LODA
 long @C_h48c_gforce_of_axis_30_L000031
 rdlong r19, RI ' reg <- INDIRF4 addrg
 mov r0, r15 ' SUBI/P
 subs r0, r16 ' SUBI/P (3)
 jmp #FLIN ' CVIF4
 mov r1, r0 ' setup r0/r1 (1)
 mov r0, r19 ' setup r0/r1 (1)
 jmp #FMUL ' MULF4
 jmp #INFL ' CVFI4
 jmp #JMPA
 long @C_h48c_gforce_of_axis_24 ' JUMPV addrg
 cmps r15, r16 wz,wc
 jmp #BR_B
 long @C_h48c_gforce_of_axis_38 ' LTI4
 jmp #LODA
 long @C_h48c_gforce_of_axis_30_L000031
 rdlong r19, RI ' reg <- INDIRF4 addrg
 mov r0, r15 ' SUBI/P
 subs r0, r16 ' SUBI/P (3)
 jmp #FLIN ' CVIF4
 mov r1, r0 ' setup r0/r1 (1)
 mov r0, r19 ' setup r0/r1 (1)
 jmp #FMUL ' MULF4
 jmp #INFL ' CVFI4
 jmp #JMPA
 long @C_h48c_gforce_of_axis_24 ' JUMPV addrg
C_h48c_gforce_of_axis_38
 jmp #LODA
 long @C_h48c_gforce_of_axis_30_L000031
 rdlong r19, RI ' reg <- INDIRF4 addrg
 mov r11, r16 ' SUBI/P
 subs r11, r15 ' SUBI/P (3)
 neg r0, r11 ' NEGI4
 jmp #FLIN ' CVIF4
 mov r1, r0 ' setup r0/r1 (1)
 mov r0, r19 ' setup r0/r1 (1)
 jmp #FMUL ' MULF4
 jmp #INFL ' CVFI4
C_h48c_gforce_of_axis_24
 jmp #POPM
 long $fcc00 ' restore registers
 jmp #RETN


' Catalina Export h48c_free_fall

 long ' align long
C_h48c_free_fall ' <symbol:h48c_free_fall>
 mov r0, #0 ' RET coni
' C_h48c_free_fall_40 ' (symbol refcount = 0)
 jmp #RETN


' Catalina Export h48c_close

 long ' align long
C_h48c_close ' <symbol:h48c_close>
 jmp #PSHM
 long $c00 ' save registers
 mov r11, #1 ' reg <- coni
 jmp #LODA
 long @C_tmpfilehg4um2_4d177fe4_h48c_cs_pin_L000016
 rdlong r10, RI ' reg <- INDIRI4 addrg
 shl r11, r10 ' LSHI/U (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
' C_h48c_close_41 ' (symbol refcount = 0)
 jmp #POPM
 long $c00 ' restore registers
 jmp #RETN


' Catalina Export h48c_read_value

 long ' align long
C_h48c_read_value ' <symbol:h48c_read_value>
 jmp #NEWF
 sub SP, #4
 jmp #PSHM
 long $20c00 ' save registers
 mov r17, r2 ' reg var <- reg arg
 mov r2, #0 ' reg ARG coni
 mov r11, #1 ' reg <- coni
 jmp #LODA
 long @C_tmpfilehg4um2_4d177fe4_h48c_cs_pin_L000016
 rdlong r10, RI ' reg <- INDIRI4 addrg
 shl r11, r10 ' LSHI/U (1)
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 mov r2, r17 ' CVI, CVU or LOAD
 mov r11, #5 ' reg <- coni
 mov r3, r11 ' CVI, CVU or LOAD
 mov r4, r11 ' CVI, CVU or LOAD
 jmp #LODA
 long @C_tmpfilecpZG36_4d177fe4_h48c_clk_pin_L000015
 rdlong r5, RI ' reg ARG INDIR ADDRG
 sub SP, #16 ' stack space for reg ARGs
 jmp #PSHA
 long @C_tmpfileTYZSKb_4d177fe4_h48c_dio_pin_L000014 ' stack ARG INDIR ADDRG
 mov BC, #20 ' arg size
 jmp #CALA
 long @C_stamp_shiftout
 add SP, #20 ' CALL addrg
 mov r2, #13 ' reg ARG coni
 mov r3, #2 ' reg ARG coni
 jmp #LODA
 long @C_tmpfilecpZG36_4d177fe4_h48c_clk_pin_L000015
 rdlong r4, RI ' reg ARG INDIR ADDRG
 jmp #LODA
 long @C_tmpfileTYZSKb_4d177fe4_h48c_dio_pin_L000014
 rdlong r5, RI ' reg ARG INDIR ADDRG
 mov BC, #16 ' arg size
 sub SP, #16 ' stack space for reg ARGs
 jmp #CALA
 long @C_stamp_shiftin
 add SP, #16 ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
 jmp #LODF
 long -4
 wrlong r11, RI ' ASGNU4 addrl
 mov r11, #1 ' reg <- coni
 jmp #LODA
 long @C_tmpfilehg4um2_4d177fe4_h48c_cs_pin_L000016
 rdlong r10, RI ' reg <- INDIRI4 addrg
 shl r11, r10 ' LSHI/U (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, r11 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__outa
 add SP, #8 ' CALL addrg
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRU4 reg
 jmp #LODA
 long @C_h48c_read_value_L000044
 rdlong  r10, RI ' reg <- con
 mov r0, r11 ' BANDI/U
 and r0, r10 ' BANDI/U (3)
' C_h48c_read_value_42 ' (symbol refcount = 0)
 jmp #POPM
 long $20c00 ' restore registers
 add SP, #4 ' framesize
 jmp #RETF


' Catalina Import stamp_shiftin

' Catalina Import stamp_shiftout

' Catalina Import printf


DAT ' code segment

' Catalina Import t_float


DAT ' code segment

' Catalina Import t_hex


DAT ' code segment

' Catalina Import t_string


DAT ' code segment

' Catalina Import _outa


DAT ' code segment

' Catalina Import _dira


DAT ' code segment

' Catalina Import _cnt


DAT ' code segment

' Catalina Import _waitcnt


DAT ' code segment
' end

DAT ' code segment

' Catalina Export bbos_delay_usec

 long ' align long

C_bbos_delay_usec
				jmp #LODA
				long @C_usec_delay
				rdlong r12, RI ' usec delay ' r2 - t1, r3 - t2, r12 - 4us
				shl r12, #2 ' compute (usec * 4)
				shr r2, #2 wz
	if_z	mov r2, #1
				mov r3, r12
				add r3, cnt
				sub r3, #41
	C_wait
				waitcnt r3, r12
				sub r2, #1 ' decrement
				test r2, r2 wz
				jmp #BRNZ
				long @C_wait
				jmp #RETN

' Catalina Import usec_delay

' end


DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export t_char

 long ' align long
C_t_char ' <symbol:t_char>
 jmp #PSHM
 long $30800 ' save registers
 mov r17, r3 ' reg var <- reg arg
 mov r16, r2 ' reg var <- reg arg
 mov r11, r17
 and r11, #1 ' BANDU4 coni
 shl r11, #23 ' LSHU4 coni
 add r11, r16 ' ADDU (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, #22 ' reg ARG coni
 mov r4, #1 ' reg ARG coni
 mov BC, #12 ' arg size
 sub SP, #12 ' stack space for reg ARGs
 jmp #CALA
 long @C__short_plugin_request
 add SP, #12 ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
' C_t_char_1 ' (symbol refcount = 0)
 jmp #POPM
 long $30800 ' restore registers
 jmp #RETN


' Catalina Import _short_plugin_request
' end

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export t_hex

 long ' align long
C_t_hex ' <symbol:t_hex>
 jmp #PSHM
 long $3e800 ' save registers
 mov r17, r3 ' reg var <- reg arg
 mov r16, r2 ' reg var <- reg arg
 mov r14, #0 ' reg <- coni
C_t_hex_2
 jmp #LODA
 long @C_t_hex_L000007
 rdlong  r11, RI ' reg <- con
 and r11, r16 ' BANDI/U (2)
 shr r11, #28 ' RSHU4 coni
 mov r15, r11 ' CVI, CVU or LOAD
 cmps r15,  #10 wz,wc
 jmp #BRAE
 long @C_t_hex_11 ' GEI4
 mov r13, r15
 adds r13, #48 ' ADDI4 coni
 jmp #JMPA
 long @C_t_hex_12 ' JUMPV addrg
C_t_hex_11
 mov r11, r15
 adds r11, #65 ' ADDI4 coni
 mov r13, r11
 subs r13, #10 ' SUBI4 coni
C_t_hex_12
 mov r2, r13 ' CVI, CVU or LOAD
 mov r3, r17 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_t_char
 add SP, #8 ' CALL addrg
 shl r16, #4 ' LSHU4 coni
' C_t_hex_3 ' (symbol refcount = 0)
 adds r14, #1 ' ADDI4 coni
 cmps r14,  #8 wz,wc
 jmp #BR_B
 long @C_t_hex_2 ' LTI4
 mov r0, #0 ' RET coni
' C_t_hex_1 ' (symbol refcount = 0)
 jmp #POPM
 long $3e800 ' restore registers
 jmp #RETN


' Catalina Import t_char


DAT ' code segment
' end

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export t_string

 long ' align long
C_t_string ' <symbol:t_string>
 jmp #PSHM
 long $30c00 ' save registers
 mov r17, r3 ' reg var <- reg arg
 mov r16, r2 ' reg var <- reg arg
 mov r11, r17
 and r11, #1 ' BANDU4 coni
 shl r11, #23 ' LSHU4 coni
 mov r10, r16 ' CVI, CVU or LOAD
 add r11, r10 ' ADDU (1)
 mov r2, r11 ' CVI, CVU or LOAD
 mov r3, #23 ' reg ARG coni
 mov r4, #1 ' reg ARG coni
 mov BC, #12 ' arg size
 sub SP, #12 ' stack space for reg ARGs
 jmp #CALA
 long @C__short_plugin_request
 add SP, #12 ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
' C_t_string_1 ' (symbol refcount = 0)
 jmp #POPM
 long $30c00 ' restore registers
 jmp #RETN


' Catalina Import _short_plugin_request
' end

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export _short_plugin_request

 long ' align long
C__short_plugin_request ' <symbol:_short_plugin_request>
 jmp #PSHM
 long $38800 ' save registers
 mov r17, r4 ' reg var <- reg arg
 mov r16, r3 ' reg var <- reg arg
 mov r15, r2 ' reg var <- reg arg
 mov r11, r16
 shl r11, #24 ' LSHI4 coni
 mov r2, r11 ' ADDI/P
 adds r2, r15 ' ADDI/P (3)
 mov r3, r17 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__sys_plugin
 add SP, #8 ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
' C__short_plugin_request_1 ' (symbol refcount = 0)
 jmp #POPM
 long $38800 ' restore registers
 jmp #RETN


' Catalina Export _long_plugin_request

 long ' align long
C__long_plugin_request ' <symbol:_long_plugin_request>
 jmp #NEWF
 sub SP, #4
 jmp #PSHM
 long $38c00 ' save registers
 mov r17, r4 ' reg var <- reg arg
 mov r16, r3 ' reg var <- reg arg
 mov r15, r2 ' reg var <- reg arg
 jmp #LODF
 long -4
 wrlong r15, RI ' ASGNI4 addrl
 mov r11, r16
 shl r11, #24 ' LSHI4 coni
 mov r10, FP
 sub r10, #-(-4) ' reg <- addrli
 mov r2, r11 ' ADDI/P
 adds r2, r10 ' ADDI/P (3)
 mov r3, r17 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__sys_plugin
 add SP, #8 ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
' C__long_plugin_request_2 ' (symbol refcount = 0)
 jmp #POPM
 long $38c00 ' restore registers
 add SP, #4 ' framesize
 jmp #RETF


' Catalina Export _long_plugin_request_2

 long ' align long
C__long_plugin_request_2 ' <symbol:_long_plugin_request_2>
 jmp #NEWF
 sub SP, #8
 jmp #PSHM
 long $3cc00 ' save registers
 mov r17, r5 ' reg var <- reg arg
 mov r16, r4 ' reg var <- reg arg
 mov r15, r3 ' reg var <- reg arg
 mov r14, r2 ' reg var <- reg arg
 jmp #LODF
 long -8
 wrlong r15, RI ' ASGNI4 addrl
 jmp #LODF
 long -4
 wrlong r14, RI ' ASGNI4 addrl
 mov r11, r16
 shl r11, #24 ' LSHI4 coni
 mov r10, FP
 sub r10, #-(-8) ' reg <- addrli
 mov r2, r11 ' ADDI/P
 adds r2, r10 ' ADDI/P (3)
 mov r3, r17 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C__sys_plugin
 add SP, #8 ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
' C__long_plugin_request_2_3 ' (symbol refcount = 0)
 jmp #POPM
 long $3cc00 ' restore registers
 add SP, #8 ' framesize
 jmp #RETF


' Catalina Import _sys_plugin
' end

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export catalina_putc

 long ' align long
C_catalina_putc ' <symbol:catalina_putc>
 jmp #PSHM
 long $30c00 ' save registers
 mov r17, r3 ' reg var <- reg arg
 mov r16, r2 ' reg var <- reg arg
 mov r11, r16 ' CVI, CVU or LOAD
 jmp #LODA
 long @C___stdout
 mov r10, RI ' reg <- addrg
 cmp r11, r10 wz
 jmp #BRNZ
 long @C_catalina_putc_2 ' NEU4
 mov r2, r17 ' CVI, CVU or LOAD
 mov r3, #1 ' reg ARG coni
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_t_char
 add SP, #8 ' CALL addrg
 jmp #JMPA
 long @C_catalina_putc_3 ' JUMPV addrg
C_catalina_putc_2
 mov r11, r16 ' CVI, CVU or LOAD
 jmp #LODA
 long @C___stderr
 mov r10, RI ' reg <- addrg
 cmp r11, r10 wz
 jmp #BRNZ
 long @C_catalina_putc_4 ' NEU4
 mov r2, r17 ' CVI, CVU or LOAD
 mov r3, #1 ' reg ARG coni
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_t_char
 add SP, #8 ' CALL addrg
C_catalina_putc_4
C_catalina_putc_3
 mov r0, r17 ' CVI, CVU or LOAD
' C_catalina_putc_1 ' (symbol refcount = 0)
 jmp #POPM
 long $30c00 ' restore registers
 jmp #RETN


' Catalina Import t_char

' Catalina Import __stderr

' Catalina Import __stdout
' end

DAT ' code segment

' Catalina Export _clockfreq

 long ' align long

C__clockfreq
 rdlong r0,#0
 jmp #RETN

' end


DAT ' code segment

' Catalina Export _clockinit

 long ' align long

C__clockinit
 clkset r3
 wrbyte r3, #4
 wrlong r2, #0
 jmp #RETN

' end


DAT ' code segment

' Catalina Export _cnt

 long ' align long

C__cnt
 mov r0, CNT
 jmp #RETN

' end


DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'


DAT ' code segment
' end

DAT ' code segment

' Catalina Export _dira

 long ' align long

C__dira
 mov r0, DIRA
 andn DIRA, r3
 or DIRA, r2
 jmp #RETN

' end


DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

 long ' align long
C_tmpfilexMRBQL_4c2c6c11_gnum_L000001 ' <symbol:gnum>
 jmp #PSHM
 long $3ec00 ' save registers
 mov r17, r4 ' reg var <- reg arg
 mov r16, r3 ' reg var <- reg arg
 mov r15, r2 ' reg var <- reg arg
 rdbyte r11, r17 ' reg <- INDIRU1 reg
 and r11, cviu_m1 ' zero extend
 cmps r11,  #42 wz
 jmp #BRNZ
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_3 ' NEI4
 rdlong r11, r15 ' reg <- INDIRP4 reg
 adds r11, #4 ' ADDP4 coni
 wrlong r11, r15 ' ASGNP4 reg
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r10, RI ' reg <- con
 adds r11, r10 ' ADDI/P (1)
 rdlong r11, r11 ' reg <- INDIRI4 reg
 wrlong r11, r16 ' ASGNI4 reg
 adds r17, #1 ' ADDP4 coni
 jmp #JMPA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_4 ' JUMPV addrg
C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_3
 mov r14, #0 ' reg <- coni
 jmp #JMPA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_9 ' JUMPV addrg
C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_8
 mov r11, #10 ' reg <- coni
 mov r0, r11 ' setup r0/r1 (2)
 mov r1, r14 ' setup r0/r1 (2)
 jmp #MULT ' MULT(I/U)
 mov r14, r0 ' ADDI/P
 adds r14, r13 ' ADDI/P (3)
 adds r17, #1 ' ADDP4 coni
C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_9
 rdbyte r11, r17 ' reg <- INDIRU1 reg
 and r11, cviu_m1 ' zero extend
 subs r11, #48 ' SUBI4 coni
 mov r13, r11 ' CVI, CVU or LOAD
 cmps r11,  #0 wz,wc
 jmp #BR_B
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_11 ' LTI4
 cmps r13,  #9 wz,wc
 jmp #BRBE
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_8 ' LEI4
C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_11
 wrlong r14, r16 ' ASGNI4 reg
C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_4
 mov r0, r17 ' CVI, CVU or LOAD
' C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_2 ' (symbol refcount = 0)
 jmp #POPM
 long $3ec00 ' restore registers
 jmp #RETN


 long ' align long
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012 ' <symbol:o_print>
 jmp #NEWF
 sub SP, #16
 jmp #PSHM
 long $3fc00 ' save registers
 mov r17, r5 ' reg var <- reg arg
 mov r16, r4 ' reg var <- reg arg
 mov r15, r3 ' reg var <- reg arg
 mov r14, r2 ' reg var <- reg arg
 mov r13, r17 ' CVI, CVU or LOAD
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRI4 reg
 mov r12, r11
 and r12, #96 ' BANDI4 coni
 mov r11, #32 ' reg <- coni
 cmps r12, r11 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_17 ' EQI4
 cmps r12, r11 wz,wc
 jmp #BR_B
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_14 ' LTI4
' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_25 ' (symbol refcount = 0)
 cmps r12,  #64 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_20 ' EQI4
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_14 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_17
 cmps r14,  #0 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_18 ' EQI4
 mov r11, FP
 add r11, #8 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 rdlong r10, r11 ' reg <- INDIRP4 reg
 adds r10, #4 ' ADDP4 coni
 wrlong r10, r11 ' ASGNP4 reg
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r11, RI ' reg <- con
 adds r11, r10 ' ADDI/P (2)
 rdlong r11, r11 ' reg <- INDIRI4 reg
 shl r11, #16
 sar r11, #16 ' sign extend
 jmp #LODF
 long -8
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_18
 mov r11, FP
 add r11, #8 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 rdlong r10, r11 ' reg <- INDIRP4 reg
 adds r10, #4 ' ADDP4 coni
 wrlong r10, r11 ' ASGNP4 reg
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r11, RI ' reg <- con
 adds r11, r10 ' ADDI/P (2)
 rdlong r11, r11 ' reg <- INDIRU4 reg
 and r11, cviu_m2 ' zero extend
 jmp #LODF
 long -4
 wrlong r11, RI ' ASGNU4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_20
 cmps r14,  #0 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_21 ' EQI4
 mov r11, FP
 add r11, #8 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 rdlong r10, r11 ' reg <- INDIRP4 reg
 adds r10, #4 ' ADDP4 coni
 wrlong r10, r11 ' ASGNP4 reg
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r11, RI ' reg <- con
 adds r11, r10 ' ADDI/P (2)
 rdlong r11, r11 ' reg <- INDIRI4 reg
 jmp #LODF
 long -8
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_21
 mov r11, FP
 add r11, #8 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 rdlong r10, r11 ' reg <- INDIRP4 reg
 adds r10, #4 ' ADDP4 coni
 wrlong r10, r11 ' ASGNP4 reg
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r11, RI ' reg <- con
 adds r11, r10 ' ADDI/P (2)
 rdlong r11, r11 ' reg <- INDIRU4 reg
 jmp #LODF
 long -4
 wrlong r11, RI ' ASGNU4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_14
 cmps r14,  #0 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_23 ' EQI4
 mov r11, FP
 add r11, #8 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 rdlong r10, r11 ' reg <- INDIRP4 reg
 adds r10, #4 ' ADDP4 coni
 wrlong r10, r11 ' ASGNP4 reg
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r11, RI ' reg <- con
 adds r11, r10 ' ADDI/P (2)
 rdlong r11, r11 ' reg <- INDIRI4 reg
 jmp #LODF
 long -8
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_23
 mov r11, FP
 add r11, #8 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 rdlong r10, r11 ' reg <- INDIRP4 reg
 adds r10, #4 ' ADDP4 coni
 wrlong r10, r11 ' ASGNP4 reg
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r11, RI ' reg <- con
 adds r11, r10 ' ADDI/P (2)
 rdlong r11, r11 ' reg <- INDIRU4 reg
 jmp #LODF
 long -4
 wrlong r11, RI ' ASGNU4 addrl
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15
 cmps r14,  #0 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_26 ' EQI4
 mov r11, FP
 sub r11, #-(-8) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #0 wz,wc
 jmp #BRAE
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_28 ' GEI4
 mov r11, r17 ' CVI, CVU or LOAD
 mov r17, r11
 adds r17, #1 ' ADDP4 coni
 mov r10, #45 ' reg <- coni
 wrbyte r10, r11 ' ASGNU1 reg
 mov r11, FP
 sub r11, #-(-8) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 neg r11, r11 ' NEGI4
 jmp #LODF
 long -8
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_29 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_28
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRI4 reg
 and r11, #2 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_30 ' EQI4
 mov r11, r17 ' CVI, CVU or LOAD
 mov r17, r11
 adds r17, #1 ' ADDP4 coni
 mov r10, #43 ' reg <- coni
 wrbyte r10, r11 ' ASGNU1 reg
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_31 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_30
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRI4 reg
 and r11, #4 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_32 ' EQI4
 mov r11, r17 ' CVI, CVU or LOAD
 mov r17, r11
 adds r17, #1 ' ADDP4 coni
 mov r10, #32 ' reg <- coni
 wrbyte r10, r11 ' ASGNU1 reg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_32
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_31
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_29
 mov r11, FP
 sub r11, #-(-8) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 jmp #LODF
 long -4
 wrlong r11, RI ' ASGNU4 addrl
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_26
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRI4 reg
 and r11, #8 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_34 ' EQI4
 mov r11, r16 ' CVUI
 and r11, cviu_m1 ' zero extend
 cmps r11,  #111 wz
 jmp #BRNZ
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_34 ' NEI4
 mov r11, r17 ' CVI, CVU or LOAD
 mov r17, r11
 adds r17, #1 ' ADDP4 coni
 mov r10, #48 ' reg <- coni
 wrbyte r10, r11 ' ASGNU1 reg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_34
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRU4 reg
 cmp r11,  #0 wz
 jmp #BRNZ
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_36 ' NEU4
 cmps r15,  #0 wz
 jmp #BRNZ
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_37 ' NEI4
 mov r0, r17 ' CVI, CVU or LOAD
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_13 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_36
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRI4 reg
 and r11, #8 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_43 ' EQI4
 mov r11, r16 ' CVUI
 and r11, cviu_m1 ' zero extend
 cmps r11,  #120 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_42 ' EQI4
 cmps r11,  #88 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_42 ' EQI4
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_43
 mov r11, r16 ' CVUI
 and r11, cviu_m1 ' zero extend
 cmps r11,  #112 wz
 jmp #BRNZ
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_40 ' NEI4
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_42
 mov r11, r17 ' CVI, CVU or LOAD
 mov r17, r11
 adds r17, #1 ' ADDP4 coni
 mov r10, #48 ' reg <- coni
 wrbyte r10, r11 ' ASGNU1 reg
 mov r11, r17 ' CVI, CVU or LOAD
 mov r17, r11
 adds r17, #1 ' ADDP4 coni
 mov r10, r16 ' CVUI
 and r10, cviu_m1 ' zero extend
 cmps r10,  #88 wz
 jmp #BRNZ
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_45 ' NEI4
 mov r10, #88 ' reg <- coni
 jmp #LODF
 long -16
 wrlong r10, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_46 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_45
 mov r10, #120 ' reg <- coni
 jmp #LODF
 long -16
 wrlong r10, RI ' ASGNI4 addrl
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_46
 mov r10, FP
 sub r10, #-(-16) ' reg <- addrli
 rdlong r10, r10 ' reg <- INDIRI4 reg
 wrbyte r10, r11 ' ASGNU1 reg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_40
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_37
 mov r11, r16 ' CVUI
 and r11, cviu_m1 ' zero extend
 jmp #LODF
 long -16
 wrlong r11, RI ' ASGNI4 addrl
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 mov r10, #105 ' reg <- coni
 cmps r11, r10 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_52 ' EQI4
 cmps r11, r10 wz,wc
 jmp #BR_A
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_55 ' GTI4
' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_54 ' (symbol refcount = 0)
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 mov r10, #88 ' reg <- coni
 cmps r11, r10 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_53 ' EQI4
 cmps r11, r10 wz,wc
 jmp #BR_B
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47 ' LTI4
' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_56 ' (symbol refcount = 0)
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #98 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_50 ' EQI4
 cmps r11,  #100 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_52 ' EQI4
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_55
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 mov r10, #111 ' reg <- coni
 cmps r11, r10 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_51 ' EQI4
 cmps r11,  #112 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_53 ' EQI4
 cmps r11, r10 wz,wc
 jmp #BR_B
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47 ' LTI4
' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_57 ' (symbol refcount = 0)
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #117 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_52 ' EQI4
 cmps r11,  #120 wz
 jmp #BR_Z
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_53 ' EQI4
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_50
 mov r11, #2 ' reg <- coni
 jmp #LODF
 long -12
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_48 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_51
 mov r11, #8 ' reg <- coni
 jmp #LODF
 long -12
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_48 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_52
 mov r11, #10 ' reg <- coni
 jmp #LODF
 long -12
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_48 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_53
 mov r11, #16 ' reg <- coni
 jmp #LODF
 long -12
 wrlong r11, RI ' ASGNI4 addrl
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_48
 mov r2, r15 ' CVI, CVU or LOAD
 mov r3, r17 ' CVI, CVU or LOAD
 mov RI, FP
 sub RI, #-(-12)
 rdlong r4, RI ' reg ARG INDIR ADDRLi
 mov RI, FP
 sub RI, #-(-4)
 rdlong r5, RI ' reg ARG INDIR ADDRLi
 mov BC, #16 ' arg size
 sub SP, #16 ' stack space for reg ARGs
 jmp #CALA
 long @C__i_compute
 add SP, #16 ' CALL addrg
 mov r17, r0 ' CVI, CVU or LOAD
 mov r11, r16 ' CVUI
 and r11, cviu_m1 ' zero extend
 cmps r11,  #88 wz
 jmp #BRNZ
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_58 ' NEI4
 jmp #JMPA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_61 ' JUMPV addrg
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_60
 rdbyte r11, r13 ' reg <- INDIRU1 reg
 mov r2, r11 ' CVUI
 and r2, cviu_m1 ' zero extend
 mov BC, #4 ' arg size
 sub SP, #4 ' stack space for reg ARGs
 jmp #CALA
 long @C_toupper
 add SP, #4 ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
 wrbyte r11, r13 ' ASGNU1 reg
 adds r13, #1 ' ADDP4 coni
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_61
 mov r11, r13 ' CVI, CVU or LOAD
 mov r10, r17 ' CVI, CVU or LOAD
 cmp r11, r10 wz
 jmp #BRNZ
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_60 ' NEU4
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_58
 mov r0, r17 ' CVI, CVU or LOAD
C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_13
 jmp #POPM
 long $3fc00 ' restore registers
 add SP, #16 ' framesize
 jmp #RETF


' Catalina Export _doprnt

 long ' align long
C__doprnt ' <symbol:_doprnt>
 jmp #NEWF
 jmp #LODL
 long 1072
 sub SP, RI
 jmp #PSHM
 long $3fe00 ' save registers
 mov r17, r4 ' reg var <- reg arg
 mov RI, FP
 add RI, #12
 wrlong r3, RI ' spill reg
 mov r16, r2 ' reg var <- reg arg
 mov r12, #0 ' reg <- coni
 jmp #JMPA
 long @C__doprnt_65 ' JUMPV addrg
C__doprnt_64
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #37 wz
 jmp #BR_Z
 long @C__doprnt_67 ' EQI4
 mov r2, r16 ' CVI, CVU or LOAD
 mov RI, FP
 sub RI, #-(-16)
 rdlong r3, RI ' reg ARG INDIR ADDRLi
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_putc
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r10, RI ' reg <- con
 cmps r0, r10 wz
 jmp #BRNZ
 long @C__doprnt_69 ' NEI4
 cmps r12,  #0 wz
 jmp #BR_Z
 long @C__doprnt_75 ' EQI4
 neg r11, r12 ' NEGI4
 jmp #LODF
 long -1064
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C__doprnt_76 ' JUMPV addrg
C__doprnt_75
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r11, RI ' reg <- con
 jmp #LODF
 long -1064
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_76
 jmp #LODF
 long -1064
 rdlong r0, RI ' reg <- INDIRI4 addrl
 jmp #JMPA
 long @C__doprnt_63 ' JUMPV addrg
C__doprnt_69
 adds r12, #1 ' ADDI4 coni
 jmp #JMPA
 long @C__doprnt_65 ' JUMPV addrg
C__doprnt_67
 mov r13, #0 ' reg <- coni
C__doprnt_77
 rdbyte r11, r17 ' reg <- INDIRU1 reg
 and r11, cviu_m1 ' zero extend
 jmp #LODF
 long -1064
 wrlong r11, RI ' ASGNI4 addrl
 jmp #LODF
 long -1064
 rdlong r11, RI ' reg <- INDIRI4 addrl
 mov r10, #32 ' reg <- coni
 cmps r11, r10 wz
 jmp #BR_Z
 long @C__doprnt_85 ' EQI4
 cmps r11,  #35 wz
 jmp #BR_Z
 long @C__doprnt_86 ' EQI4
 cmps r11, r10 wz,wc
 jmp #BR_B
 long @C__doprnt_80 ' LTI4
' C__doprnt_91 ' (symbol refcount = 0)
 jmp #LODF
 long -1064
 rdlong r11, RI ' reg <- INDIRI4 addrl
 cmps r11,  #43 wz
 jmp #BR_Z
 long @C__doprnt_84 ' EQI4
 cmps r11,  #45 wz
 jmp #BR_Z
 long @C__doprnt_83 ' EQI4
 cmps r11,  #48 wz
 jmp #BR_Z
 long @C__doprnt_87 ' EQI4
 jmp #JMPA
 long @C__doprnt_80 ' JUMPV addrg
C__doprnt_83
 or r13, #1 ' BORI4 coni
 jmp #JMPA
 long @C__doprnt_81 ' JUMPV addrg
C__doprnt_84
 or r13, #2 ' BORI4 coni
 jmp #JMPA
 long @C__doprnt_81 ' JUMPV addrg
C__doprnt_85
 or r13, #4 ' BORI4 coni
 jmp #JMPA
 long @C__doprnt_81 ' JUMPV addrg
C__doprnt_86
 or r13, #8 ' BORI4 coni
 jmp #JMPA
 long @C__doprnt_81 ' JUMPV addrg
C__doprnt_87
 or r13, #16 ' BORI4 coni
 jmp #JMPA
 long @C__doprnt_81 ' JUMPV addrg
C__doprnt_80
 jmp #LODA
 long @C__doprnt_L000088
 rdlong  r11, RI ' reg <- con
 or r13, r11 ' BORI/U (1)
 jmp #JMPA
 long @C__doprnt_78 ' JUMPV addrg
C__doprnt_81
 adds r17, #1 ' ADDP4 coni
C__doprnt_78
 jmp #LODA
 long @C__doprnt_L000088
 rdlong  r11, RI ' reg <- con
 and r11, r13 ' BANDI/U (2)
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_77 ' EQI4
 jmp #LODF
 long -28
 wrlong r17, RI ' ASGNP4 addrl
 mov r2, FP
 add r2, #12 ' reg ARG ADDRFi
 mov r3, FP
 sub r3, #-(-20) ' reg ARG ADDRLi
 mov r4, r17 ' CVI, CVU or LOAD
 mov BC, #12 ' arg size
 sub SP, #12 ' stack space for reg ARGs
 jmp #CALA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001
 add SP, #12 ' CALL addrg
 mov r17, r0 ' CVI, CVU or LOAD
 mov r11, r17 ' CVI, CVU or LOAD
 mov r10, FP
 sub r10, #-(-28) ' reg <- addrli
 rdlong r10, r10 ' reg <- INDIRP4 reg
 cmp r11, r10 wz
 jmp #BR_Z
 long @C__doprnt_92 ' EQU4
 or r13, #256 ' BORI4 coni
C__doprnt_92
 rdbyte r11, r17 ' reg <- INDIRU1 reg
 and r11, cviu_m1 ' zero extend
 cmps r11,  #46 wz
 jmp #BRNZ
 long @C__doprnt_94 ' NEI4
 adds r17, #1 ' ADDP4 coni
 jmp #LODF
 long -28
 wrlong r17, RI ' ASGNP4 addrl
 mov r2, FP
 add r2, #12 ' reg ARG ADDRFi
 mov r3, FP
 sub r3, #-(-24) ' reg ARG ADDRLi
 mov r4, r17 ' CVI, CVU or LOAD
 mov BC, #12 ' arg size
 sub SP, #12 ' stack space for reg ARGs
 jmp #CALA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001
 add SP, #12 ' CALL addrg
 mov r17, r0 ' CVI, CVU or LOAD
 mov r11, FP
 sub r11, #-(-24) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #0 wz,wc
 jmp #BR_B
 long @C__doprnt_96 ' LTI4
 jmp #LODA
 long @C__doprnt_L000098
 rdlong  r11, RI ' reg <- con
 or r13, r11 ' BORI/U (1)
C__doprnt_96
C__doprnt_94
 mov r11, #0 ' reg <- coni
 mov r10, r13
 and r10, #256 ' BANDI4 coni
 cmps r10, r11 wz
 jmp #BR_Z
 long @C__doprnt_101 ' EQI4
 mov r10, FP
 sub r10, #-(-20) ' reg <- addrli
 rdlong r10, r10 ' reg <- INDIRI4 reg
 cmps r10, r11 wz,wc
 jmp #BRAE
 long @C__doprnt_101 ' GEI4
 mov r11, FP
 sub r11, #-(-20) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 neg r11, r11 ' NEGI4
 jmp #LODF
 long -20
 wrlong r11, RI ' ASGNI4 addrl
 or r13, #1 ' BORI4 coni
C__doprnt_101
 mov r11, r13
 and r11, #256 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BRNZ
 long @C__doprnt_103 ' NEI4
 mov r11, #0 ' reg <- coni
 jmp #LODF
 long -20
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_103
 mov r11, r13
 and r11, #2 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_105 ' EQI4
 jmp #LODA
 long @C__doprnt_L000107
 rdlong  r11, RI ' reg <- con
 and r13, r11 ' BANDI/U (1)
C__doprnt_105
 mov r11, r13
 and r11, #1 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_110 ' EQI4
 jmp #LODA
 long @C__doprnt_L000112
 rdlong  r11, RI ' reg <- con
 and r13, r11 ' BANDI/U (1)
C__doprnt_110
 jmp #LODF
 long -1060
 mov r11, RI ' reg <- addrl
 jmp #LODF
 long -4
 wrlong r11, RI ' ASGNP4 addrl
 jmp #LODF
 long -1060
 mov r15, RI ' reg <- addrl
 rdbyte r11, r17 ' reg <- INDIRU1 reg
 and r11, cviu_m1 ' zero extend
 jmp #LODF
 long -1064
 wrlong r11, RI ' ASGNI4 addrl
 jmp #LODF
 long -1064
 rdlong r11, RI ' reg <- INDIRI4 addrl
 mov r10, #104 ' reg <- coni
 cmps r11, r10 wz
 jmp #BR_Z
 long @C__doprnt_118 ' EQI4
 cmps r11, r10 wz,wc
 jmp #BR_A
 long @C__doprnt_122 ' GTI4
' C__doprnt_121 ' (symbol refcount = 0)
 jmp #LODF
 long -1064
 rdlong r11, RI ' reg <- INDIRI4 addrl
 cmps r11,  #76 wz
 jmp #BR_Z
 long @C__doprnt_120 ' EQI4
 jmp #JMPA
 long @C__doprnt_115 ' JUMPV addrg
C__doprnt_122
 jmp #LODF
 long -1064
 rdlong r11, RI ' reg <- INDIRI4 addrl
 cmps r11,  #108 wz
 jmp #BR_Z
 long @C__doprnt_119 ' EQI4
 jmp #JMPA
 long @C__doprnt_115 ' JUMPV addrg
C__doprnt_118
 or r13, #32 ' BORI4 coni
 adds r17, #1 ' ADDP4 coni
 jmp #JMPA
 long @C__doprnt_116 ' JUMPV addrg
C__doprnt_119
 or r13, #64 ' BORI4 coni
 adds r17, #1 ' ADDP4 coni
 jmp #JMPA
 long @C__doprnt_116 ' JUMPV addrg
C__doprnt_120
 or r13, #128 ' BORI4 coni
 adds r17, #1 ' ADDP4 coni
C__doprnt_115
C__doprnt_116
 mov r11, r17 ' CVI, CVU or LOAD
 mov r17, r11
 adds r17, #1 ' ADDP4 coni
 rdbyte r11, r11 ' reg <- INDIRU1 reg
 and r11, cviu_m1 ' zero extend
 jmp #LODF
 long -16
 wrlong r11, RI ' ASGNI4 addrl
 jmp #LODF
 long -1068
 wrlong r11, RI ' ASGNI4 addrl
 jmp #LODF
 long -1068
 rdlong r11, RI ' reg <- INDIRI4 addrl
 cmps r11,  #98 wz,wc
 jmp #BR_B
 long @C__doprnt_160 ' LTI4
 cmps r11,  #117 wz,wc
 jmp #BR_A
 long @C__doprnt_161 ' GTI4
 shl r11, #2 ' LSHI4 coni
 jmp #LODA
 long @C__doprnt_162_L000164-392
 mov r10, RI ' reg <- addrg
 adds r11, r10 ' ADDI/P (1)
 rdlong RI, r11
 jmp #JMPI ' JUMPV INDIR reg


DAT ' code segment
C__doprnt_160
 jmp #LODF
 long -1068
 rdlong r11, RI ' reg <- INDIRI4 addrl
 cmps r11,  #88 wz
 jmp #BR_Z
 long @C__doprnt_147 ' EQI4
 jmp #JMPA
 long @C__doprnt_123 ' JUMPV addrg
C__doprnt_161
 jmp #LODF
 long -1068
 rdlong r11, RI ' reg <- INDIRI4 addrl
 cmps r11,  #120 wz
 jmp #BR_Z
 long @C__doprnt_147 ' EQI4
 jmp #JMPA
 long @C__doprnt_123 ' JUMPV addrg
C__doprnt_123
 mov r2, r16 ' CVI, CVU or LOAD
 mov RI, FP
 sub RI, #-(-16)
 rdlong r3, RI ' reg ARG INDIR ADDRLi
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_putc
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r10, RI ' reg <- con
 cmps r0, r10 wz
 jmp #BRNZ
 long @C__doprnt_126 ' NEI4
 cmps r12,  #0 wz
 jmp #BR_Z
 long @C__doprnt_129 ' EQI4
 neg r11, r12 ' NEGI4
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C__doprnt_130 ' JUMPV addrg
C__doprnt_129
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r11, RI ' reg <- con
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_130
 jmp #LODF
 long -1072
 rdlong r0, RI ' reg <- INDIRI4 addrl
 jmp #JMPA
 long @C__doprnt_63 ' JUMPV addrg
C__doprnt_126
 adds r12, #1 ' ADDI4 coni
 jmp #JMPA
 long @C__doprnt_65 ' JUMPV addrg
C__doprnt_131
 mov r11, r13
 and r11, #32 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_132 ' EQI4
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 adds r11, #4 ' ADDP4 coni
 jmp #LODF
 long 12
 wrlong r11, RI ' ASGNP4 addrl
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r10, RI ' reg <- con
 adds r11, r10 ' ADDI/P (1)
 rdlong r11, r11 ' reg <- INDIRP4 reg
 mov r10, r12 ' CVI, CVU or LOAD
 wrword r10, r11 ' ASGNI2 reg
 jmp #JMPA
 long @C__doprnt_65 ' JUMPV addrg
C__doprnt_132
 mov r11, r13
 and r11, #64 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_134 ' EQI4
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 adds r11, #4 ' ADDP4 coni
 jmp #LODF
 long 12
 wrlong r11, RI ' ASGNP4 addrl
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r10, RI ' reg <- con
 adds r11, r10 ' ADDI/P (1)
 rdlong r11, r11 ' reg <- INDIRP4 reg
 wrlong r12, r11 ' ASGNI4 reg
 jmp #JMPA
 long @C__doprnt_65 ' JUMPV addrg
C__doprnt_134
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 adds r11, #4 ' ADDP4 coni
 jmp #LODF
 long 12
 wrlong r11, RI ' ASGNP4 addrl
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r10, RI ' reg <- con
 adds r11, r10 ' ADDI/P (1)
 rdlong r11, r11 ' reg <- INDIRP4 reg
 wrlong r12, r11 ' ASGNI4 reg
 jmp #JMPA
 long @C__doprnt_65 ' JUMPV addrg
C__doprnt_136
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 adds r11, #4 ' ADDP4 coni
 jmp #LODF
 long 12
 wrlong r11, RI ' ASGNP4 addrl
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r10, RI ' reg <- con
 adds r11, r10 ' ADDI/P (1)
 rdlong r11, r11 ' reg <- INDIRP4 reg
 jmp #LODF
 long -4
 wrlong r11, RI ' ASGNP4 addrl
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRP4 reg
 cmp r11,  #0 wz
 jmp #BRNZ
 long @C__doprnt_137 ' NEU4
 jmp #LODA
 long @C__doprnt_139_L000140
 mov BC, FP
 sub BC, #-(-4)
 wrlong RI, BC ' ASGNP4 addrli addrg
C__doprnt_137
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r15, r11 ' reg <- INDIRP4 reg
 jmp #JMPA
 long @C__doprnt_142 ' JUMPV addrg
C__doprnt_141
 rdbyte r11, r15 ' reg <- INDIRU1 reg
 and r11, cviu_m1 ' zero extend
 cmps r11,  #0 wz
 jmp #BRNZ
 long @C__doprnt_144 ' NEI4
 jmp #JMPA
 long @C__doprnt_124 ' JUMPV addrg
C__doprnt_144
 adds r15, #1 ' ADDP4 coni
 mov r11, FP
 sub r11, #-(-24) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 subs r11, #1 ' SUBI4 coni
 jmp #LODF
 long -24
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_142
 mov r11, #0 ' reg <- coni
 mov r10, FP
 sub r10, #-(-24) ' reg <- addrli
 rdlong r10, r10 ' reg <- INDIRI4 reg
 cmps r10, r11 wz
 jmp #BRNZ
 long @C__doprnt_141 ' NEI4
 jmp #LODA
 long @C__doprnt_L000098
 rdlong  r10, RI ' reg <- con
 and r10, r13 ' BANDI/U (2)
 cmps r10, r11 wz
 jmp #BR_Z
 long @C__doprnt_141 ' EQI4
 jmp #JMPA
 long @C__doprnt_124 ' JUMPV addrg
C__doprnt_146
C__doprnt_147
 jmp #LODA
 long @C__doprnt_L000098
 rdlong  r11, RI ' reg <- con
 and r11, r13 ' BANDI/U (2)
 cmps r11,  #0 wz
 jmp #BRNZ
 long @C__doprnt_148 ' NEI4
 mov r11, #1 ' reg <- coni
 jmp #LODF
 long -24
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C__doprnt_149 ' JUMPV addrg
C__doprnt_148
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #112 wz
 jmp #BR_Z
 long @C__doprnt_150 ' EQI4
 jmp #LODA
 long @C__doprnt_L000112
 rdlong  r11, RI ' reg <- con
 and r13, r11 ' BANDI/U (1)
C__doprnt_150
C__doprnt_149
 mov r2, #0 ' reg ARG coni
 mov RI, FP
 sub RI, #-(-24)
 rdlong r3, RI ' reg ARG INDIR ADDRLi
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 mov r4, r11 ' CVUI
 and r4, cviu_m1 ' zero extend
 mov r5, r15 ' CVI, CVU or LOAD
 sub SP, #16 ' stack space for reg ARGs
 mov RI, r13
 jmp #PSHL ' stack ARG
 mov RI, FP
 add RI, #12
 jmp #PSHL ' stack ARG ADDRFi
 mov BC, #24 ' arg size
 jmp #CALA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012
 add SP, #24 ' CALL addrg
 mov r15, r0 ' CVI, CVU or LOAD
 jmp #JMPA
 long @C__doprnt_124 ' JUMPV addrg
C__doprnt_152
 jmp #LODA
 long @C__doprnt_L000153
 rdlong  r11, RI ' reg <- con
 or r13, r11 ' BORI/U (1)
 jmp #LODA
 long @C__doprnt_L000098
 rdlong  r11, RI ' reg <- con
 and r11, r13 ' BANDI/U (2)
 cmps r11,  #0 wz
 jmp #BRNZ
 long @C__doprnt_156 ' NEI4
 mov r11, #1 ' reg <- coni
 jmp #LODF
 long -24
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C__doprnt_157 ' JUMPV addrg
C__doprnt_156
 jmp #LODA
 long @C__doprnt_L000112
 rdlong  r11, RI ' reg <- con
 and r13, r11 ' BANDI/U (1)
C__doprnt_157
 mov r2, #1 ' reg ARG coni
 mov RI, FP
 sub RI, #-(-24)
 rdlong r3, RI ' reg ARG INDIR ADDRLi
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 mov r4, r11 ' CVUI
 and r4, cviu_m1 ' zero extend
 mov r5, r15 ' CVI, CVU or LOAD
 sub SP, #16 ' stack space for reg ARGs
 mov RI, r13
 jmp #PSHL ' stack ARG
 mov RI, FP
 add RI, #12
 jmp #PSHL ' stack ARG ADDRFi
 mov BC, #24 ' arg size
 jmp #CALA
 long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012
 add SP, #24 ' CALL addrg
 mov r15, r0 ' CVI, CVU or LOAD
 jmp #JMPA
 long @C__doprnt_124 ' JUMPV addrg
C__doprnt_158
 mov r11, r15 ' CVI, CVU or LOAD
 mov r15, r11
 adds r15, #1 ' ADDP4 coni
 mov r10, FP
 add r10, #12 ' reg <- addrfi
 rdlong r10, r10 ' reg <- INDIRP4 reg
 adds r10, #4 ' ADDP4 coni
 jmp #LODF
 long 12
 wrlong r10, RI ' ASGNP4 addrl
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r9, RI ' reg <- con
 adds r10, r9 ' ADDI/P (1)
 rdlong r10, r10 ' reg <- INDIRI4 reg
 wrbyte r10, r11 ' ASGNU1 reg
 jmp #JMPA
 long @C__doprnt_124 ' JUMPV addrg
C__doprnt_159
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 adds r11, #4 ' ADDP4 coni
 jmp #LODF
 long 12
 wrlong r11, RI ' ASGNP4 addrl
 jmp #LODA
 long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
 rdlong  r10, RI ' reg <- con
 adds r11, r10 ' ADDI/P (1)
 rdlong r11, r11 ' reg <- INDIRP4 reg
 jmp #LODF
 long 12
 wrlong r11, RI ' ASGNP4 addrl
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 rdlong r11, r11 ' reg <- INDIRP4 reg
 adds r11, #4 ' ADDP4 coni
 jmp #LODF
 long 12
 wrlong r11, RI ' ASGNP4 addrl
 adds r11, r10 ' ADDI/P (1)
 rdlong r17, r11 ' reg <- INDIRP4 reg
 jmp #JMPA
 long @C__doprnt_65 ' JUMPV addrg
C__doprnt_124
 mov r11, #32 ' reg <- coni
 jmp #LODF
 long -12
 wrlong r11, RI ' ASGNI4 addrl
 mov r11, r13
 and r11, #16 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_166 ' EQI4
 mov r11, #48 ' reg <- coni
 jmp #LODF
 long -12
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_166
 mov r11, r15 ' CVI, CVU or LOAD
 mov r10, FP
 sub r10, #-(-4) ' reg <- addrli
 rdlong r10, r10 ' reg <- INDIRP4 reg
 sub r11, r10 ' SUBU (1)
 mov r14, r11 ' CVI, CVU or LOAD
 mov r11, #0 ' reg <- coni
 jmp #LODF
 long -32
 wrlong r11, RI ' ASGNI4 addrl
 mov r11, r13
 and r11, #16 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_168 ' EQI4
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #120 wz
 jmp #BR_Z
 long @C__doprnt_172 ' EQI4
 cmps r11,  #88 wz
 jmp #BRNZ
 long @C__doprnt_171 ' NEI4
C__doprnt_172
 mov r11, r13
 and r11, #8 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BRNZ
 long @C__doprnt_175 ' NEI4
C__doprnt_171
 mov r11, FP
 sub r11, #-(-16) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #112 wz
 jmp #BR_Z
 long @C__doprnt_175 ' EQI4
 jmp #LODA
 long @C__doprnt_L000153
 rdlong  r11, RI ' reg <- con
 and r11, r13 ' BANDI/U (2)
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_168 ' EQI4
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRP4 reg
 rdbyte r11, r11 ' reg <- INDIRU1 reg
 and r11, cviu_m1 ' zero extend
 cmps r11,  #43 wz
 jmp #BR_Z
 long @C__doprnt_175 ' EQI4
 cmps r11,  #45 wz
 jmp #BR_Z
 long @C__doprnt_175 ' EQI4
 cmps r11,  #32 wz
 jmp #BRNZ
 long @C__doprnt_168 ' NEI4
C__doprnt_175
 mov r11, FP
 sub r11, #-(-32) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 adds r11, #1 ' ADDI4 coni
 jmp #LODF
 long -32
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_168
 mov r11, FP
 sub r11, #-(-20) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 subs r11, r14 ' SUBI/P (1)
 jmp #LODF
 long -8
 wrlong r11, RI ' ASGNI4 addrl
 cmps r11,  #0 wz,wc
 jmp #BRBE
 long @C__doprnt_176 ' LEI4
 mov r11, r13
 and r11, #1 ' BANDI4 coni
 cmps r11,  #0 wz
 jmp #BRNZ
 long @C__doprnt_178 ' NEI4
 mov r11, FP
 sub r11, #-(-8) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 adds r12, r11 ' ADDI/P (1)
 mov r11, FP
 sub r11, #-(-32) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_180 ' EQI4
 jmp #LODA
 long @C__doprnt_L000153
 rdlong  r11, RI ' reg <- con
 and r11, r13 ' BANDI/U (2)
 cmps r11,  #0 wz
 jmp #BR_Z
 long @C__doprnt_182 ' EQI4
 subs r14, #1 ' SUBI4 coni
 adds r12, #1 ' ADDI4 coni
 mov r2, r16 ' CVI, CVU or LOAD
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRP4 reg
 mov r10, r11
 adds r10, #1 ' ADDP4 coni
 jmp #LODF
 long -4
 wrlong r10, RI ' ASGNP4 addrl
 rdbyte r11, r11 ' reg <- INDIRU1 reg
 mov r3, r11 ' CVUI
 and r3, cviu_m1 ' zero extend
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_putc
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r10, RI ' reg <- con
 cmps r0, r10 wz
 jmp #BRNZ
 long @C__doprnt_183 ' NEI4
 cmps r12,  #0 wz
 jmp #BR_Z
 long @C__doprnt_187 ' EQI4
 neg r11, r12 ' NEGI4
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C__doprnt_188 ' JUMPV addrg
C__doprnt_187
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r11, RI ' reg <- con
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_188
 jmp #LODF
 long -1072
 rdlong r0, RI ' reg <- INDIRI4 addrl
 jmp #JMPA
 long @C__doprnt_63 ' JUMPV addrg
C__doprnt_182
 subs r14, #2 ' SUBI4 coni
 adds r12, #2 ' ADDI4 coni
 mov r2, r16 ' CVI, CVU or LOAD
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRP4 reg
 mov r10, r11
 adds r10, #1 ' ADDP4 coni
 jmp #LODF
 long -4
 wrlong r10, RI ' ASGNP4 addrl
 rdbyte r11, r11 ' reg <- INDIRU1 reg
 mov r3, r11 ' CVUI
 and r3, cviu_m1 ' zero extend
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_putc
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r10, RI ' reg <- con
 cmps r0, r10 wz
 jmp #BR_Z
 long @C__doprnt_191 ' EQI4
 mov r2, r16 ' CVI, CVU or LOAD
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRP4 reg
 mov r10, r11
 adds r10, #1 ' ADDP4 coni
 jmp #LODF
 long -4
 wrlong r10, RI ' ASGNP4 addrl
 rdbyte r11, r11 ' reg <- INDIRU1 reg
 mov r3, r11 ' CVUI
 and r3, cviu_m1 ' zero extend
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_putc
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r10, RI ' reg <- con
 cmps r0, r10 wz
 jmp #BRNZ
 long @C__doprnt_189 ' NEI4
C__doprnt_191
 cmps r12,  #0 wz
 jmp #BR_Z
 long @C__doprnt_193 ' EQI4
 neg r11, r12 ' NEGI4
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C__doprnt_194 ' JUMPV addrg
C__doprnt_193
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r11, RI ' reg <- con
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_194
 jmp #LODF
 long -1072
 rdlong r0, RI ' reg <- INDIRI4 addrl
 jmp #JMPA
 long @C__doprnt_63 ' JUMPV addrg
C__doprnt_189
C__doprnt_183
C__doprnt_180
C__doprnt_195
 mov r2, r16 ' CVI, CVU or LOAD
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI ' reg ARG INDIR ADDRLi
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_putc
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r10, RI ' reg <- con
 cmps r0, r10 wz
 jmp #BRNZ
 long @C__doprnt_198 ' NEI4
 cmps r12,  #0 wz
 jmp #BR_Z
 long @C__doprnt_201 ' EQI4
 neg r11, r12 ' NEGI4
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C__doprnt_202 ' JUMPV addrg
C__doprnt_201
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r11, RI ' reg <- con
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_202
 jmp #LODF
 long -1072
 rdlong r0, RI ' reg <- INDIRI4 addrl
 jmp #JMPA
 long @C__doprnt_63 ' JUMPV addrg
C__doprnt_198
' C__doprnt_196 ' (symbol refcount = 0)
 mov r11, FP
 sub r11, #-(-8) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 subs r11, #1 ' SUBI4 coni
 jmp #LODF
 long -8
 wrlong r11, RI ' ASGNI4 addrl
 cmps r11,  #0 wz
 jmp #BRNZ
 long @C__doprnt_195 ' NEI4
C__doprnt_178
C__doprnt_176
 adds r12, r14 ' ADDI/P (1)
 jmp #JMPA
 long @C__doprnt_204 ' JUMPV addrg
C__doprnt_203
 mov r2, r16 ' CVI, CVU or LOAD
 mov r11, FP
 sub r11, #-(-4) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRP4 reg
 mov r10, r11
 adds r10, #1 ' ADDP4 coni
 jmp #LODF
 long -4
 wrlong r10, RI ' ASGNP4 addrl
 rdbyte r11, r11 ' reg <- INDIRU1 reg
 mov r3, r11 ' CVUI
 and r3, cviu_m1 ' zero extend
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_putc
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r10, RI ' reg <- con
 cmps r0, r10 wz
 jmp #BRNZ
 long @C__doprnt_206 ' NEI4
 cmps r12,  #0 wz
 jmp #BR_Z
 long @C__doprnt_209 ' EQI4
 neg r11, r12 ' NEGI4
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C__doprnt_210 ' JUMPV addrg
C__doprnt_209
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r11, RI ' reg <- con
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_210
 jmp #LODF
 long -1072
 rdlong r0, RI ' reg <- INDIRI4 addrl
 jmp #JMPA
 long @C__doprnt_63 ' JUMPV addrg
C__doprnt_206
C__doprnt_204
 mov r11, r14
 subs r11, #1 ' SUBI4 coni
 mov r14, r11 ' CVI, CVU or LOAD
 cmps r11,  #0 wz,wc
 jmp #BRAE
 long @C__doprnt_203 ' GEI4
 mov r11, FP
 sub r11, #-(-8) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 cmps r11,  #0 wz,wc
 jmp #BRBE
 long @C__doprnt_214 ' LEI4
 mov r11, FP
 sub r11, #-(-8) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 adds r12, r11 ' ADDI/P (1)
 jmp #JMPA
 long @C__doprnt_214 ' JUMPV addrg
C__doprnt_213
 mov r2, r16 ' CVI, CVU or LOAD
 mov RI, FP
 sub RI, #-(-12)
 rdlong r3, RI ' reg ARG INDIR ADDRLi
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_putc
 add SP, #8 ' CALL addrg
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r10, RI ' reg <- con
 cmps r0, r10 wz
 jmp #BRNZ
 long @C__doprnt_216 ' NEI4
 cmps r12,  #0 wz
 jmp #BR_Z
 long @C__doprnt_219 ' EQI4
 neg r11, r12 ' NEGI4
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
 jmp #JMPA
 long @C__doprnt_220 ' JUMPV addrg
C__doprnt_219
 jmp #LODA
 long @C__doprnt_L000071
 rdlong  r11, RI ' reg <- con
 jmp #LODF
 long -1072
 wrlong r11, RI ' ASGNI4 addrl
C__doprnt_220
 jmp #LODF
 long -1072
 rdlong r0, RI ' reg <- INDIRI4 addrl
 jmp #JMPA
 long @C__doprnt_63 ' JUMPV addrg
C__doprnt_216
C__doprnt_214
 mov r11, FP
 sub r11, #-(-8) ' reg <- addrli
 rdlong r11, r11 ' reg <- INDIRI4 reg
 subs r11, #1 ' SUBI4 coni
 jmp #LODF
 long -8
 wrlong r11, RI ' ASGNI4 addrl
 cmps r11,  #0 wz,wc
 jmp #BRAE
 long @C__doprnt_213 ' GEI4
C__doprnt_65
 mov r11, r17 ' CVI, CVU or LOAD
 mov r17, r11
 adds r17, #1 ' ADDP4 coni
 rdbyte r11, r11 ' reg <- INDIRU1 reg
 and r11, cviu_m1 ' zero extend
 jmp #LODF
 long -16
 wrlong r11, RI ' ASGNI4 addrl
 cmps r11,  #0 wz
 jmp #BRNZ
 long @C__doprnt_64 ' NEI4
 mov r0, r12 ' CVI, CVU or LOAD
C__doprnt_63
 jmp #POPM
 long $3fe00 ' restore registers
 jmp #LODL
 long 1072
 add SP, RI ' framesize
 jmp #RETF


' Catalina Import _i_compute

' Catalina Import putc

' Catalina Import toupper


DAT ' code segment
' end

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export _i_compute

 long ' align long
C__i_compute ' <symbol:_i_compute>
 jmp #PSHM
 long $3fc00 ' save registers
 mov r17, r5 ' reg var <- reg arg
 mov r16, r4 ' reg var <- reg arg
 mov r15, r3 ' reg var <- reg arg
 mov r14, r2 ' reg var <- reg arg
 mov r0, r17 ' setup r0/r1 (2)
 mov r1, r16 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r13, r1 ' CVI, CVU or LOAD
 mov r0, r17 ' setup r0/r1 (2)
 mov r1, r16 ' setup r0/r1 (2)
 jmp #DIVU ' DIVU
 mov r17, r0 ' CVI, CVU or LOAD
 cmp r17,  #0 wz
 jmp #BRNZ
 long @C__i_compute_4 ' NEU4
 cmps r14,  #1 wz,wc
 jmp #BRBE
 long @C__i_compute_2 ' LEI4
C__i_compute_4
 mov r2, r14
 subs r2, #1 ' SUBI4 coni
 mov r3, r15 ' CVI, CVU or LOAD
 mov r4, r16 ' CVI, CVU or LOAD
 mov r5, r17 ' CVI, CVU or LOAD
 mov BC, #16 ' arg size
 sub SP, #16 ' stack space for reg ARGs
 jmp #CALA
 long @C__i_compute
 add SP, #16 ' CALL addrg
 mov r15, r0 ' CVI, CVU or LOAD
C__i_compute_2
 mov r11, r15 ' CVI, CVU or LOAD
 mov r15, r11
 adds r15, #1 ' ADDP4 coni
 cmps r13,  #9 wz,wc
 jmp #BRBE
 long @C__i_compute_6 ' LEI4
 mov r10, r13
 subs r10, #10 ' SUBI4 coni
 mov r12, r10
 adds r12, #97 ' ADDI4 coni
 jmp #JMPA
 long @C__i_compute_7 ' JUMPV addrg
C__i_compute_6
 mov r12, r13
 adds r12, #48 ' ADDI4 coni
C__i_compute_7
 mov r10, r12 ' CVI, CVU or LOAD
 wrbyte r10, r11 ' ASGNU1 reg
 mov r0, r15 ' CVI, CVU or LOAD
' C__i_compute_1 ' (symbol refcount = 0)
 jmp #POPM
 long $3fc00 ' restore registers
 jmp #RETN

' end

DAT ' code segment

' Catalina Export _ina

 long ' align long

C__ina
 mov r0, INA
 jmp #RETN

' end


DAT ' code segment

' Catalina Export _outa

 long ' align long

C__outa
 mov r0, OUTA
 andn OUTA, r3
 or OUTA, r2
 jmp #RETN

' end


DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export printf

 long ' align long
C_printf ' <symbol:printf>
 jmp #NEWF
 sub SP, #8
 jmp #PSHM
 long $800 ' save registers
 mov RI, FP
 add RI, #8
 sub BC, #4
 cmp BC, RI wz,wc
 if_ae wrlong r2, BC ' spill reg (varadic)
 sub BC, #4
 cmp BC, RI wz,wc
 if_ae wrlong r3, BC ' spill reg (varadic)
 sub BC, #4
 cmp BC, RI wz,wc
 if_ae wrlong r4, BC ' spill reg (varadic)
 sub BC, #4
 cmp BC, RI wz,wc
 if_ae wrlong r5, BC ' spill reg (varadic)
 mov r11, FP
 add r11, #12 ' reg <- addrfi
 jmp #LODF
 long -4
 wrlong r11, RI ' ASGNP4 addrl
 jmp #LODA
 long @C___stdout
 mov r2, RI ' reg ARG ADDRG
 mov RI, FP
 sub RI, #-(-4)
 rdlong r3, RI ' reg ARG INDIR ADDRLi
 mov RI, FP
 add RI, #8
 rdlong r4, RI ' reg ARG INDIR ADDRFi
 mov BC, #12 ' arg size
 sub SP, #12 ' stack space for reg ARGs
 jmp #CALA
 long @C__doprnt
 add SP, #12 ' CALL addrg
 jmp #LODF
 long -8
 wrlong r0, RI ' ASGNI4 addrl
 mov r11, FP
 sub r11, #-(-8) ' reg <- addrli
 rdlong r0, r11 ' reg <- INDIRI4 reg
' C_printf_1 ' (symbol refcount = 0)
 jmp #POPM
 long $800 ' restore registers
 add SP, #8 ' framesize
 jmp #RETF


' Catalina Import _doprnt

' Catalina Import __stdout
' end

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export putc

 long ' align long
C_putc ' <symbol:putc>
 jmp #PSHM
 long $30800 ' save registers
 mov r17, r3 ' reg var <- reg arg
 mov r16, r2 ' reg var <- reg arg
 mov r3, r17 ' CVI, CVU or LOAD
 mov BC, #8 ' arg size
 sub SP, #8 ' stack space for reg ARGs
 jmp #CALA
 long @C_catalina_putc
 add SP, #8 ' CALL addrg
 mov r11, r0 ' CVI, CVU or LOAD
' C_putc_1 ' (symbol refcount = 0)
 jmp #POPM
 long $30800 ' restore registers
 jmp #RETN


' Catalina Import catalina_putc
' end

DAT ' code segment
'
' LCC 4.2 for Parallax Propeller
' (Catalina v2.5 Code Generator by Ross Higson)
'

' Catalina Export toupper

 long ' align long
C_toupper ' <symbol:toupper>
 jmp #PSHM
 long $20800 ' save registers
 mov r11, r2
 subs r11, #97 ' SUBI4 coni
 cmp r11,  #26 wz,wc 
 jmp #BRAE
 long @C_toupper_3 ' GEU4
 mov r11, r2
 subs r11, #97 ' SUBI4 coni
 mov r17, r11
 adds r17, #65 ' ADDI4 coni
 jmp #JMPA
 long @C_toupper_4 ' JUMPV addrg
C_toupper_3
 mov r17, r2 ' CVI, CVU or LOAD
C_toupper_4
 mov r0, r17 ' CVI, CVU or LOAD
' C_toupper_1 ' (symbol refcount = 0)
 jmp #POPM
 long $20800 ' restore registers
 jmp #RETN

' end

DAT ' code segment

' Catalina Export _waitcnt

 long ' align long

C__waitcnt
 waitcnt r2, #0
 jmp #RETN

' end


DAT ' code segment

'
' Final PASM goes here (if any) ...
'


' Catalina Cnst

DAT ' Cnst segment

 long ' align long

Catalina_Cnst

DAT ' const data segment

 long ' align long
C_main_16_L000017 ' <symbol:16>
 byte 67
 byte 117
 byte 114
 byte 114
 byte 101
 byte 110
 byte 116
 byte 32
 byte 102
 byte 114
 byte 101
 byte 113
 byte 117
 byte 101
 byte 110
 byte 99
 byte 121
 byte 32
 byte 61
 byte 32
 byte 37
 byte 117
 byte 10
 byte 0

 long ' align long
C_main_L000013 ' <symbol:14>
 long 5000000

 long ' align long
C_bbos_time_init_L000008 ' <symbol:9>
 long 1000000

 long ' align long
C_bbos_time_init_L000004 ' <symbol:5>
 long 999999


DAT ' const data segment

 long ' align long
C_tmpfileWc2nVk_4d177fe4_post_clock_pulse_L000002_L000004 ' <symbol:5>
 long 600


DAT ' const data segment

 long ' align long
C_h48c_read_value_L000044 ' <symbol:45>
 long 8191

 long ' align long
C_h48c_gforce_of_axis_L000035 ' <symbol:36>
 long -2147483648

 long ' align long
C_h48c_gforce_of_axis_32_L000033 ' <symbol:32>
 long $4f000000 ' float

 long ' align long
C_h48c_gforce_of_axis_30_L000031 ' <symbol:30>
 long $3b102de0 ' float

 long ' align long
C_h48c_gforce_of_axis_25_L000026 ' <symbol:25>
 byte 117
 byte 61
 byte 0

 long ' align long
C_print_unsigned_as_float_22_L000023 ' <symbol:22>
 byte 41
 byte 10
 byte 0

 long ' align long
C_print_unsigned_as_float_20_L000021 ' <symbol:20>
 byte 32
 byte 40
 byte 0

 long ' align long
C_tmpfileNKgj9k_4d177fe4_umulf_L000002_12_L000013 ' <symbol:12>
 byte 82
 byte 101
 byte 115
 byte 117
 byte 108
 byte 116
 byte 58
 byte 32
 byte 37
 byte 100
 byte 10
 byte 0


DAT ' const data segment

 long ' align long
C_t_hex_L000007 ' <symbol:8>
 long -268435456


DAT ' const data segment

 long ' align long
C__doprnt_162_L000164 ' <symbol:162>
 long @C__doprnt_147
 long @C__doprnt_158
 long @C__doprnt_152
 long @C__doprnt_123
 long @C__doprnt_123
 long @C__doprnt_123
 long @C__doprnt_123
 long @C__doprnt_152
 long @C__doprnt_123
 long @C__doprnt_123
 long @C__doprnt_123
 long @C__doprnt_123
 long @C__doprnt_131
 long @C__doprnt_147
 long @C__doprnt_146
 long @C__doprnt_123
 long @C__doprnt_159
 long @C__doprnt_136
 long @C__doprnt_123
 long @C__doprnt_147


DAT ' const data segment

 long ' align long
C__doprnt_L000153 ' <symbol:154>
 long 1024

 long ' align long
C__doprnt_139_L000140 ' <symbol:139>
 byte 40
 byte 110
 byte 117
 byte 108
 byte 108
 byte 41
 byte 0

 long ' align long
C__doprnt_L000112 ' <symbol:113>
 long -17

 long ' align long
C__doprnt_L000107 ' <symbol:108>
 long -5

 long ' align long
C__doprnt_L000098 ' <symbol:99>
 long 512

 long ' align long
C__doprnt_L000088 ' <symbol:89>
 long 4096

 long ' align long
C__doprnt_L000071 ' <symbol:72>
 long -1

 long ' align long
C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005 ' <symbol:6>
 long -4


' Catalina Init

DAT ' Init segment

 long ' align long

Catalina_Init

DAT ' initalized data segment

' Catalina Export errno

 long ' align long

C_errno long 0


DAT ' initialized data segment

' Catalina Export table

 long ' align long
C_table ' <symbol:table>
 long 536870912
 long 316933406
 long 167458907
 long 85004756
 long 42667331
 long 21354465
 long 10679838
 long 5340245
 long 2670163
 long 1335087
 long 667544
 long 333772
 long 166886
 long 83443
 long 41722
 long 20861
 long 10430
 long 5215
 long 2608
 long 1304

' Catalina Export h48c_open


DAT ' initialized data segment

' Catalina Export __stdin

 long ' align long
C___stdin ' <symbol:__stdin>
 long 0
 long 0
 long 1
 long 0
 long $0
 long $0

' Catalina Export __stdout

 long ' align long
C___stdout ' <symbol:__stdout>
 long 0
 long 1
 long 2
 long 0
 long $0
 long $0

' Catalina Export __stderr

 long ' align long
C___stderr ' <symbol:__stderr>
 long 0
 long 2
 long 66
 long 0
 long $0
 long $0

' Catalina Export __iotab

 long ' align long
C___iotab ' <symbol:__iotab>
 long @C___stdin
 long @C___stdout
 long @C___stderr
 long $0
 byte 0[64]


' Catalina Data

DAT ' Data segment

 long ' align long

Catalina_Data

DAT ' uninitialized data segment

' Catalina Export usec_delay

 long ' align long
C_usec_delay ' <symbol:usec_delay>
 byte 0[4]

' Catalina Export h48c_theta_c

 long ' align long
C_h48c_theta_c ' <symbol:h48c_theta_c>
 byte 0[4]

' Catalina Export h48c_theta_b

 long ' align long
C_h48c_theta_b ' <symbol:h48c_theta_b>
 byte 0[4]

' Catalina Export h48c_theta_a

 long ' align long
C_h48c_theta_a ' <symbol:h48c_theta_a>
 byte 0[4]

' Catalina Export gforce_z

 long ' align long
C_gforce_z ' <symbol:gforce_z>
 byte 0[4]

' Catalina Export gforce_y

 long ' align long
C_gforce_y ' <symbol:gforce_y>
 byte 0[4]

' Catalina Export gforce_x

 long ' align long
C_gforce_x ' <symbol:gforce_x>
 byte 0[4]


DAT ' uninitialized data segment


DAT ' uninitialized data segment


DAT ' uninitialized data segment


DAT ' uninitialized data segment


DAT ' uninitialized data segment

 long ' align long
C_tmpfilesAijFX_4d177fe4_h48c_zerog_pin_L000017 ' <symbol:h48c_zerog_pin>
 byte 0[4]

 long ' align long
C_tmpfilehg4um2_4d177fe4_h48c_cs_pin_L000016 ' <symbol:h48c_cs_pin>
 byte 0[4]

 long ' align long
C_tmpfilecpZG36_4d177fe4_h48c_clk_pin_L000015 ' <symbol:h48c_clk_pin>
 byte 0[4]

 long ' align long
C_tmpfileTYZSKb_4d177fe4_h48c_dio_pin_L000014 ' <symbol:h48c_dio_pin>
 byte 0[4]


DAT ' uninitialized data segment


DAT ' uninitialized data segment


DAT ' uninitialized data segment


DAT ' uninitialized data segment


DAT ' uninitialized data segment


DAT ' uninitialized data segment


DAT ' uninitialized data segment


DAT ' unitialized data segment

 long ' align long
'
' sbrkinit is used by sbrk - it must be after all variables and data
'
sbrkinit  ' heap starts here

 long 0 ' this long is required to workaround an obscure homespun bug!!!



 long ' align long
Catalina_Ends ' end of segments
