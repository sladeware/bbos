0000: 00 b4 c4 04 ' Frequency: 80000000 Hz
0004: 6f          ' XTAL mode
0005: f4          ' Checksum
0006: 10 00       ' Base of program
0008: 70 51       ' Base of variables
000a: 84 51       ' Base of stack
000c: 2c 00       ' Initial program counter
000e: a4 51       ' Initial stack pointer

'******************************************************************************
'                              lmm_default.spin                                
'******************************************************************************

'=================================== CONs =====================================
_clkmode = 1032
_xinfreq = 5000000
_stack = 50
START_SCREEN = -1
START_KBD = -1
START_MOUSE = -1
'=============================== Object Header ================================
0010: 6c 00 02 05 ' 108 bytes, 2-1 methods, 5 object pointers
0014: 1c 00 1c 00 ' ptr #1 to $002c: PUB Start (locals size: 28)
0018: 6c 00 00 00 ' ptr #2 to $007c: OBJ Catalina : Catalina.spin (VAR offset: 0)
001c: d8 50 00 00 ' ptr #3 to $50e8: OBJ Common : Catalina_Common.spin (VAR offset: 0)
0020: 8c 3f 00 00 ' ptr #4 to $3f9c: OBJ Cogstore : Catalina_Cogstore.spin (VAR offset: 0)
0024: 38 43 00 00 ' ptr #5 to $4348: OBJ Kernel : Catalina_LMM.spin (VAR offset: 0)
0028: e0 4a 00 00 ' ptr #6 to $4af0: OBJ HMI : Catalina_HMI_Plugin_PC.spin (VAR offset: 0)
'=========================== Method #1: PUB Start =============================
'PUB Start : ok | cog, ALLOC, HMI_DATA, IO_BLOCK, Proxy_Lock, Server_CPU, s
'------------------------------------------------------------------------------
  Common.InitializeRegistry
'------------------------------------------------------------------------------
002c: 01             FRAME	Call without return value	
002d: 06 03 01       CALLOBJ	3:1
'------------------------------------------------------------------------------
  ALLOC := Common#REQUESTS
'------------------------------------------------------------------------------
0030: 39 7e 9c       PUSH#k2	32412
0033: 69             POP  	Locals+8
'------------------------------------------------------------------------------
  ok         := TRUE
'------------------------------------------------------------------------------
0034: 34             PUSH#-1	
0035: 61             POP  	Locals+0
'------------------------------------------------------------------------------
  Proxy_Lock := -1
'------------------------------------------------------------------------------
0036: 34             PUSH#-1	
0037: 75             POP  	Locals+20
'------------------------------------------------------------------------------
  s := CogStore.Size
'------------------------------------------------------------------------------
0038: 00             FRAME	Call with return value	
0039: 06 04 06       CALLOBJ	4:6
003c: 7d             POP  	Locals+28
'------------------------------------------------------------------------------
  if (s => 0)
'------------------------------------------------------------------------------
003d: 7c             PUSH 	Locals+28
003e: 35             PUSH#0	
003f: fe             GE   	
0040: 0a 07          JPF  	.+7 (dest:$0049)
'------------------------------------------------------------------------------
    ALLOC := ALLOC - s*4
'------------------------------------------------------------------------------
0042: 68             PUSH 	Locals+8
0043: 7c             PUSH 	Locals+28
0044: 37 01          PUSH#kp	4 ($4)
0046: f4             MPY  	
0047: ed             SUB  	
0048: 69             POP  	Locals+8
'------------------------------------------------------------------------------
  CogStore.Setup(ALLOC)
'------------------------------------------------------------------------------
0049: 01             FRAME	Call without return value	
004a: 68             PUSH 	Locals+8
004b: 06 04 07       CALLOBJ	4:7
'------------------------------------------------------------------------------
  CogStore.Stop
'------------------------------------------------------------------------------
004e: 01             FRAME	Call without return value	
004f: 06 04 03       CALLOBJ	4:3
'------------------------------------------------------------------------------
  HMI_DATA := ALLOC - 4 * HMI#DATASIZE
'------------------------------------------------------------------------------
0052: 68             PUSH 	Locals+8
0053: 37 01          PUSH#kp	4 ($4)
0055: 39 01 28       PUSH#k2	296
0058: f4             MPY  	
0059: ed             SUB  	
005a: 6d             POP  	Locals+12
'------------------------------------------------------------------------------
  ALLOC    := HMI_DATA
'------------------------------------------------------------------------------
005b: 6c             PUSH 	Locals+12
005c: 69             POP  	Locals+8
'------------------------------------------------------------------------------
  if ok
'------------------------------------------------------------------------------
005d: 60             PUSH 	Locals+0
005e: 0a 0c          JPF  	.+12 (dest:$006c)
'------------------------------------------------------------------------------
    ok := HMI.Start(Common#REGISTRY, HMI_DATA, START_KBD, START_MOUSE, START_SCREEN)
'------------------------------------------------------------------------------
0060: 00             FRAME	Call with return value	
0061: 39 7e dc       PUSH#k2	32476
0064: 6c             PUSH 	Locals+12
0065: 34             PUSH#-1	
0066: 34             PUSH#-1	
0067: 34             PUSH#-1	
0068: 06 06 02       CALLOBJ	6:2
006b: 61             POP  	Locals+0
'------------------------------------------------------------------------------
  Kernel.Run (Common#REGISTRY, Common#REQUESTS, Catalina.Base, ALLOC)
'------------------------------------------------------------------------------
006c: 01             FRAME	Call without return value	
006d: 39 7e dc       PUSH#k2	32476
0070: 39 7e 9c       PUSH#k2	32412
0073: 00             FRAME	Call with return value	
0074: 06 02 01       CALLOBJ	2:1
0077: 68             PUSH 	Locals+8
0078: 06 05 02       CALLOBJ	5:2
007b: 32             RETURN	

'******************************************************************************
'                                Catalina.spin                                 
'******************************************************************************

'=================================== CONs =====================================
SEGMENT_LAYOUT = 0
'=============================== Object Header ================================
007c: 20 3f 02 00 ' 16160 bytes, 2-1 methods, 0 object pointers
0080: 18 3f 00 00 ' ptr #1 to $3f94: PUB Base (locals size: 0)
'================================ DAT Section =================================
0084(0000):             '         org  0
0084(0000): 00 00 00 00 '         long 0          '$00
0088(0001): 00 00 00 00 '         long 0          '$01
008c(0002): 00 00 3c 5c ' INIT    jmp  0          '$02
0090(0003): 00 00 3c 5c ' LODL    jmp  0          '$03
0094(0004): 00 00 3c 5c ' LODA    jmp  0          '$04
0098(0005): 00 00 3c 5c ' LODF    jmp  0          '$05
009c(0006): 00 00 3c 5c ' PSHL    jmp  0          '$06
00a0(0007): 00 00 3c 5c ' PSHB    jmp  0          '$07
00a4(0008): 00 00 3c 5c ' CPYB    jmp  0          '$08
00a8(0009): 00 00 3c 5c ' NEWF    jmp  0          '$09
00ac(000a): 00 00 3c 5c ' RETF    jmp  0          '$0a
00b0(000b): 00 00 3c 5c ' CALA    jmp  0          '$0b
00b4(000c): 00 00 3c 5c ' RETN    jmp  0          '$0c
00b8(000d): 00 00 3c 5c ' CALI    jmp  0          '$0d
00bc(000e): 00 00 3c 5c ' JMPA    jmp  0          '$0e
00c0(000f): 00 00 3c 5c ' JMPI    jmp  0          '$0f
00c4(0010): 00 00 3c 5c ' DIVS    jmp  0          '$10
00c8(0011): 00 00 3c 5c ' DIVU    jmp  0          '$11
00cc(0012): 00 00 3c 5c ' MULT    jmp  0          '$12
00d0(0013): 00 00 3c 5c ' BR_Z    jmp  0          '$13
00d4(0014): 00 00 3c 5c ' BRNZ    jmp  0          '$14
00d8(0015): 00 00 3c 5c ' BRAE    jmp  0          '$15
00dc(0016): 00 00 3c 5c ' BR_A    jmp  0          '$16
00e0(0017): 00 00 3c 5c ' BRBE    jmp  0          '$17
00e4(0018): 00 00 3c 5c ' BR_B    jmp  0          '$18
00e8(0019): 00 00 3c 5c ' SYSP    jmp  0          '$19
00ec(001a): 00 00 3c 5c ' PSHA    jmp  0          '$1a
00f0(001b): 00 00 3c 5c ' FADD    jmp  0          '$1b
00f4(001c): 00 00 3c 5c ' FSUB    jmp  0          '$1c
00f8(001d): 00 00 3c 5c ' FMUL    jmp  0          '$1d
00fc(001e): 00 00 3c 5c ' FDIV    jmp  0          '$1e
0100(001f): 00 00 3c 5c ' FCMP    jmp  0          '$1f
0104(0020): 00 00 3c 5c ' FLIN    jmp  0          '$20
0108(0021): 00 00 3c 5c ' INFL    jmp  0          '$21
010c(0022): 00 00 3c 5c ' PSHM    jmp  0          '$22
0110(0023): 00 00 3c 5c ' POPM    jmp  0          '$23
0114(0024): 00 00 3c 5c ' PSHF    jmp  0          '$24
0118(0025): 00 00 3c 5c ' RLNG    jmp  0          '$25
011c(0026): 00 00 3c 5c ' RWRD    jmp  0          '$26
0120(0027): 00 00 3c 5c ' RBYT    jmp  0          '$27
0124(0028): 00 00 3c 5c ' WLNG    jmp  0          '$28
0128(0029): 00 00 3c 5c ' WWRD    jmp  0          '$29
012c(002a): 00 00 3c 5c ' WBYT    jmp  0          '$2a
0130(002b): 00 00 00 00 ' PC      long 0          '$2b
0134(002c): 00 00 00 00 ' SP      long 0          '$2c
0138(002d): 00 00 00 00 ' FP      long 0          '$2d
013c(002e): 00 00 00 00 ' RI      long 0          '$2e
0140(002f): 00 00 00 00 ' BC      long 0          '$2f
0144(0030): 00 00 00 00 ' BA      long 0          '$30
0148(0031): 00 00 00 00 ' BZ      long 0          '$31
014c(0032): 00 00 00 00 ' CS      long 0          '$32
0150(0033): 00 00 00 00 ' r0      long 0          '$33
0154(0034): 00 00 00 00 ' r1      long 0          '$34
0158(0035): 00 00 00 00 ' r2      long 0          '$35
015c(0036): 00 00 00 00 ' r3      long 0          '$36
0160(0037): 00 00 00 00 ' r4      long 0          '$37
0164(0038): 00 00 00 00 ' r5      long 0          '$38
0168(0039): 00 00 00 00 ' r6      long 0          '$39
016c(003a): 00 00 00 00 ' r7      long 0          '$3a
0170(003b): 00 00 00 00 ' r8      long 0          '$3b
0174(003c): 00 00 00 00 ' r9      long 0          '$3c
0178(003d): 00 00 00 00 ' r10     long 0          '$3d
017c(003e): 00 00 00 00 ' r11     long 0          '$3e
0180(003f): 00 00 00 00 ' r12     long 0          '$3f
0184(0040): 00 00 00 00 ' r13     long 0          '$40
0188(0041): 00 00 00 00 ' r14     long 0          '$41
018c(0042): 00 00 00 00 ' r15     long 0          '$42
0190(0043): 00 00 00 00 ' r16     long 0          '$43
0194(0044): 00 00 00 00 ' r17     long 0          '$44
0198(0045): 00 00 00 00 ' r18     long 0          '$45
019c(0046): 00 00 00 00 ' r19     long 0          '$46
01a0(0047): 00 00 00 00 ' r20     long 0          '$47
01a4(0048): 00 00 00 00 ' r21     long 0          '$48
01a8(0049): 00 00 00 00 ' r22     long 0          '$49
01ac(004a): 00 00 00 00 ' r23     long 0          '$4a
01b0(004b): 00 00 00 80 ' Bit31   long  $80000000 '$4b
01b4(004c): ff ff ff ff ' all_1s  long  $ffffffff '$4c
01b8(004d): ff 00 00 00 ' cviu_m1 long  $000000ff '$4d
01bc(004e): ff ff 00 00 ' cviu_m2 long  $0000ffff '$4e
01c0(004f): 00 00 00 ff ' top8    long  $ff000000 '$4f   ' top 8 bits bitmask
01c4(0050): ff ff ff 00 ' low24   long  $00ffffff '$50   ' low 24 bits bitmask
01c8(0051): 14 3f 00 00 ' init_BZ long  @sbrkinit '$51   ' end of code / start of heap
01cc(0052): 2c 1a 00 00 ' init_PC long  @C_main   '$52   ' the initial PC
01d0(0053):             ' seglayout
01d0(0053): 00 00 00 00 '         long  SEGMENT_LAYOUT
01d4(0054):             ' segtable
01d4(0054): 6c 01 00 00 '         long  @Catalina_Code
01d8(0055): 58 39 00 00 '         long  @Catalina_Cnst
01dc(0056): 24 3d 00 00 '         long  @Catalina_Init
01e0(0057): 20 3e 00 00 '         long  @Catalina_Data
01e4(0058): 18 3f 00 00 '         long  @Catalina_Ends
01e8(0059):             '  long ' align long
01e8(0059):             ' Catalina_Code
01e8(0059):             '  long ' align long
01e8(0059):             '  long ' align long
01e8(0059):             ' C__exit
01e8(0059): 80 66 fc a0 '  mov r0,#$80
01ec(005a): 00 66 7c 0c '  clkset r0
01f0(005b):             ' C__sys_plugin
01f0(005b): 19 00 7c 5c '  jmp #SYSP
01f4(005c): 0c 00 7c 5c '  jmp #RETN
01f8(005d):             ' C_arg_setup
01f8(005d): 04 00 7c 5c '  jmp #LODA                 ' point to argv address
01fc(005e): 98 01 00 00 '  long @C_argv_locn
0200(005f): 2e 5e bc 08 '  rdlong BC,RI
0204(0060): 2f 6c bc 04 '  rdword r3,BC              ' load argc
0208(0061): 02 5e fc 80 '  add BC,#2
020c(0062): 2f 6a bc 04 '  rdword r2,BC              ' load argv
0210(0063): 0c 00 7c 5c '  jmp #RETN                 ' done
0214(0064):             ' C_argv_locn
0214(0064): 30 7f 00 00 '  long $7F30                ' must match value in Catalina_Common_Input.spin
0218(0065):             ' C_debug_init
0218(0065): 0c 00 7c 5c '  jmp #RETN                 ' done
021c(0066):             '  long ' align long
021c(0066):             ' C_bbos_idle ' <symbol:bbos_idle>
021c(0066): 0c 00 7c 5c '  jmp #RETN
0220(0067):             '  long ' align long
0220(0067):             ' C_bbos_panic ' <symbol:bbos_panic>
0220(0067): 09 00 7c 5c '  jmp #NEWF
0224(0068): 2d 5c bc a0 '  mov RI, FP
0228(0069): 08 5c fc 80 '  add RI, #8
022c(006a): 04 5e fc 84 '  sub BC, #4
0230(006b): 2e 5e 3c 87 '  cmp BC, RI wz,wc
0234(006c): 2f 6a 0c 08 '  if_ae wrlong r2, BC ' spill reg (varadic)
0238(006d): 04 5e fc 84 '  sub BC, #4
023c(006e): 2e 5e 3c 87 '  cmp BC, RI wz,wc
0240(006f): 2f 6c 0c 08 '  if_ae wrlong r3, BC ' spill reg (varadic)
0244(0070): 04 5e fc 84 '  sub BC, #4
0248(0071): 2e 5e 3c 87 '  cmp BC, RI wz,wc
024c(0072): 2f 6e 0c 08 '  if_ae wrlong r4, BC ' spill reg (varadic)
0250(0073): 04 5e fc 84 '  sub BC, #4
0254(0074): 2e 5e 3c 87 '  cmp BC, RI wz,wc
0258(0075): 2f 70 0c 08 '  if_ae wrlong r5, BC ' spill reg (varadic)
025c(0076): 0a 00 7c 5c '  jmp #RETF
0260(0077):             '  long ' align long
0260(0077):             ' C_bbos_switch_thread ' <symbol:bbos_switch_thread>
0260(0077): 22 00 7c 5c '  jmp #PSHM
0264(0078): 00 08 00 00 '  long $800 ' save registers
0268(0079): 00 5e fc a0 '  mov BC, #0 ' arg size
026c(007a): 0b 00 7c 5c '  jmp #CALA
0270(007b): ac 12 00 00 '  long @C_bbos_sched_myself ' CALL addrg
0274(007c): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
0278(007d): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
027c(007e): 03 7c 7c c3 '  cmps r11,  #3 wz,wc
0280(007f): 15 00 7c 5c '  jmp #BRAE
0284(0080): 14 02 00 00 '  long @C_bbos_switch_thread_6 ' GEI4
0288(0081): 0e 00 7c 5c '  jmp #JMPA
028c(0082): 34 02 00 00 '  long @C_bbos_switch_thread_7 ' JUMPV addrg
0290(0083):             ' C_bbos_switch_thread_6
0290(0083): 04 00 7c 5c '  jmp #LODA
0294(0084): 1c 3a 00 00 '  long @C_bbos_switch_thread_4_L000005
0298(0085): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
029c(0086): 04 5e fc a0 '  mov BC, #4 ' arg size
02a0(0087): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
02a4(0088): 0b 00 7c 5c '  jmp #CALA
02a8(0089): 18 1b 00 00 '  long @C___bad_assertion
02ac(008a): 04 58 fc 80 '  add SP, #4 ' CALL addrg
02b0(008b):             ' C_bbos_switch_thread_7
02b0(008b): 00 5e fc a0 '  mov BC, #0 ' arg size
02b4(008c): 0b 00 7c 5c '  jmp #CALA
02b8(008d): ac 12 00 00 '  long @C_bbos_sched_myself ' CALL addrg
02bc(008e): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
02c0(008f): 3e 6a bc a0 '  mov r2, r11 ' CVUI
02c4(0090): 4d 6a bc 60 '  and r2, cviu_m1 ' zero extend
02c8(0091): 04 5e fc a0 '  mov BC, #4 ' arg size
02cc(0092): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
02d0(0093): 0b 00 7c 5c '  jmp #CALA
02d4(0094): 68 08 00 00 '  long @C_bbos_thread_execute
02d8(0095): 04 58 fc 80 '  add SP, #4 ' CALL addrg
02dc(0096): 23 00 7c 5c '  jmp #POPM
02e0(0097): 00 08 00 00 '  long $800 ' restore registers
02e4(0098): 0c 00 7c 5c '  jmp #RETN
02e8(0099):             '  long ' align long
02e8(0099):             ' C_bbos_start_thread ' <symbol:bbos_start_thread>
02e8(0099): 22 00 7c 5c '  jmp #PSHM
02ec(009a): 00 08 03 00 '  long $30800 ' save registers
02f0(009b): 36 88 bc a0 '  mov r17, r3 ' reg var <- reg arg
02f4(009c): 35 86 bc a0 '  mov r16, r2 ' reg var <- reg arg
02f8(009d): 44 7c bc a0 '  mov r11, r17 ' CVUI
02fc(009e): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
0300(009f): 03 7c 7c c3 '  cmps r11,  #3 wz,wc
0304(00a0): 15 00 7c 5c '  jmp #BRAE
0308(00a1): 98 02 00 00 '  long @C_bbos_start_thread_11 ' GEI4
030c(00a2): 0e 00 7c 5c '  jmp #JMPA
0310(00a3): b8 02 00 00 '  long @C_bbos_start_thread_12 ' JUMPV addrg
0314(00a4):             ' C_bbos_start_thread_11
0314(00a4): 04 00 7c 5c '  jmp #LODA
0318(00a5): b8 39 00 00 '  long @C_bbos_start_thread_9_L000010
031c(00a6): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
0320(00a7): 04 5e fc a0 '  mov BC, #4 ' arg size
0324(00a8): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0328(00a9): 0b 00 7c 5c '  jmp #CALA
032c(00aa): 18 1b 00 00 '  long @C___bad_assertion
0330(00ab): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0334(00ac):             ' C_bbos_start_thread_12
0334(00ac): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
0338(00ad): 44 6c bc a0 '  mov r3, r17 ' CVUI
033c(00ae): 4d 6c bc 60 '  and r3, cviu_m1 ' zero extend
0340(00af): 08 5e fc a0 '  mov BC, #8 ' arg size
0344(00b0): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0348(00b1): 0b 00 7c 5c '  jmp #CALA
034c(00b2): 34 08 00 00 '  long @C_bbos_thread_init
0350(00b3): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0354(00b4): 44 6a bc a0 '  mov r2, r17 ' CVUI
0358(00b5): 4d 6a bc 60 '  and r2, cviu_m1 ' zero extend
035c(00b6): 04 5e fc a0 '  mov BC, #4 ' arg size
0360(00b7): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0364(00b8): 0b 00 7c 5c '  jmp #CALA
0368(00b9): d4 12 00 00 '  long @C_bbos_sched_enqueue
036c(00ba): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0370(00bb): 00 66 fc a0 '  mov r0, #0 ' RET coni
0374(00bc): 23 00 7c 5c '  jmp #POPM
0378(00bd): 00 08 03 00 '  long $30800 ' restore registers
037c(00be): 0c 00 7c 5c '  jmp #RETN
0380(00bf):             '  long ' align long
0380(00bf):             ' C_bbos_stop_thread ' <symbol:bbos_stop_thread>
0380(00bf): 22 00 7c 5c '  jmp #PSHM
0384(00c0): 00 08 02 00 '  long $20800 ' save registers
0388(00c1): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
038c(00c2): 44 7c bc a0 '  mov r11, r17 ' CVUI
0390(00c3): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
0394(00c4): 03 7c 7c c3 '  cmps r11,  #3 wz,wc
0398(00c5): 15 00 7c 5c '  jmp #BRAE
039c(00c6): 2c 03 00 00 '  long @C_bbos_stop_thread_16 ' GEI4
03a0(00c7): 0e 00 7c 5c '  jmp #JMPA
03a4(00c8): 4c 03 00 00 '  long @C_bbos_stop_thread_17 ' JUMPV addrg
03a8(00c9):             ' C_bbos_stop_thread_16
03a8(00c9): 04 00 7c 5c '  jmp #LODA
03ac(00ca): 58 39 00 00 '  long @C_bbos_stop_thread_14_L000015
03b0(00cb): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
03b4(00cc): 04 5e fc a0 '  mov BC, #4 ' arg size
03b8(00cd): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
03bc(00ce): 0b 00 7c 5c '  jmp #CALA
03c0(00cf): 18 1b 00 00 '  long @C___bad_assertion
03c4(00d0): 04 58 fc 80 '  add SP, #4 ' CALL addrg
03c8(00d1):             ' C_bbos_stop_thread_17
03c8(00d1): 04 00 7c 5c '  jmp #LODA
03cc(00d2): 18 3a 00 00 '  long @C_bbos_stop_thread_L000019
03d0(00d3): 2e 6a bc 08 '  rdlong r2, RI ' reg ARG con
03d4(00d4): 44 6c bc a0 '  mov r3, r17 ' CVUI
03d8(00d5): 4d 6c bc 60 '  and r3, cviu_m1 ' zero extend
03dc(00d6): 08 5e fc a0 '  mov BC, #8 ' arg size
03e0(00d7): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
03e4(00d8): 0b 00 7c 5c '  jmp #CALA
03e8(00d9): 34 08 00 00 '  long @C_bbos_thread_init
03ec(00da): 08 58 fc 80 '  add SP, #8 ' CALL addrg
03f0(00db): 44 6a bc a0 '  mov r2, r17 ' CVUI
03f4(00dc): 4d 6a bc 60 '  and r2, cviu_m1 ' zero extend
03f8(00dd): 04 5e fc a0 '  mov BC, #4 ' arg size
03fc(00de): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0400(00df): 0b 00 7c 5c '  jmp #CALA
0404(00e0): 28 14 00 00 '  long @C_bbos_sched_dequeue
0408(00e1): 04 58 fc 80 '  add SP, #4 ' CALL addrg
040c(00e2): 00 66 fc a0 '  mov r0, #0 ' RET coni
0410(00e3): 23 00 7c 5c '  jmp #POPM
0414(00e4): 00 08 02 00 '  long $20800 ' restore registers
0418(00e5): 0c 00 7c 5c '  jmp #RETN
041c(00e6):             '  long ' align long
041c(00e6):             ' C_bbos_init ' <symbol:bbos_init>
041c(00e6): 22 00 7c 5c '  jmp #PSHM
0420(00e7): 00 08 02 00 '  long $20800 ' save registers
0424(00e8): 00 88 fc a0 '  mov r17, #0 ' reg <- coni
0428(00e9): 0e 00 7c 5c '  jmp #JMPA
042c(00ea): ec 03 00 00 '  long @C_bbos_init_26 ' JUMPV addrg
0430(00eb):             ' C_bbos_init_23
0430(00eb): 04 00 7c 5c '  jmp #LODA
0434(00ec): 18 3a 00 00 '  long @C_bbos_stop_thread_L000019
0438(00ed): 2e 6a bc 08 '  rdlong r2, RI ' reg ARG con
043c(00ee): 44 6c bc a0 '  mov r3, r17 ' CVUI
0440(00ef): 4d 6c bc 60 '  and r3, cviu_m1 ' zero extend
0444(00f0): 08 5e fc a0 '  mov BC, #8 ' arg size
0448(00f1): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
044c(00f2): 0b 00 7c 5c '  jmp #CALA
0450(00f3): 34 08 00 00 '  long @C_bbos_thread_init
0454(00f4): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0458(00f5): 44 7c bc a0 '  mov r11, r17 ' CVUI
045c(00f6): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
0460(00f7): 01 7c fc d0 '  adds r11, #1 ' ADDI4 coni
0464(00f8): 3e 88 bc a0 '  mov r17, r11 ' CVI, CVU or LOAD
0468(00f9):             ' C_bbos_init_26
0468(00f9): 44 7c bc a0 '  mov r11, r17 ' CVUI
046c(00fa): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
0470(00fb): 03 7c 7c c3 '  cmps r11,  #3 wz,wc
0474(00fc): 18 00 7c 5c '  jmp #BR_B
0478(00fd): b4 03 00 00 '  long @C_bbos_init_23 ' LTI4
047c(00fe): 00 5e fc a0 '  mov BC, #0 ' arg size
0480(00ff): 0b 00 7c 5c '  jmp #CALA
0484(0100): 64 17 00 00 '  long @C_bbos_sched_init ' CALL addrg
0488(0101): 23 00 7c 5c '  jmp #POPM
048c(0102): 00 08 02 00 '  long $20800 ' restore registers
0490(0103): 0c 00 7c 5c '  jmp #RETN
0494(0104):             '  long ' align long
0494(0104):             ' C_bbos_start ' <symbol:bbos_start>
0494(0104): 04 00 7c 5c '  jmp #LODA
0498(0105): a0 01 00 00 '  long @C_bbos_idle
049c(0106): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
04a0(0107): 01 6c fc a0 '  mov r3, #1 ' reg ARG coni
04a4(0108): 08 5e fc a0 '  mov BC, #8 ' arg size
04a8(0109): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
04ac(010a): 0b 00 7c 5c '  jmp #CALA
04b0(010b): 6c 02 00 00 '  long @C_bbos_start_thread
04b4(010c): 08 58 fc 80 '  add SP, #8 ' CALL addrg
04b8(010d): 0e 00 7c 5c '  jmp #JMPA
04bc(010e): 5c 04 00 00 '  long @C_bbos_start_29 ' JUMPV addrg
04c0(010f):             ' C_bbos_start_28
04c0(010f): 00 5e fc a0 '  mov BC, #0 ' arg size
04c4(0110): 0b 00 7c 5c '  jmp #CALA
04c8(0111): f0 17 00 00 '  long @C_bbos_sched_move ' CALL addrg
04cc(0112): 00 5e fc a0 '  mov BC, #0 ' arg size
04d0(0113): 0b 00 7c 5c '  jmp #CALA
04d4(0114): e4 01 00 00 '  long @C_bbos_switch_thread ' CALL addrg
04d8(0115):             ' C_bbos_start_29
04d8(0115): 0e 00 7c 5c '  jmp #JMPA
04dc(0116): 44 04 00 00 '  long @C_bbos_start_28 ' JUMPV addrg
04e0(0117): 0c 00 7c 5c '  jmp #RETN
04e4(0118):             '  long ' align long
04e4(0118):             ' C_bbos_port_is_empty ' <symbol:bbos_port_is_empty>
04e4(0118): 22 00 7c 5c '  jmp #PSHM
04e8(0119): 00 0c 02 00 '  long $20c00 ' save registers
04ec(011a): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
04f0(011b): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
04f4(011c): 44 7a bc a0 '  mov r10, r17 ' CVUI
04f8(011d): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
04fc(011e): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
0500(011f): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
0504(0120): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
0508(0121): 04 00 7c 5c '  jmp #LODA
050c(0122): 28 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002+8
0510(0123): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
0514(0124): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
0518(0125): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (3)
051c(0126): 3e 7c bc 04 '  rdword r11, r11 ' reg <- INDIRU2 reg
0520(0127): 3e 66 bc a0 '  mov r0, r11 ' CVUI
0524(0128): 4e 66 bc 60 '  and r0, cviu_m2 ' zero extend
0528(0129): 23 00 7c 5c '  jmp #POPM
052c(012a): 00 0c 02 00 '  long $20c00 ' restore registers
0530(012b): 0c 00 7c 5c '  jmp #RETN
0534(012c):             '  long ' align long
0534(012c):             ' C_bbos_port_send ' <symbol:bbos_port_send>
0534(012c): 22 00 7c 5c '  jmp #PSHM
0538(012d): 00 8e 03 00 '  long $38e00 ' save registers
053c(012e): 37 88 bc a0 '  mov r17, r4 ' reg var <- reg arg
0540(012f): 36 86 bc a0 '  mov r16, r3 ' reg var <- reg arg
0544(0130): 35 84 bc a0 '  mov r15, r2 ' reg var <- reg arg
0548(0131): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
054c(0132): 44 7a bc a0 '  mov r10, r17 ' CVUI
0550(0133): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
0554(0134): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
0558(0135): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
055c(0136): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
0560(0137): 04 00 7c 5c '  jmp #LODA
0564(0138): 24 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002+4
0568(0139): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
056c(013a): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
0570(013b): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (3)
0574(013c): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
0578(013d): 00 7c 7c 86 '  cmp r11,  #0 wz
057c(013e): 14 00 7c 5c '  jmp #BRNZ
0580(013f): 8c 05 00 00 '  long @C_bbos_port_send_6 ' NEU4
0584(0140): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
0588(0141): 44 7a bc a0 '  mov r10, r17 ' CVUI
058c(0142): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
0590(0143): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
0594(0144): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
0598(0145): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
059c(0146): 04 00 7c 5c '  jmp #LODA
05a0(0147): 20 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002
05a4(0148): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
05a8(0149): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
05ac(014a): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (3)
05b0(014b): 3e 86 3c 08 '  wrlong r16, r11 ' ASGNP4 reg
05b4(014c): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
05b8(014d): 44 7a bc a0 '  mov r10, r17 ' CVUI
05bc(014e): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
05c0(014f): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
05c4(0150): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
05c8(0151): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
05cc(0152): 04 00 7c 5c '  jmp #LODA
05d0(0153): 24 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002+4
05d4(0154): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
05d8(0155): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
05dc(0156): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (3)
05e0(0157): 3e 86 3c 08 '  wrlong r16, r11 ' ASGNP4 reg
05e4(0158): 43 7c bc a0 '  mov r11, r16
05e8(0159): 10 7c fc d0 '  adds r11, #16 ' ADDP4 coni
05ec(015a): 04 00 7c 5c '  jmp #LODA
05f0(015b): 8c 3a 00 00 '  long @C_bbos_port_send_L000011
05f4(015c): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
05f8(015d): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
05fc(015e): 00 66 fc a0 '  mov r0, #0 ' RET coni
0600(015f): 0e 00 7c 5c '  jmp #JMPA
0604(0160): 18 06 00 00 '  long @C_bbos_port_send_5 ' JUMPV addrg
0608(0161):             ' C_bbos_port_send_6
0608(0161): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
060c(0162): 44 7a bc a0 '  mov r10, r17 ' CVUI
0610(0163): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
0614(0164): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
0618(0165): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
061c(0166): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
0620(0167): 43 7a bc a0 '  mov r10, r16
0624(0168): 10 7a fc d0 '  adds r10, #16 ' ADDP4 coni
0628(0169): 04 00 7c 5c '  jmp #LODA
062c(016a): 24 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002+4
0630(016b): 2e 78 bc a0 '  mov r9, RI ' reg <- addrg
0634(016c): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
0638(016d): 3c 7c bc d0 '  adds r11, r9 ' ADDI/P (3)
063c(016e): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
0640(016f): 10 7c fc d0 '  adds r11, #16 ' ADDP4 coni
0644(0170): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
0648(0171): 3d 7c 3c 08 '  wrlong r11, r10 ' ASGNP4 reg
064c(0172): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
0650(0173): 44 7a bc a0 '  mov r10, r17 ' CVUI
0654(0174): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
0658(0175): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
065c(0176): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
0660(0177): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
0664(0178): 04 00 7c 5c '  jmp #LODA
0668(0179): 24 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002+4
066c(017a): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
0670(017b): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
0674(017c): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (3)
0678(017d): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
067c(017e): 10 7c fc d0 '  adds r11, #16 ' ADDP4 coni
0680(017f): 3e 86 3c 08 '  wrlong r16, r11 ' ASGNP4 reg
0684(0180): 43 7c bc a0 '  mov r11, r16
0688(0181): 04 7c fc d0 '  adds r11, #4 ' ADDP4 coni
068c(0182): 3e 84 3c 00 '  wrbyte r15, r11 ' ASGNU1 reg
0690(0183): 00 66 fc a0 '  mov r0, #0 ' RET coni
0694(0184):             ' C_bbos_port_send_5
0694(0184): 23 00 7c 5c '  jmp #POPM
0698(0185): 00 8e 03 00 '  long $38e00 ' restore registers
069c(0186): 0c 00 7c 5c '  jmp #RETN
06a0(0187):             '  long ' align long
06a0(0187):             ' C_bbos_port_receive ' <symbol:bbos_port_receive>
06a0(0187): 22 00 7c 5c '  jmp #PSHM
06a4(0188): 00 0e 03 00 '  long $30e00 ' save registers
06a8(0189): 36 88 bc a0 '  mov r17, r3 ' reg var <- reg arg
06ac(018a): 35 86 bc a0 '  mov r16, r2 ' reg var <- reg arg
06b0(018b): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
06b4(018c): 44 7a bc a0 '  mov r10, r17 ' CVUI
06b8(018d): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
06bc(018e): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
06c0(018f): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
06c4(0190): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
06c8(0191): 04 00 7c 5c '  jmp #LODA
06cc(0192): 20 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002
06d0(0193): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
06d4(0194): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
06d8(0195): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (3)
06dc(0196): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
06e0(0197): 00 7c 7c 86 '  cmp r11,  #0 wz
06e4(0198): 14 00 7c 5c '  jmp #BRNZ
06e8(0199): 7c 06 00 00 '  long @C_bbos_port_receive_17 ' NEU4
06ec(019a): 01 66 fc a0 '  mov r0, #1 ' RET coni
06f0(019b): 0e 00 7c 5c '  jmp #JMPA
06f4(019c): 8c 07 00 00 '  long @C_bbos_port_receive_16 ' JUMPV addrg
06f8(019d):             ' C_bbos_port_receive_17
06f8(019d): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
06fc(019e): 44 7a bc a0 '  mov r10, r17 ' CVUI
0700(019f): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
0704(01a0): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
0708(01a1): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
070c(01a2): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
0710(01a3): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
0714(01a4): 43 66 bc a0 '  mov r0, r16 ' CVI, CVU or LOAD
0718(01a5): 04 00 7c 5c '  jmp #LODA
071c(01a6): 20 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002
0720(01a7): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
0724(01a8): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
0728(01a9): 3e 68 bc 08 '  rdlong r1, r11 ' reg <- INDIRP4 reg
072c(01aa): 08 00 7c 5c '  jmp #CPYB
0730(01ab): 14 00 00 00 '  long 20 ' ASGNB
0734(01ac): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
0738(01ad): 44 7a bc a0 '  mov r10, r17 ' CVUI
073c(01ae): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
0740(01af): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
0744(01b0): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
0748(01b1): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
074c(01b2): 04 00 7c 5c '  jmp #LODA
0750(01b3): 20 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002
0754(01b4): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
0758(01b5): 33 7a bc d0 '  adds r10, r0 ' ADDI/P (2)
075c(01b6): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRP4 reg
0760(01b7): 04 00 7c 5c '  jmp #LODA
0764(01b8): 24 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002+4
0768(01b9): 2e 78 bc a0 '  mov r9, RI ' reg <- addrg
076c(01ba): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
0770(01bb): 3c 7c bc d0 '  adds r11, r9 ' ADDI/P (3)
0774(01bc): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
0778(01bd): 3e 7a 3c 86 '  cmp r10, r11 wz
077c(01be): 14 00 7c 5c '  jmp #BRNZ
0780(01bf): 4c 07 00 00 '  long @C_bbos_port_receive_19 ' NEU4
0784(01c0): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
0788(01c1): 44 7a bc a0 '  mov r10, r17 ' CVUI
078c(01c2): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
0790(01c3): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
0794(01c4): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
0798(01c5): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
079c(01c6): 04 00 7c 5c '  jmp #LODA
07a0(01c7): 24 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002+4
07a4(01c8): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
07a8(01c9): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
07ac(01ca): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (3)
07b0(01cb): 04 00 7c 5c '  jmp #LODA
07b4(01cc): 8c 3a 00 00 '  long @C_bbos_port_send_L000011
07b8(01cd): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
07bc(01ce): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
07c0(01cf): 0e 00 7c 5c '  jmp #JMPA
07c4(01d0): 88 07 00 00 '  long @C_bbos_port_receive_20 ' JUMPV addrg
07c8(01d1):             ' C_bbos_port_receive_19
07c8(01d1): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
07cc(01d2): 44 7a bc a0 '  mov r10, r17 ' CVUI
07d0(01d3): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
07d4(01d4): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
07d8(01d5): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
07dc(01d6): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
07e0(01d7): 04 00 7c 5c '  jmp #LODA
07e4(01d8): 20 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002
07e8(01d9): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
07ec(01da): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
07f0(01db): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (3)
07f4(01dc): 3e 7a bc 08 '  rdlong r10, r11 ' reg <- INDIRP4 reg
07f8(01dd): 10 7a fc d0 '  adds r10, #16 ' ADDP4 coni
07fc(01de): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRP4 reg
0800(01df): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
0804(01e0):             ' C_bbos_port_receive_20
0804(01e0): 00 66 fc a0 '  mov r0, #0 ' RET coni
0808(01e1):             ' C_bbos_port_receive_16
0808(01e1): 23 00 7c 5c '  jmp #POPM
080c(01e2): 00 0e 03 00 '  long $30e00 ' restore registers
0810(01e3): 0c 00 7c 5c '  jmp #RETN
0814(01e4):             '  long ' align long
0814(01e4):             ' C_bbos_port_flush ' <symbol:bbos_port_flush>
0814(01e4): 22 00 7c 5c '  jmp #PSHM
0818(01e5): 00 0e 02 00 '  long $20e00 ' save registers
081c(01e6): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
0820(01e7): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
0824(01e8): 44 7a bc a0 '  mov r10, r17 ' CVUI
0828(01e9): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
082c(01ea): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
0830(01eb): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
0834(01ec): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
0838(01ed): 04 00 7c 5c '  jmp #LODA
083c(01ee): 8c 3a 00 00 '  long @C_bbos_port_send_L000011
0840(01ef): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
0844(01f0): 04 00 7c 5c '  jmp #LODA
0848(01f1): 24 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002+4
084c(01f2): 2e 78 bc a0 '  mov r9, RI ' reg <- addrg
0850(01f3): 33 78 bc d0 '  adds r9, r0 ' ADDI/P (2)
0854(01f4): 3c 7a 3c 08 '  wrlong r10, r9 ' ASGNP4 reg
0858(01f5): 04 00 7c 5c '  jmp #LODA
085c(01f6): 20 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002
0860(01f7): 2e 78 bc a0 '  mov r9, RI ' reg <- addrg
0864(01f8): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
0868(01f9): 3c 7c bc d0 '  adds r11, r9 ' ADDI/P (3)
086c(01fa): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
0870(01fb): 0c 7c fc a0 '  mov r11, #12 ' reg <- coni
0874(01fc): 44 7a bc a0 '  mov r10, r17 ' CVUI
0878(01fd): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
087c(01fe): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
0880(01ff): 3d 68 bc a0 '  mov r1, r10 ' setup r0/r1 (2)
0884(0200): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
0888(0201): 04 00 7c 5c '  jmp #LODA
088c(0202): 28 3e 00 00 '  long @C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002+8
0890(0203): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
0894(0204): 33 7c bc a0 '  mov r11, r0 ' ADDI/P
0898(0205): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (3)
089c(0206): 00 7a fc a0 '  mov r10, #0 ' reg <- coni
08a0(0207): 3e 7a 3c 04 '  wrword r10, r11 ' ASGNU2 reg
08a4(0208): 23 00 7c 5c '  jmp #POPM
08a8(0209): 00 0e 02 00 '  long $20e00 ' restore registers
08ac(020a): 0c 00 7c 5c '  jmp #RETN
08b0(020b):             '  long ' align long
08b0(020b):             ' C_bbos_thread_init ' <symbol:bbos_thread_init>
08b0(020b): 22 00 7c 5c '  jmp #PSHM
08b4(020c): 00 0c 00 00 '  long $c00 ' save registers
08b8(020d): 36 7c bc a0 '  mov r11, r3 ' CVUI
08bc(020e): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
08c0(020f): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
08c4(0210): 04 00 7c 5c '  jmp #LODA
08c8(0211): 44 3e 00 00 '  long @C_tmpfileLmT6lL_4d65929a_bbos_thread_table_L000002
08cc(0212): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
08d0(0213): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
08d4(0214): 3e 6a 3c 08 '  wrlong r2, r11 ' ASGNP4 reg
08d8(0215): 23 00 7c 5c '  jmp #POPM
08dc(0216): 00 0c 00 00 '  long $c00 ' restore registers
08e0(0217): 0c 00 7c 5c '  jmp #RETN
08e4(0218):             '  long ' align long
08e4(0218):             ' C_bbos_thread_execute ' <symbol:bbos_thread_execute>
08e4(0218): 22 00 7c 5c '  jmp #PSHM
08e8(0219): 00 0c 02 00 '  long $20c00 ' save registers
08ec(021a): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
08f0(021b): 44 7c bc a0 '  mov r11, r17 ' CVUI
08f4(021c): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
08f8(021d): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
08fc(021e): 04 00 7c 5c '  jmp #LODA
0900(021f): 44 3e 00 00 '  long @C_tmpfileLmT6lL_4d65929a_bbos_thread_table_L000002
0904(0220): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
0908(0221): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
090c(0222): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
0910(0223): 00 7c 7c 86 '  cmp r11,  #0 wz
0914(0224): 13 00 7c 5c '  jmp #BR_Z
0918(0225): a8 08 00 00 '  long @C_bbos_thread_execute_7 ' EQU4
091c(0226): 0e 00 7c 5c '  jmp #JMPA
0920(0227): c8 08 00 00 '  long @C_bbos_thread_execute_8 ' JUMPV addrg
0924(0228):             ' C_bbos_thread_execute_7
0924(0228): 04 00 7c 5c '  jmp #LODA
0928(0229): 90 3a 00 00 '  long @C_bbos_thread_execute_5_L000006
092c(022a): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
0930(022b): 04 5e fc a0 '  mov BC, #4 ' arg size
0934(022c): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0938(022d): 0b 00 7c 5c '  jmp #CALA
093c(022e): 18 1b 00 00 '  long @C___bad_assertion
0940(022f): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0944(0230):             ' C_bbos_thread_execute_8
0944(0230): 44 7c bc a0 '  mov r11, r17 ' CVUI
0948(0231): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
094c(0232): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
0950(0233): 04 00 7c 5c '  jmp #LODA
0954(0234): 44 3e 00 00 '  long @C_tmpfileLmT6lL_4d65929a_bbos_thread_table_L000002
0958(0235): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
095c(0236): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
0960(0237): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
0964(0238): 00 5e fc a0 '  mov BC, #0 ' arg size
0968(0239): 3e 5c bc a0 '  mov RI, r11
096c(023a): 0d 00 7c 5c '  jmp #CALI ' CALL indirect
0970(023b): 23 00 7c 5c '  jmp #POPM
0974(023c): 00 0c 02 00 '  long $20c00 ' restore registers
0978(023d): 0c 00 7c 5c '  jmp #RETN
097c(023e):             '  long ' align long
097c(023e):             ' C_tmpfileo3PVLJ_4d65929a_h48c_open_L000006 ' <symbol:h48c_open>
097c(023e): 22 00 7c 5c '  jmp #PSHM
0980(023f): 00 cc 03 00 '  long $3cc00 ' save registers
0984(0240): 38 88 bc a0 '  mov r17, r5 ' reg var <- reg arg
0988(0241): 37 86 bc a0 '  mov r16, r4 ' reg var <- reg arg
098c(0242): 36 84 bc a0 '  mov r15, r3 ' reg var <- reg arg
0990(0243): 35 82 bc a0 '  mov r14, r2 ' reg var <- reg arg
0994(0244): 04 00 7c 5c '  jmp #LODA
0998(0245): 70 3e 00 00 '  long @C_tmpfile8UNaBL_4d65929a_h48c_dio_pin_L000002
099c(0246): 2e 88 3c 08 '  wrlong r17, RI ' ASGNI4 addrg
09a0(0247): 04 00 7c 5c '  jmp #LODA
09a4(0248): 6c 3e 00 00 '  long @C_tmpfiles8nR8K_4d65929a_h48c_clk_pin_L000003
09a8(0249): 2e 86 3c 08 '  wrlong r16, RI ' ASGNI4 addrg
09ac(024a): 04 00 7c 5c '  jmp #LODA
09b0(024b): 68 3e 00 00 '  long @C_tmpfile864xGK_4d65929a_h48c_cs_pin_L000004
09b4(024c): 2e 7c bc a0 '  mov r11, RI ' reg <- addrg
09b8(024d): 04 00 7c 5c '  jmp #LODA
09bc(024e): 68 3e 00 00 '  long @C_tmpfile864xGK_4d65929a_h48c_cs_pin_L000004
09c0(024f): 2e 84 3c 08 '  wrlong r15, RI ' ASGNI4 addrg
09c4(0250): 04 00 7c 5c '  jmp #LODA
09c8(0251): 64 3e 00 00 '  long @C_tmpfileYWQeeK_4d65929a_h48c_zerog_pin_L000005
09cc(0252): 2e 82 3c 08 '  wrlong r14, RI ' ASGNI4 addrg
09d0(0253): 01 7a fc a0 '  mov r10, #1 ' reg <- coni
09d4(0254): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
09d8(0255): 3d 5c bc a0 '  mov RI, r10
09dc(0256): 3e 5c bc 2c '  shl RI, r11
09e0(0257): 2e 7c bc a0 '  mov r11, RI ' SHLI/U (2)
09e4(0258): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
09e8(0259): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
09ec(025a): 08 5e fc a0 '  mov BC, #8 ' arg size
09f0(025b): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
09f4(025c): 0b 00 7c 5c '  jmp #CALA
09f8(025d): 30 36 00 00 '  long @C__outa
09fc(025e): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0a00(025f): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
0a04(0260): 04 00 7c 5c '  jmp #LODA
0a08(0261): 68 3e 00 00 '  long @C_tmpfile864xGK_4d65929a_h48c_cs_pin_L000004
0a0c(0262): 2e 7a bc 08 '  rdlong r10, RI ' reg <- INDIRI4 addrg
0a10(0263): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
0a14(0264): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
0a18(0265): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
0a1c(0266): 08 5e fc a0 '  mov BC, #8 ' arg size
0a20(0267): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0a24(0268): 0b 00 7c 5c '  jmp #CALA
0a28(0269): 84 1d 00 00 '  long @C__dira
0a2c(026a): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0a30(026b): 23 00 7c 5c '  jmp #POPM
0a34(026c): 00 cc 03 00 '  long $3cc00 ' restore registers
0a38(026d): 0c 00 7c 5c '  jmp #RETN
0a3c(026e):             '  long ' align long
0a3c(026e):             ' C_tmpfile0fZEjJ_4d65929a_h48c_close_L000008 ' <symbol:h48c_close>
0a3c(026e): 22 00 7c 5c '  jmp #PSHM
0a40(026f): 00 0c 00 00 '  long $c00 ' save registers
0a44(0270): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
0a48(0271): 04 00 7c 5c '  jmp #LODA
0a4c(0272): 68 3e 00 00 '  long @C_tmpfile864xGK_4d65929a_h48c_cs_pin_L000004
0a50(0273): 2e 7a bc 08 '  rdlong r10, RI ' reg <- INDIRI4 addrg
0a54(0274): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
0a58(0275): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
0a5c(0276): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
0a60(0277): 08 5e fc a0 '  mov BC, #8 ' arg size
0a64(0278): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0a68(0279): 0b 00 7c 5c '  jmp #CALA
0a6c(027a): 30 36 00 00 '  long @C__outa
0a70(027b): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0a74(027c): 23 00 7c 5c '  jmp #POPM
0a78(027d): 00 0c 00 00 '  long $c00 ' restore registers
0a7c(027e): 0c 00 7c 5c '  jmp #RETN
0a80(027f):             '  long ' align long
0a80(027f):             ' C_tmpfilemyNoRI_4d65929a_h48c_gforce_of_axis_L000010 ' <symbol:h48c_gforce_of_axis>
0a80(027f): 22 00 7c 5c '  jmp #PSHM
0a84(0280): 00 88 03 00 '  long $38800 ' save registers
0a88(0281): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
0a8c(0282): 1b 6a fc a0 '  mov r2, #27 ' reg ARG coni
0a90(0283): 04 5e fc a0 '  mov BC, #4 ' arg size
0a94(0284): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0a98(0285): 0b 00 7c 5c '  jmp #CALA
0a9c(0286): 0c 0b 00 00 '  long @C_h48c_read_value
0aa0(0287): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0aa4(0288): 33 86 bc a0 '  mov r16, r0 ' CVI, CVU or LOAD
0aa8(0289): 00 5e fc a0 '  mov BC, #0 ' arg size
0aac(028a): 0b 00 7c 5c '  jmp #CALA
0ab0(028b): 7c 1d 00 00 '  long @C__cnt ' CALL addrg
0ab4(028c): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
0ab8(028d): 3e 6a bc a0 '  mov r2, r11
0abc(028e): 2c 6b fc 80 '  add r2, #300 ' ADDU4 coni
0ac0(028f): 04 5e fc a0 '  mov BC, #4 ' arg size
0ac4(0290): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0ac8(0291): 0b 00 7c 5c '  jmp #CALA
0acc(0292): 50 39 00 00 '  long @C__waitcnt
0ad0(0293): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0ad4(0294): 44 6a bc a0 '  mov r2, r17 ' CVI, CVU or LOAD
0ad8(0295): 04 5e fc a0 '  mov BC, #4 ' arg size
0adc(0296): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0ae0(0297): 0b 00 7c 5c '  jmp #CALA
0ae4(0298): 0c 0b 00 00 '  long @C_h48c_read_value
0ae8(0299): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0aec(029a): 33 84 bc a0 '  mov r15, r0 ' CVI, CVU or LOAD
0af0(029b): 43 84 3c c3 '  cmps r15, r16 wz,wc
0af4(029c): 18 00 7c 5c '  jmp #BR_B
0af8(029d): 90 0a 00 00 '  long @C_tmpfilemyNoRI_4d65929a_h48c_gforce_of_axis_L000010_12 ' LTI4
0afc(029e): 42 66 bc a0 '  mov r0, r15 ' SUBI/P
0b00(029f): 43 66 bc d4 '  subs r0, r16 ' SUBI/P (3)
0b04(02a0): 0e 00 7c 5c '  jmp #JMPA
0b08(02a1): 9c 0a 00 00 '  long @C_tmpfilemyNoRI_4d65929a_h48c_gforce_of_axis_L000010_11 ' JUMPV addrg
0b0c(02a2):             ' C_tmpfilemyNoRI_4d65929a_h48c_gforce_of_axis_L000010_12
0b0c(02a2): 43 7c bc a0 '  mov r11, r16 ' SUBI/P
0b10(02a3): 42 7c bc d4 '  subs r11, r15 ' SUBI/P (3)
0b14(02a4): 3e 66 bc a4 '  neg r0, r11 ' NEGI4
0b18(02a5):             ' C_tmpfilemyNoRI_4d65929a_h48c_gforce_of_axis_L000010_11
0b18(02a5): 23 00 7c 5c '  jmp #POPM
0b1c(02a6): 00 88 03 00 '  long $38800 ' restore registers
0b20(02a7): 0c 00 7c 5c '  jmp #RETN
0b24(02a8):             '  long ' align long
0b24(02a8):             ' C_tmpfileyPbapI_4d65929a_h48c_free_fall_L000014 ' <symbol:h48c_free_fall>
0b24(02a8): 22 00 7c 5c '  jmp #PSHM
0b28(02a9): 00 0e 02 00 '  long $20e00 ' save registers
0b2c(02aa): 00 5e fc a0 '  mov BC, #0 ' arg size
0b30(02ab): 0b 00 7c 5c '  jmp #CALA
0b34(02ac): 28 36 00 00 '  long @C__ina ' CALL addrg
0b38(02ad): 01 7a fc a0 '  mov r10, #1 ' reg <- coni
0b3c(02ae): 04 00 7c 5c '  jmp #LODA
0b40(02af): 64 3e 00 00 '  long @C_tmpfileYWQeeK_4d65929a_h48c_zerog_pin_L000005
0b44(02b0): 2e 78 bc 08 '  rdlong r9, RI ' reg <- INDIRI4 addrg
0b48(02b1): 3c 7a bc 2c '  shl r10, r9 ' LSHI/U (1)
0b4c(02b2): 33 7c bc a0 '  mov r11, r0 ' BANDI/U
0b50(02b3): 3d 7c bc 60 '  and r11, r10 ' BANDI/U (3)
0b54(02b4): 00 7c 7c 86 '  cmp r11,  #0 wz
0b58(02b5): 13 00 7c 5c '  jmp #BR_Z
0b5c(02b6): f0 0a 00 00 '  long @C_tmpfileyPbapI_4d65929a_h48c_free_fall_L000014_17 ' EQU4
0b60(02b7): 01 88 fc a0 '  mov r17, #1 ' reg <- coni
0b64(02b8): 0e 00 7c 5c '  jmp #JMPA
0b68(02b9): f4 0a 00 00 '  long @C_tmpfileyPbapI_4d65929a_h48c_free_fall_L000014_18 ' JUMPV addrg
0b6c(02ba):             ' C_tmpfileyPbapI_4d65929a_h48c_free_fall_L000014_17
0b6c(02ba): 00 88 fc a0 '  mov r17, #0 ' reg <- coni
0b70(02bb):             ' C_tmpfileyPbapI_4d65929a_h48c_free_fall_L000014_18
0b70(02bb): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
0b74(02bc): 3e 66 bc a0 '  mov r0, r11 ' CVUI
0b78(02bd): 4d 66 bc 60 '  and r0, cviu_m1 ' zero extend
0b7c(02be): 23 00 7c 5c '  jmp #POPM
0b80(02bf): 00 0e 02 00 '  long $20e00 ' restore registers
0b84(02c0): 0c 00 7c 5c '  jmp #RETN
0b88(02c1):             '  long ' align long
0b88(02c1):             ' C_h48c_read_value ' <symbol:h48c_read_value>
0b88(02c1): 09 00 7c 5c '  jmp #NEWF
0b8c(02c2): 04 58 fc 84 '  sub SP, #4
0b90(02c3): 22 00 7c 5c '  jmp #PSHM
0b94(02c4): 00 0c 02 00 '  long $20c00 ' save registers
0b98(02c5): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
0b9c(02c6): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
0ba0(02c7): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
0ba4(02c8): 04 00 7c 5c '  jmp #LODA
0ba8(02c9): 68 3e 00 00 '  long @C_tmpfile864xGK_4d65929a_h48c_cs_pin_L000004
0bac(02ca): 2e 7a bc 08 '  rdlong r10, RI ' reg <- INDIRI4 addrg
0bb0(02cb): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
0bb4(02cc): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
0bb8(02cd): 08 5e fc a0 '  mov BC, #8 ' arg size
0bbc(02ce): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0bc0(02cf): 0b 00 7c 5c '  jmp #CALA
0bc4(02d0): 30 36 00 00 '  long @C__outa
0bc8(02d1): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0bcc(02d2): 44 6a bc a0 '  mov r2, r17 ' CVI, CVU or LOAD
0bd0(02d3): 05 7c fc a0 '  mov r11, #5 ' reg <- coni
0bd4(02d4): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
0bd8(02d5): 3e 6e bc a0 '  mov r4, r11 ' CVI, CVU or LOAD
0bdc(02d6): 04 00 7c 5c '  jmp #LODA
0be0(02d7): 6c 3e 00 00 '  long @C_tmpfiles8nR8K_4d65929a_h48c_clk_pin_L000003
0be4(02d8): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrg
0be8(02d9): 3e 70 bc a0 '  mov r5, r11 ' CVI, CVU or LOAD
0bec(02da): 04 00 7c 5c '  jmp #LODA
0bf0(02db): 70 3e 00 00 '  long @C_tmpfile8UNaBL_4d65929a_h48c_dio_pin_L000002
0bf4(02dc): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrg
0bf8(02dd): 10 58 fc 84 '  sub SP, #16 ' stack space for reg ARGs
0bfc(02de): 3e 5c bc a0 '  mov RI, r11
0c00(02df): 06 00 7c 5c '  jmp #PSHL ' stack ARG
0c04(02e0): 14 5e fc a0 '  mov BC, #20 ' arg size
0c08(02e1): 0b 00 7c 5c '  jmp #CALA
0c0c(02e2): 88 0f 00 00 '  long @C_stamp_shiftout
0c10(02e3): 14 58 fc 80 '  add SP, #20 ' CALL addrg
0c14(02e4): 0d 6a fc a0 '  mov r2, #13 ' reg ARG coni
0c18(02e5): 02 6c fc a0 '  mov r3, #2 ' reg ARG coni
0c1c(02e6): 04 00 7c 5c '  jmp #LODA
0c20(02e7): 6c 3e 00 00 '  long @C_tmpfiles8nR8K_4d65929a_h48c_clk_pin_L000003
0c24(02e8): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrg
0c28(02e9): 3e 6e bc a0 '  mov r4, r11 ' CVI, CVU or LOAD
0c2c(02ea): 04 00 7c 5c '  jmp #LODA
0c30(02eb): 70 3e 00 00 '  long @C_tmpfile8UNaBL_4d65929a_h48c_dio_pin_L000002
0c34(02ec): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrg
0c38(02ed): 3e 70 bc a0 '  mov r5, r11 ' CVI, CVU or LOAD
0c3c(02ee): 10 5e fc a0 '  mov BC, #16 ' arg size
0c40(02ef): 10 58 fc 84 '  sub SP, #16 ' stack space for reg ARGs
0c44(02f0): 0b 00 7c 5c '  jmp #CALA
0c48(02f1): 74 11 00 00 '  long @C_stamp_shiftin
0c4c(02f2): 10 58 fc 80 '  add SP, #16 ' CALL addrg
0c50(02f3): 05 00 7c 5c '  jmp #LODF
0c54(02f4): fc ff ff ff '  long -4
0c58(02f5): 2e 66 3c 08 '  wrlong r0, RI ' ASGNU4 addrl
0c5c(02f6): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
0c60(02f7): 04 00 7c 5c '  jmp #LODA
0c64(02f8): 68 3e 00 00 '  long @C_tmpfile864xGK_4d65929a_h48c_cs_pin_L000004
0c68(02f9): 2e 7a bc 08 '  rdlong r10, RI ' reg <- INDIRI4 addrg
0c6c(02fa): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
0c70(02fb): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
0c74(02fc): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
0c78(02fd): 08 5e fc a0 '  mov BC, #8 ' arg size
0c7c(02fe): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0c80(02ff): 0b 00 7c 5c '  jmp #CALA
0c84(0300): 30 36 00 00 '  long @C__outa
0c88(0301): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0c8c(0302): 2d 7c bc a0 '  mov r11, FP
0c90(0303): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
0c94(0304): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRU4 reg
0c98(0305): 04 00 7c 5c '  jmp #LODA
0c9c(0306): 30 3b 00 00 '  long @C_h48c_read_value_L000021
0ca0(0307): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
0ca4(0308): 3e 66 bc a0 '  mov r0, r11 ' BANDI/U
0ca8(0309): 3d 66 bc 60 '  and r0, r10 ' BANDI/U (3)
0cac(030a): 23 00 7c 5c '  jmp #POPM
0cb0(030b): 00 0c 02 00 '  long $20c00 ' restore registers
0cb4(030c): 04 58 fc 80 '  add SP, #4 ' framesize
0cb8(030d): 0a 00 7c 5c '  jmp #RETF
0cbc(030e):             '  long ' align long
0cbc(030e):             ' C_h48c ' <symbol:h48c>
0cbc(030e): 09 00 7c 5c '  jmp #NEWF
0cc0(030f): 04 58 fc 84 '  sub SP, #4
0cc4(0310): 22 00 7c 5c '  jmp #PSHM
0cc8(0311): 00 0c 02 00 '  long $20c00 ' save registers
0ccc(0312): 04 00 7c 5c '  jmp #LODA
0cd0(0313): 50 3e 00 00 '  long @C_h48c_message_L000026
0cd4(0314): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
0cd8(0315): 02 6c fc a0 '  mov r3, #2 ' reg ARG coni
0cdc(0316): 08 5e fc a0 '  mov BC, #8 ' arg size
0ce0(0317): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0ce4(0318): 0b 00 7c 5c '  jmp #CALA
0ce8(0319): 24 06 00 00 '  long @C_bbos_port_receive
0cec(031a): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0cf0(031b): 00 66 7c c2 '  cmps r0,  #0 wz
0cf4(031c): 13 00 7c 5c '  jmp #BR_Z
0cf8(031d): 88 0c 00 00 '  long @C_h48c_27 ' EQI4
0cfc(031e): 0e 00 7c 5c '  jmp #JMPA
0d00(031f): c8 0d 00 00 '  long @C_h48c_24 ' JUMPV addrg
0d04(0320):             ' C_h48c_27
0d04(0320): 04 00 7c 5c '  jmp #LODA
0d08(0321): 50 3e 00 00 '  long @C_h48c_message_L000026
0d0c(0322): 2e 88 bc 08 '  rdlong r17, RI ' reg <- INDIRI4 addrg
0d10(0323): 00 88 7c c3 '  cmps r17,  #0 wz,wc
0d14(0324): 18 00 7c 5c '  jmp #BR_B
0d18(0325): 74 0d 00 00 '  long @C_h48c_29 ' LTI4
0d1c(0326): 06 88 7c c3 '  cmps r17,  #6 wz,wc
0d20(0327): 16 00 7c 5c '  jmp #BR_A
0d24(0328): 74 0d 00 00 '  long @C_h48c_29 ' GTI4
0d28(0329): 44 7c bc a0 '  mov r11, r17
0d2c(032a): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
0d30(032b): 04 00 7c 5c '  jmp #LODA
0d34(032c): f0 3a 00 00 '  long @C_h48c_41_L000043
0d38(032d): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
0d3c(032e): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
0d40(032f): 3e 5c bc 08 '  rdlong RI, r11
0d44(0330): 0f 00 7c 5c '  jmp #JMPI ' JUMPV INDIR reg
0d48(0331):             ' C_h48c_33
0d48(0331): 04 00 7c 5c '  jmp #LODA
0d4c(0332): 58 3e 00 00 '  long @C_h48c_message_L000026+8
0d50(0333): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRP4 addrg
0d54(0334): 05 00 7c 5c '  jmp #LODF
0d58(0335): fc ff ff ff '  long -4
0d5c(0336): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
0d60(0337): 2d 7c bc a0 '  mov r11, FP
0d64(0338): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
0d68(0339): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
0d6c(033a): 3e 7a bc a0 '  mov r10, r11
0d70(033b): 0c 7a fc d0 '  adds r10, #12 ' ADDP4 coni
0d74(033c): 3d 6a bc 08 '  rdlong r2, r10 ' reg <- INDIRI4 reg
0d78(033d): 3e 7a bc a0 '  mov r10, r11
0d7c(033e): 08 7a fc d0 '  adds r10, #8 ' ADDP4 coni
0d80(033f): 3d 6c bc 08 '  rdlong r3, r10 ' reg <- INDIRI4 reg
0d84(0340): 3e 7a bc a0 '  mov r10, r11
0d88(0341): 04 7a fc d0 '  adds r10, #4 ' ADDP4 coni
0d8c(0342): 3d 6e bc 08 '  rdlong r4, r10 ' reg <- INDIRI4 reg
0d90(0343): 3e 70 bc 08 '  rdlong r5, r11 ' reg <- INDIRI4 reg
0d94(0344): 10 5e fc a0 '  mov BC, #16 ' arg size
0d98(0345): 10 58 fc 84 '  sub SP, #16 ' stack space for reg ARGs
0d9c(0346): 0b 00 7c 5c '  jmp #CALA
0da0(0347): 00 09 00 00 '  long @C_tmpfileo3PVLJ_4d65929a_h48c_open_L000006
0da4(0348): 10 58 fc 80 '  add SP, #16 ' CALL addrg
0da8(0349): 0e 00 7c 5c '  jmp #JMPA
0dac(034a): a0 0d 00 00 '  long @C_h48c_30 ' JUMPV addrg
0db0(034b):             ' C_h48c_35
0db0(034b): 00 5e fc a0 '  mov BC, #0 ' arg size
0db4(034c): 0b 00 7c 5c '  jmp #CALA
0db8(034d): c0 09 00 00 '  long @C_tmpfile0fZEjJ_4d65929a_h48c_close_L000008 ' CALL addrg
0dbc(034e): 0e 00 7c 5c '  jmp #JMPA
0dc0(034f): a0 0d 00 00 '  long @C_h48c_30 ' JUMPV addrg
0dc4(0350):             ' C_h48c_37
0dc4(0350): 00 5e fc a0 '  mov BC, #0 ' arg size
0dc8(0351): 0b 00 7c 5c '  jmp #CALA
0dcc(0352): a8 0a 00 00 '  long @C_tmpfileyPbapI_4d65929a_h48c_free_fall_L000014 ' CALL addrg
0dd0(0353): 04 00 7c 5c '  jmp #LODA
0dd4(0354): 58 3e 00 00 '  long @C_h48c_message_L000026+8
0dd8(0355): 2e 7a bc 08 '  rdlong r10, RI ' reg <- INDIRP4 addrg
0ddc(0356): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
0de0(0357): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
0de4(0358): 3d 7c 3c 08 '  wrlong r11, r10 ' ASGNI4 reg
0de8(0359): 0e 00 7c 5c '  jmp #JMPA
0dec(035a): a0 0d 00 00 '  long @C_h48c_30 ' JUMPV addrg
0df0(035b):             ' C_h48c_29
0df0(035b): 04 00 7c 5c '  jmp #LODA
0df4(035c): 50 3e 00 00 '  long @C_h48c_message_L000026
0df8(035d): 2e 6a bc 08 '  rdlong r2, RI ' reg ARG INDIR ADDRG
0dfc(035e): 04 00 7c 5c '  jmp #LODA
0e00(035f): 0c 3b 00 00 '  long @C_h48c_39_L000040
0e04(0360): 2e 6c bc a0 '  mov r3, RI ' reg ARG ADDRG
0e08(0361): 08 5e fc a0 '  mov BC, #8 ' arg size
0e0c(0362): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0e10(0363): 0b 00 7c 5c '  jmp #CALA
0e14(0364): a4 01 00 00 '  long @C_bbos_panic
0e18(0365): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0e1c(0366):             ' C_h48c_30
0e1c(0366): 02 6a fc a0 '  mov r2, #2 ' reg ARG coni
0e20(0367): 04 00 7c 5c '  jmp #LODA
0e24(0368): 50 3e 00 00 '  long @C_h48c_message_L000026
0e28(0369): 2e 6c bc a0 '  mov r3, RI ' reg ARG ADDRG
0e2c(036a): 00 6e fc a0 '  mov r4, #0 ' reg ARG coni
0e30(036b): 0c 5e fc a0 '  mov BC, #12 ' arg size
0e34(036c): 0c 58 fc 84 '  sub SP, #12 ' stack space for reg ARGs
0e38(036d): 0b 00 7c 5c '  jmp #CALA
0e3c(036e): b8 04 00 00 '  long @C_bbos_port_send
0e40(036f): 0c 58 fc 80 '  add SP, #12 ' CALL addrg
0e44(0370):             ' C_h48c_24
0e44(0370): 23 00 7c 5c '  jmp #POPM
0e48(0371): 00 0c 02 00 '  long $20c00 ' restore registers
0e4c(0372): 04 58 fc 80 '  add SP, #4 ' framesize
0e50(0373): 0a 00 7c 5c '  jmp #RETF
0e54(0374):             '  long ' align long
0e54(0374):             ' C_post_clock_pulse ' <symbol:post_clock_pulse>
0e54(0374): 22 00 7c 5c '  jmp #PSHM
0e58(0375): 00 0c 02 00 '  long $20c00 ' save registers
0e5c(0376): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
0e60(0377): 00 5e fc a0 '  mov BC, #0 ' arg size
0e64(0378): 0b 00 7c 5c '  jmp #CALA
0e68(0379): 7c 1d 00 00 '  long @C__cnt ' CALL addrg
0e6c(037a): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
0e70(037b): 04 00 7c 5c '  jmp #LODA
0e74(037c): 34 3b 00 00 '  long @C_post_clock_pulse_L000003
0e78(037d): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
0e7c(037e): 3e 6a bc a0 '  mov r2, r11 ' ADDU
0e80(037f): 3d 6a bc 80 '  add r2, r10 ' ADDU (3)
0e84(0380): 04 5e fc a0 '  mov BC, #4 ' arg size
0e88(0381): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0e8c(0382): 0b 00 7c 5c '  jmp #CALA
0e90(0383): 50 39 00 00 '  long @C__waitcnt
0e94(0384): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0e98(0385): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
0e9c(0386): 44 7a bc a0 '  mov r10, r17 ' CVI, CVU or LOAD
0ea0(0387): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
0ea4(0388): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
0ea8(0389): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
0eac(038a): 08 5e fc a0 '  mov BC, #8 ' arg size
0eb0(038b): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0eb4(038c): 0b 00 7c 5c '  jmp #CALA
0eb8(038d): 30 36 00 00 '  long @C__outa
0ebc(038e): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0ec0(038f): 00 5e fc a0 '  mov BC, #0 ' arg size
0ec4(0390): 0b 00 7c 5c '  jmp #CALA
0ec8(0391): 7c 1d 00 00 '  long @C__cnt ' CALL addrg
0ecc(0392): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
0ed0(0393): 04 00 7c 5c '  jmp #LODA
0ed4(0394): 34 3b 00 00 '  long @C_post_clock_pulse_L000003
0ed8(0395): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
0edc(0396): 3e 6a bc a0 '  mov r2, r11 ' ADDU
0ee0(0397): 3d 6a bc 80 '  add r2, r10 ' ADDU (3)
0ee4(0398): 04 5e fc a0 '  mov BC, #4 ' arg size
0ee8(0399): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0eec(039a): 0b 00 7c 5c '  jmp #CALA
0ef0(039b): 50 39 00 00 '  long @C__waitcnt
0ef4(039c): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0ef8(039d): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
0efc(039e): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
0f00(039f): 44 7a bc a0 '  mov r10, r17 ' CVI, CVU or LOAD
0f04(03a0): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
0f08(03a1): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
0f0c(03a2): 08 5e fc a0 '  mov BC, #8 ' arg size
0f10(03a3): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0f14(03a4): 0b 00 7c 5c '  jmp #CALA
0f18(03a5): 30 36 00 00 '  long @C__outa
0f1c(03a6): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0f20(03a7): 23 00 7c 5c '  jmp #POPM
0f24(03a8): 00 0c 02 00 '  long $20c00 ' restore registers
0f28(03a9): 0c 00 7c 5c '  jmp #RETN
0f2c(03aa):             '  long ' align long
0f2c(03aa):             ' C_pre_clock_pulse ' <symbol:pre_clock_pulse>
0f2c(03aa): 22 00 7c 5c '  jmp #PSHM
0f30(03ab): 00 0c 02 00 '  long $20c00 ' save registers
0f34(03ac): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
0f38(03ad): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
0f3c(03ae): 44 7a bc a0 '  mov r10, r17 ' CVI, CVU or LOAD
0f40(03af): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
0f44(03b0): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
0f48(03b1): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
0f4c(03b2): 08 5e fc a0 '  mov BC, #8 ' arg size
0f50(03b3): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0f54(03b4): 0b 00 7c 5c '  jmp #CALA
0f58(03b5): 30 36 00 00 '  long @C__outa
0f5c(03b6): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0f60(03b7): 00 5e fc a0 '  mov BC, #0 ' arg size
0f64(03b8): 0b 00 7c 5c '  jmp #CALA
0f68(03b9): 7c 1d 00 00 '  long @C__cnt ' CALL addrg
0f6c(03ba): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
0f70(03bb): 04 00 7c 5c '  jmp #LODA
0f74(03bc): 34 3b 00 00 '  long @C_post_clock_pulse_L000003
0f78(03bd): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
0f7c(03be): 3e 6a bc a0 '  mov r2, r11 ' ADDU
0f80(03bf): 3d 6a bc 80 '  add r2, r10 ' ADDU (3)
0f84(03c0): 04 5e fc a0 '  mov BC, #4 ' arg size
0f88(03c1): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0f8c(03c2): 0b 00 7c 5c '  jmp #CALA
0f90(03c3): 50 39 00 00 '  long @C__waitcnt
0f94(03c4): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0f98(03c5): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
0f9c(03c6): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
0fa0(03c7): 44 7a bc a0 '  mov r10, r17 ' CVI, CVU or LOAD
0fa4(03c8): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
0fa8(03c9): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
0fac(03ca): 08 5e fc a0 '  mov BC, #8 ' arg size
0fb0(03cb): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
0fb4(03cc): 0b 00 7c 5c '  jmp #CALA
0fb8(03cd): 30 36 00 00 '  long @C__outa
0fbc(03ce): 08 58 fc 80 '  add SP, #8 ' CALL addrg
0fc0(03cf): 00 5e fc a0 '  mov BC, #0 ' arg size
0fc4(03d0): 0b 00 7c 5c '  jmp #CALA
0fc8(03d1): 7c 1d 00 00 '  long @C__cnt ' CALL addrg
0fcc(03d2): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
0fd0(03d3): 04 00 7c 5c '  jmp #LODA
0fd4(03d4): 34 3b 00 00 '  long @C_post_clock_pulse_L000003
0fd8(03d5): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
0fdc(03d6): 3e 6a bc a0 '  mov r2, r11 ' ADDU
0fe0(03d7): 3d 6a bc 80 '  add r2, r10 ' ADDU (3)
0fe4(03d8): 04 5e fc a0 '  mov BC, #4 ' arg size
0fe8(03d9): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
0fec(03da): 0b 00 7c 5c '  jmp #CALA
0ff0(03db): 50 39 00 00 '  long @C__waitcnt
0ff4(03dc): 04 58 fc 80 '  add SP, #4 ' CALL addrg
0ff8(03dd): 23 00 7c 5c '  jmp #POPM
0ffc(03de): 00 0c 02 00 '  long $20c00 ' restore registers
1000(03df): 0c 00 7c 5c '  jmp #RETN
1004(03e0):             '  long ' align long
1004(03e0):             ' C_stamp_shiftout ' <symbol:stamp_shiftout>
1004(03e0): 09 00 7c 5c '  jmp #NEWF
1008(03e1): 22 00 7c 5c '  jmp #PSHM
100c(03e2): 00 cc 03 00 '  long $3cc00 ' save registers
1010(03e3): 38 88 bc a0 '  mov r17, r5 ' reg var <- reg arg
1014(03e4): 37 86 bc a0 '  mov r16, r4 ' reg var <- reg arg
1018(03e5): 36 84 bc a0 '  mov r15, r3 ' reg var <- reg arg
101c(03e6): 35 82 bc a0 '  mov r14, r2 ' reg var <- reg arg
1020(03e7): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
1024(03e8): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
1028(03e9): 2d 7a bc a0 '  mov r10, FP
102c(03ea): 08 7a fc 80 '  add r10, #8 ' reg <- addrfi
1030(03eb): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRU4 reg
1034(03ec): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
1038(03ed): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
103c(03ee): 08 5e fc a0 '  mov BC, #8 ' arg size
1040(03ef): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1044(03f0): 0b 00 7c 5c '  jmp #CALA
1048(03f1): 30 36 00 00 '  long @C__outa
104c(03f2): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1050(03f3): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
1054(03f4): 2d 7a bc a0 '  mov r10, FP
1058(03f5): 08 7a fc 80 '  add r10, #8 ' reg <- addrfi
105c(03f6): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRU4 reg
1060(03f7): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
1064(03f8): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
1068(03f9): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
106c(03fa): 08 5e fc a0 '  mov BC, #8 ' arg size
1070(03fb): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1074(03fc): 0b 00 7c 5c '  jmp #CALA
1078(03fd): 84 1d 00 00 '  long @C__dira
107c(03fe): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1080(03ff): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
1084(0400): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
1088(0401): 44 7a bc a0 '  mov r10, r17 ' CVI, CVU or LOAD
108c(0402): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
1090(0403): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
1094(0404): 08 5e fc a0 '  mov BC, #8 ' arg size
1098(0405): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
109c(0406): 0b 00 7c 5c '  jmp #CALA
10a0(0407): 30 36 00 00 '  long @C__outa
10a4(0408): 08 58 fc 80 '  add SP, #8 ' CALL addrg
10a8(0409): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
10ac(040a): 44 7a bc a0 '  mov r10, r17 ' CVI, CVU or LOAD
10b0(040b): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
10b4(040c): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
10b8(040d): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
10bc(040e): 08 5e fc a0 '  mov BC, #8 ' arg size
10c0(040f): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
10c4(0410): 0b 00 7c 5c '  jmp #CALA
10c8(0411): 84 1d 00 00 '  long @C__dira
10cc(0412): 08 58 fc 80 '  add SP, #8 ' CALL addrg
10d0(0413): 05 86 7c 86 '  cmp r16,  #5 wz
10d4(0414): 14 00 7c 5c '  jmp #BRNZ
10d8(0415): 68 11 00 00 '  long @C_stamp_shiftout_8 ' NEU4
10dc(0416): 20 7c fc a0 '  mov r11, #32 ' reg <- coni
10e0(0417): 42 7c bc 84 '  sub r11, r15 ' SUBU (1)
10e4(0418): 3e 82 bc 2c '  shl r14, r11 ' LSHI/U (1)
10e8(0419): 0e 00 7c 5c '  jmp #JMPA
10ec(041a): 20 11 00 00 '  long @C_stamp_shiftout_11 ' JUMPV addrg
10f0(041b):             ' C_stamp_shiftout_10
10f0(041b): 41 7c bc a0 '  mov r11, r14
10f4(041c): 01 7c fc 2c '  shl r11, #1 ' LSHU4 coni
10f8(041d): 41 7a bc a0 '  mov r10, r14
10fc(041e): 1f 7a fc 28 '  shr r10, #31 ' RSHU4 coni
1100(041f): 3e 82 bc a0 '  mov r14, r11 ' BORI/U
1104(0420): 3d 82 bc 68 '  or r14, r10 ' BORI/U (3)
1108(0421): 41 7c bc a0 '  mov r11, r14
110c(0422): 01 7c fc 60 '  and r11, #1 ' BANDU4 coni
1110(0423): 00 7c 7c 86 '  cmp r11,  #0 wz
1114(0424): 13 00 7c 5c '  jmp #BR_Z
1118(0425): d8 10 00 00 '  long @C_stamp_shiftout_13 ' EQU4
111c(0426): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
1120(0427): 2d 7a bc a0 '  mov r10, FP
1124(0428): 08 7a fc 80 '  add r10, #8 ' reg <- addrfi
1128(0429): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRU4 reg
112c(042a): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
1130(042b): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
1134(042c): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
1138(042d): 08 5e fc a0 '  mov BC, #8 ' arg size
113c(042e): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1140(042f): 0b 00 7c 5c '  jmp #CALA
1144(0430): 30 36 00 00 '  long @C__outa
1148(0431): 08 58 fc 80 '  add SP, #8 ' CALL addrg
114c(0432): 0e 00 7c 5c '  jmp #JMPA
1150(0433): 08 11 00 00 '  long @C_stamp_shiftout_14 ' JUMPV addrg
1154(0434):             ' C_stamp_shiftout_13
1154(0434): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
1158(0435): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
115c(0436): 2d 7a bc a0 '  mov r10, FP
1160(0437): 08 7a fc 80 '  add r10, #8 ' reg <- addrfi
1164(0438): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRU4 reg
1168(0439): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
116c(043a): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
1170(043b): 08 5e fc a0 '  mov BC, #8 ' arg size
1174(043c): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1178(043d): 0b 00 7c 5c '  jmp #CALA
117c(043e): 30 36 00 00 '  long @C__outa
1180(043f): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1184(0440):             ' C_stamp_shiftout_14
1184(0440): 44 6a bc a0 '  mov r2, r17 ' CVI, CVU or LOAD
1188(0441): 04 5e fc a0 '  mov BC, #4 ' arg size
118c(0442): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
1190(0443): 0b 00 7c 5c '  jmp #CALA
1194(0444): d8 0d 00 00 '  long @C_post_clock_pulse
1198(0445): 04 58 fc 80 '  add SP, #4 ' CALL addrg
119c(0446):             ' C_stamp_shiftout_11
119c(0446): 42 7c bc a0 '  mov r11, r15 ' CVI, CVU or LOAD
11a0(0447): 3e 84 bc a0 '  mov r15, r11
11a4(0448): 01 84 fc 84 '  sub r15, #1 ' SUBU4 coni
11a8(0449): 00 7c 7c 86 '  cmp r11,  #0 wz
11ac(044a): 14 00 7c 5c '  jmp #BRNZ
11b0(044b): 74 10 00 00 '  long @C_stamp_shiftout_10 ' NEU4
11b4(044c): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
11b8(044d): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
11bc(044e): 2d 7a bc a0 '  mov r10, FP
11c0(044f): 08 7a fc 80 '  add r10, #8 ' reg <- addrfi
11c4(0450): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRU4 reg
11c8(0451): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
11cc(0452): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
11d0(0453): 08 5e fc a0 '  mov BC, #8 ' arg size
11d4(0454): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
11d8(0455): 0b 00 7c 5c '  jmp #CALA
11dc(0456): 30 36 00 00 '  long @C__outa
11e0(0457): 08 58 fc 80 '  add SP, #8 ' CALL addrg
11e4(0458):             ' C_stamp_shiftout_8
11e4(0458): 23 00 7c 5c '  jmp #POPM
11e8(0459): 00 cc 03 00 '  long $3cc00 ' restore registers
11ec(045a): 0a 00 7c 5c '  jmp #RETF
11f0(045b):             '  long ' align long
11f0(045b):             ' C_stamp_shiftin ' <symbol:stamp_shiftin>
11f0(045b): 22 00 7c 5c '  jmp #PSHM
11f4(045c): 00 fe 03 00 '  long $3fe00 ' save registers
11f8(045d): 38 88 bc a0 '  mov r17, r5 ' reg var <- reg arg
11fc(045e): 37 86 bc a0 '  mov r16, r4 ' reg var <- reg arg
1200(045f): 36 84 bc a0 '  mov r15, r3 ' reg var <- reg arg
1204(0460): 35 82 bc a0 '  mov r14, r2 ' reg var <- reg arg
1208(0461): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
120c(0462): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
1210(0463): 44 7a bc a0 '  mov r10, r17 ' CVI, CVU or LOAD
1214(0464): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
1218(0465): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
121c(0466): 08 5e fc a0 '  mov BC, #8 ' arg size
1220(0467): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1224(0468): 0b 00 7c 5c '  jmp #CALA
1228(0469): 84 1d 00 00 '  long @C__dira
122c(046a): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1230(046b): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
1234(046c): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
1238(046d): 43 7a bc a0 '  mov r10, r16 ' CVI, CVU or LOAD
123c(046e): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
1240(046f): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
1244(0470): 08 5e fc a0 '  mov BC, #8 ' arg size
1248(0471): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
124c(0472): 0b 00 7c 5c '  jmp #CALA
1250(0473): 30 36 00 00 '  long @C__outa
1254(0474): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1258(0475): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
125c(0476): 43 7a bc a0 '  mov r10, r16 ' CVI, CVU or LOAD
1260(0477): 3d 7c bc 2c '  shl r11, r10 ' LSHI/U (1)
1264(0478): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
1268(0479): 3e 6c bc a0 '  mov r3, r11 ' CVI, CVU or LOAD
126c(047a): 08 5e fc a0 '  mov BC, #8 ' arg size
1270(047b): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1274(047c): 0b 00 7c 5c '  jmp #CALA
1278(047d): 84 1d 00 00 '  long @C__dira
127c(047e): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1280(047f): 00 80 fc a0 '  mov r13, #0 ' reg <- coni
1284(0480): 02 84 7c 86 '  cmp r15,  #2 wz
1288(0481): 14 00 7c 5c '  jmp #BRNZ
128c(0482): 9c 12 00 00 '  long @C_stamp_shiftin_16 ' NEU4
1290(0483): 0e 00 7c 5c '  jmp #JMPA
1294(0484): 84 12 00 00 '  long @C_stamp_shiftin_19 ' JUMPV addrg
1298(0485):             ' C_stamp_shiftin_18
1298(0485): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
129c(0486): 04 5e fc a0 '  mov BC, #4 ' arg size
12a0(0487): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
12a4(0488): 0b 00 7c 5c '  jmp #CALA
12a8(0489): b0 0e 00 00 '  long @C_pre_clock_pulse
12ac(048a): 04 58 fc 80 '  add SP, #4 ' CALL addrg
12b0(048b): 00 5e fc a0 '  mov BC, #0 ' arg size
12b4(048c): 0b 00 7c 5c '  jmp #CALA
12b8(048d): 28 36 00 00 '  long @C__ina ' CALL addrg
12bc(048e): 01 7a fc a0 '  mov r10, #1 ' reg <- coni
12c0(048f): 44 78 bc a0 '  mov r9, r17 ' CVI, CVU or LOAD
12c4(0490): 3c 7a bc 2c '  shl r10, r9 ' LSHI/U (1)
12c8(0491): 33 7c bc a0 '  mov r11, r0 ' BANDI/U
12cc(0492): 3d 7c bc 60 '  and r11, r10 ' BANDI/U (3)
12d0(0493): 00 7c 7c 86 '  cmp r11,  #0 wz
12d4(0494): 13 00 7c 5c '  jmp #BR_Z
12d8(0495): 6c 12 00 00 '  long @C_stamp_shiftin_22 ' EQU4
12dc(0496): 01 7e fc a0 '  mov r12, #1 ' reg <- coni
12e0(0497): 0e 00 7c 5c '  jmp #JMPA
12e4(0498): 70 12 00 00 '  long @C_stamp_shiftin_23 ' JUMPV addrg
12e8(0499):             ' C_stamp_shiftin_22
12e8(0499): 00 7e fc a0 '  mov r12, #0 ' reg <- coni
12ec(049a):             ' C_stamp_shiftin_23
12ec(049a): 40 7c bc a0 '  mov r11, r13
12f0(049b): 01 7c fc 2c '  shl r11, #1 ' LSHU4 coni
12f4(049c): 3f 7a bc a0 '  mov r10, r12 ' CVI, CVU or LOAD
12f8(049d): 3e 80 bc a0 '  mov r13, r11 ' BORI/U
12fc(049e): 3d 80 bc 68 '  or r13, r10 ' BORI/U (3)
1300(049f):             ' C_stamp_shiftin_19
1300(049f): 41 7c bc a0 '  mov r11, r14 ' CVI, CVU or LOAD
1304(04a0): 3e 82 bc a0 '  mov r14, r11
1308(04a1): 01 82 fc 84 '  sub r14, #1 ' SUBU4 coni
130c(04a2): 00 7c 7c 86 '  cmp r11,  #0 wz
1310(04a3): 14 00 7c 5c '  jmp #BRNZ
1314(04a4): 1c 12 00 00 '  long @C_stamp_shiftin_18 ' NEU4
1318(04a5):             ' C_stamp_shiftin_16
1318(04a5): 40 66 bc a0 '  mov r0, r13 ' CVI, CVU or LOAD
131c(04a6): 23 00 7c 5c '  jmp #POPM
1320(04a7): 00 fe 03 00 '  long $3fe00 ' restore registers
1324(04a8): 0c 00 7c 5c '  jmp #RETN
1328(04a9):             '  long ' align long
1328(04a9):             ' C_bbos_sched_myself ' <symbol:bbos_sched_myself>
1328(04a9): 22 00 7c 5c '  jmp #PSHM
132c(04aa): 00 08 00 00 '  long $800 ' save registers
1330(04ab): 04 00 7c 5c '  jmp #LODA
1334(04ac): 28 3d 00 00 '  long @C_tmpfilegkyVRO_4d65929a_myself_L000002
1338(04ad): 2e 7c bc 00 '  rdbyte r11, RI ' reg <- INDIRU1 addrg
133c(04ae): 3e 66 bc a0 '  mov r0, r11 ' CVUI
1340(04af): 4d 66 bc 60 '  and r0, cviu_m1 ' zero extend
1344(04b0): 23 00 7c 5c '  jmp #POPM
1348(04b1): 00 08 00 00 '  long $800 ' restore registers
134c(04b2): 0c 00 7c 5c '  jmp #RETN
1350(04b3):             '  long ' align long
1350(04b3):             ' C_bbos_sched_enqueue ' <symbol:bbos_sched_enqueue>
1350(04b3): 22 00 7c 5c '  jmp #PSHM
1354(04b4): 00 0e 02 00 '  long $20e00 ' save registers
1358(04b5): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
135c(04b6): 44 7c bc a0 '  mov r11, r17 ' CVUI
1360(04b7): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1364(04b8): 03 7c 7c c3 '  cmps r11,  #3 wz,wc
1368(04b9): 16 00 7c 5c '  jmp #BR_A
136c(04ba): fc 12 00 00 '  long @C_bbos_sched_enqueue_8 ' GTI4
1370(04bb): 0e 00 7c 5c '  jmp #JMPA
1374(04bc): 1c 13 00 00 '  long @C_bbos_sched_enqueue_9 ' JUMPV addrg
1378(04bd):             ' C_bbos_sched_enqueue_8
1378(04bd): 04 00 7c 5c '  jmp #LODA
137c(04be): a0 3b 00 00 '  long @C_bbos_sched_enqueue_6_L000007
1380(04bf): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
1384(04c0): 04 5e fc a0 '  mov BC, #4 ' arg size
1388(04c1): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
138c(04c2): 0b 00 7c 5c '  jmp #CALA
1390(04c3): 18 1b 00 00 '  long @C___bad_assertion
1394(04c4): 04 58 fc 80 '  add SP, #4 ' CALL addrg
1398(04c5):             ' C_bbos_sched_enqueue_9
1398(04c5): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
139c(04c6): 44 7a bc a0 '  mov r10, r17 ' CVUI
13a0(04c7): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
13a4(04c8): 01 7a fc 2c '  shl r10, #1 ' LSHI4 coni
13a8(04c9): 04 00 7c 5c '  jmp #LODA
13ac(04ca): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
13b0(04cb): 2e 78 bc a0 '  mov r9, RI ' reg <- addrg
13b4(04cc): 3c 7a bc d0 '  adds r10, r9 ' ADDI/P (1)
13b8(04cd): 3d 7a bc 00 '  rdbyte r10, r10 ' reg <- INDIRU1 reg
13bc(04ce): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
13c0(04cf): 3e 7a 3c c2 '  cmps r10, r11 wz
13c4(04d0): 13 00 7c 5c '  jmp #BR_Z
13c8(04d1): 5c 13 00 00 '  long @C_bbos_sched_enqueue_10 ' EQI4
13cc(04d2): 01 66 fc a0 '  mov r0, #1 ' RET coni
13d0(04d3): 0e 00 7c 5c '  jmp #JMPA
13d4(04d4): 1c 14 00 00 '  long @C_bbos_sched_enqueue_5 ' JUMPV addrg
13d8(04d5):             ' C_bbos_sched_enqueue_10
13d8(04d5): 04 00 7c 5c '  jmp #LODA
13dc(04d6): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
13e0(04d7): 2e 7c bc 00 '  rdbyte r11, RI ' reg <- INDIRU1 addrg
13e4(04d8): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
13e8(04d9): 01 7c 7c c2 '  cmps r11,  #1 wz
13ec(04da): 14 00 7c 5c '  jmp #BRNZ
13f0(04db): 8c 13 00 00 '  long @C_bbos_sched_enqueue_12 ' NEI4
13f4(04dc): 04 00 7c 5c '  jmp #LODA
13f8(04dd): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
13fc(04de): 2e 88 3c 00 '  wrbyte r17, RI ' ASGNU1 addrg
1400(04df): 0e 00 7c 5c '  jmp #JMPA
1404(04e0): b4 13 00 00 '  long @C_bbos_sched_enqueue_13 ' JUMPV addrg
1408(04e1):             ' C_bbos_sched_enqueue_12
1408(04e1): 04 00 7c 5c '  jmp #LODA
140c(04e2): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
1410(04e3): 2e 7c bc 00 '  rdbyte r11, RI ' reg <- INDIRU1 addrg
1414(04e4): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1418(04e5): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
141c(04e6): 04 00 7c 5c '  jmp #LODA
1420(04e7): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
1424(04e8): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1428(04e9): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
142c(04ea): 3e 88 3c 00 '  wrbyte r17, r11 ' ASGNU1 reg
1430(04eb):             ' C_bbos_sched_enqueue_13
1430(04eb): 44 7c bc a0 '  mov r11, r17 ' CVUI
1434(04ec): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1438(04ed): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
143c(04ee): 04 00 7c 5c '  jmp #LODA
1440(04ef): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
1444(04f0): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1448(04f1): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
144c(04f2): 04 00 7c 5c '  jmp #LODA
1450(04f3): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
1454(04f4): 2e 7a bc 00 '  rdbyte r10, RI ' reg <- INDIRU1 addrg
1458(04f5): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
145c(04f6): 44 7c bc a0 '  mov r11, r17 ' CVUI
1460(04f7): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1464(04f8): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
1468(04f9): 04 00 7c 5c '  jmp #LODA
146c(04fa): 75 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+1
1470(04fb): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1474(04fc): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
1478(04fd): 04 00 7c 5c '  jmp #LODA
147c(04fe): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
1480(04ff): 2e 7a bc 00 '  rdbyte r10, RI ' reg <- INDIRU1 addrg
1484(0500): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
1488(0501): 04 00 7c 5c '  jmp #LODA
148c(0502): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
1490(0503): 2e 88 3c 00 '  wrbyte r17, RI ' ASGNU1 addrg
1494(0504): 00 66 fc a0 '  mov r0, #0 ' RET coni
1498(0505):             ' C_bbos_sched_enqueue_5
1498(0505): 23 00 7c 5c '  jmp #POPM
149c(0506): 00 0e 02 00 '  long $20e00 ' restore registers
14a0(0507): 0c 00 7c 5c '  jmp #RETN
14a4(0508):             '  long ' align long
14a4(0508):             ' C_bbos_sched_dequeue ' <symbol:bbos_sched_dequeue>
14a4(0508): 22 00 7c 5c '  jmp #PSHM
14a8(0509): 00 0e 02 00 '  long $20e00 ' save registers
14ac(050a): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
14b0(050b): 44 7c bc a0 '  mov r11, r17 ' CVUI
14b4(050c): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
14b8(050d): 03 7c 7c c3 '  cmps r11,  #3 wz,wc
14bc(050e): 16 00 7c 5c '  jmp #BR_A
14c0(050f): 50 14 00 00 '  long @C_bbos_sched_dequeue_27 ' GTI4
14c4(0510): 0e 00 7c 5c '  jmp #JMPA
14c8(0511): 70 14 00 00 '  long @C_bbos_sched_dequeue_28 ' JUMPV addrg
14cc(0512):             ' C_bbos_sched_dequeue_27
14cc(0512): 04 00 7c 5c '  jmp #LODA
14d0(0513): 38 3b 00 00 '  long @C_bbos_sched_dequeue_25_L000026
14d4(0514): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
14d8(0515): 04 5e fc a0 '  mov BC, #4 ' arg size
14dc(0516): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
14e0(0517): 0b 00 7c 5c '  jmp #CALA
14e4(0518): 18 1b 00 00 '  long @C___bad_assertion
14e8(0519): 04 58 fc 80 '  add SP, #4 ' CALL addrg
14ec(051a):             ' C_bbos_sched_dequeue_28
14ec(051a): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
14f0(051b): 44 7a bc a0 '  mov r10, r17 ' CVUI
14f4(051c): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
14f8(051d): 01 7a fc 2c '  shl r10, #1 ' LSHI4 coni
14fc(051e): 04 00 7c 5c '  jmp #LODA
1500(051f): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
1504(0520): 2e 78 bc a0 '  mov r9, RI ' reg <- addrg
1508(0521): 3c 7a bc d0 '  adds r10, r9 ' ADDI/P (1)
150c(0522): 3d 7a bc 00 '  rdbyte r10, r10 ' reg <- INDIRU1 reg
1510(0523): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
1514(0524): 3e 7a 3c c2 '  cmps r10, r11 wz
1518(0525): 14 00 7c 5c '  jmp #BRNZ
151c(0526): b0 14 00 00 '  long @C_bbos_sched_dequeue_29 ' NEI4
1520(0527): 01 66 fc a0 '  mov r0, #1 ' RET coni
1524(0528): 0e 00 7c 5c '  jmp #JMPA
1528(0529): 58 17 00 00 '  long @C_bbos_sched_dequeue_24 ' JUMPV addrg
152c(052a):             ' C_bbos_sched_dequeue_29
152c(052a): 44 7c bc a0 '  mov r11, r17 ' CVUI
1530(052b): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1534(052c): 04 00 7c 5c '  jmp #LODA
1538(052d): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
153c(052e): 2e 7a bc 00 '  rdbyte r10, RI ' reg <- INDIRU1 addrg
1540(052f): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
1544(0530): 3e 7a bc d4 '  subs r10, r11 ' SUBI/P (1)
1548(0531): 04 00 7c 5c '  jmp #LODA
154c(0532): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
1550(0533): 2e 78 bc 00 '  rdbyte r9, RI ' reg <- INDIRU1 addrg
1554(0534): 4d 78 bc 60 '  and r9, cviu_m1 ' zero extend
1558(0535): 3c 7c bc d4 '  subs r11, r9 ' SUBI/P (1)
155c(0536): 3d 7c bc 68 '  or r11, r10 ' BORI/U (2)
1560(0537): 00 7c 7c c2 '  cmps r11,  #0 wz
1564(0538): 14 00 7c 5c '  jmp #BRNZ
1568(0539): 18 15 00 00 '  long @C_bbos_sched_dequeue_31 ' NEI4
156c(053a): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
1570(053b): 04 00 7c 5c '  jmp #LODA
1574(053c): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
1578(053d): 2e 7c 3c 00 '  wrbyte r11, RI ' ASGNU1 addrg
157c(053e): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
1580(053f): 04 00 7c 5c '  jmp #LODA
1584(0540): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
1588(0541): 2e 7c 3c 00 '  wrbyte r11, RI ' ASGNU1 addrg
158c(0542): 0e 00 7c 5c '  jmp #JMPA
1590(0543): c4 16 00 00 '  long @C_bbos_sched_dequeue_32 ' JUMPV addrg
1594(0544):             ' C_bbos_sched_dequeue_31
1594(0544): 04 00 7c 5c '  jmp #LODA
1598(0545): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
159c(0546): 2e 7c bc 00 '  rdbyte r11, RI ' reg <- INDIRU1 addrg
15a0(0547): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
15a4(0548): 44 7a bc a0 '  mov r10, r17 ' CVUI
15a8(0549): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
15ac(054a): 3d 7c 3c c2 '  cmps r11, r10 wz
15b0(054b): 14 00 7c 5c '  jmp #BRNZ
15b4(054c): a4 15 00 00 '  long @C_bbos_sched_dequeue_39 ' NEI4
15b8(054d): 44 7c bc a0 '  mov r11, r17 ' CVUI
15bc(054e): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
15c0(054f): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
15c4(0550): 04 00 7c 5c '  jmp #LODA
15c8(0551): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
15cc(0552): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
15d0(0553): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
15d4(0554): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
15d8(0555): 04 00 7c 5c '  jmp #LODA
15dc(0556): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
15e0(0557): 2e 7c 3c 00 '  wrbyte r11, RI ' ASGNU1 addrg
15e4(0558): 04 00 7c 5c '  jmp #LODA
15e8(0559): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
15ec(055a): 2e 7c bc 00 '  rdbyte r11, RI ' reg <- INDIRU1 addrg
15f0(055b): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
15f4(055c): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
15f8(055d): 04 00 7c 5c '  jmp #LODA
15fc(055e): 75 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+1
1600(055f): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1604(0560): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
1608(0561): 04 00 7c 5c '  jmp #LODA
160c(0562): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
1610(0563): 2e 7a bc 00 '  rdbyte r10, RI ' reg <- INDIRU1 addrg
1614(0564): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
1618(0565): 0e 00 7c 5c '  jmp #JMPA
161c(0566): c4 16 00 00 '  long @C_bbos_sched_dequeue_40 ' JUMPV addrg
1620(0567):             ' C_bbos_sched_dequeue_39
1620(0567): 04 00 7c 5c '  jmp #LODA
1624(0568): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
1628(0569): 2e 7c bc 00 '  rdbyte r11, RI ' reg <- INDIRU1 addrg
162c(056a): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1630(056b): 44 7a bc a0 '  mov r10, r17 ' CVUI
1634(056c): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
1638(056d): 3d 7c 3c c2 '  cmps r11, r10 wz
163c(056e): 14 00 7c 5c '  jmp #BRNZ
1640(056f): 30 16 00 00 '  long @C_bbos_sched_dequeue_47 ' NEI4
1644(0570): 44 7c bc a0 '  mov r11, r17 ' CVUI
1648(0571): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
164c(0572): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
1650(0573): 04 00 7c 5c '  jmp #LODA
1654(0574): 75 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+1
1658(0575): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
165c(0576): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
1660(0577): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
1664(0578): 04 00 7c 5c '  jmp #LODA
1668(0579): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
166c(057a): 2e 7c 3c 00 '  wrbyte r11, RI ' ASGNU1 addrg
1670(057b): 04 00 7c 5c '  jmp #LODA
1674(057c): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
1678(057d): 2e 7c bc 00 '  rdbyte r11, RI ' reg <- INDIRU1 addrg
167c(057e): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1680(057f): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
1684(0580): 04 00 7c 5c '  jmp #LODA
1688(0581): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
168c(0582): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1690(0583): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
1694(0584): 04 00 7c 5c '  jmp #LODA
1698(0585): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
169c(0586): 2e 7a bc 00 '  rdbyte r10, RI ' reg <- INDIRU1 addrg
16a0(0587): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
16a4(0588): 0e 00 7c 5c '  jmp #JMPA
16a8(0589): c4 16 00 00 '  long @C_bbos_sched_dequeue_48 ' JUMPV addrg
16ac(058a):             ' C_bbos_sched_dequeue_47
16ac(058a): 44 7c bc a0 '  mov r11, r17 ' CVUI
16b0(058b): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
16b4(058c): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
16b8(058d): 04 00 7c 5c '  jmp #LODA
16bc(058e): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
16c0(058f): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
16c4(0590): 04 00 7c 5c '  jmp #LODA
16c8(0591): 75 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+1
16cc(0592): 2e 78 bc a0 '  mov r9, RI ' reg <- addrg
16d0(0593): 3e 78 bc d0 '  adds r9, r11 ' ADDI/P (2)
16d4(0594): 3c 78 bc 00 '  rdbyte r9, r9 ' reg <- INDIRU1 reg
16d8(0595): 4d 78 bc 60 '  and r9, cviu_m1 ' zero extend
16dc(0596): 01 78 fc 2c '  shl r9, #1 ' LSHI4 coni
16e0(0597): 3d 78 bc d0 '  adds r9, r10 ' ADDI/P (1)
16e4(0598): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
16e8(0599): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
16ec(059a): 3c 7c 3c 00 '  wrbyte r11, r9 ' ASGNU1 reg
16f0(059b): 44 7c bc a0 '  mov r11, r17 ' CVUI
16f4(059c): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
16f8(059d): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
16fc(059e): 04 00 7c 5c '  jmp #LODA
1700(059f): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
1704(05a0): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1708(05a1): 3e 7a bc d0 '  adds r10, r11 ' ADDI/P (2)
170c(05a2): 3d 7a bc 00 '  rdbyte r10, r10 ' reg <- INDIRU1 reg
1710(05a3): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
1714(05a4): 01 7a fc 2c '  shl r10, #1 ' LSHI4 coni
1718(05a5): 04 00 7c 5c '  jmp #LODA
171c(05a6): 75 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+1
1720(05a7): 2e 78 bc a0 '  mov r9, RI ' reg <- addrg
1724(05a8): 3c 7a bc d0 '  adds r10, r9 ' ADDI/P (1)
1728(05a9): 04 00 7c 5c '  jmp #LODA
172c(05aa): 75 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+1
1730(05ab): 2e 78 bc a0 '  mov r9, RI ' reg <- addrg
1734(05ac): 3c 7c bc d0 '  adds r11, r9 ' ADDI/P (1)
1738(05ad): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
173c(05ae): 3d 7c 3c 00 '  wrbyte r11, r10 ' ASGNU1 reg
1740(05af):             ' C_bbos_sched_dequeue_48
1740(05af):             ' C_bbos_sched_dequeue_40
1740(05af):             ' C_bbos_sched_dequeue_32
1740(05af): 44 7c bc a0 '  mov r11, r17 ' CVUI
1744(05b0): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1748(05b1): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
174c(05b2): 04 00 7c 5c '  jmp #LODA
1750(05b3): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
1754(05b4): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1758(05b5): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
175c(05b6): 01 7a fc a0 '  mov r10, #1 ' reg <- coni
1760(05b7): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
1764(05b8): 44 7c bc a0 '  mov r11, r17 ' CVUI
1768(05b9): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
176c(05ba): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
1770(05bb): 04 00 7c 5c '  jmp #LODA
1774(05bc): 75 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+1
1778(05bd): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
177c(05be): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
1780(05bf): 01 7a fc a0 '  mov r10, #1 ' reg <- coni
1784(05c0): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
1788(05c1): 04 00 7c 5c '  jmp #LODA
178c(05c2): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
1790(05c3): 2e 7c bc 00 '  rdbyte r11, RI ' reg <- INDIRU1 addrg
1794(05c4): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1798(05c5): 01 7c fc d4 '  subs r11, #1 ' SUBI4 coni
179c(05c6): 04 00 7c 5c '  jmp #LODA
17a0(05c7): 77 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2+1
17a4(05c8): 2e 7a bc 00 '  rdbyte r10, RI ' reg <- INDIRU1 addrg
17a8(05c9): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
17ac(05ca): 01 7a fc d4 '  subs r10, #1 ' SUBI4 coni
17b0(05cb): 3d 7c bc 68 '  or r11, r10 ' BORI/U (1)
17b4(05cc): 00 7c 7c c2 '  cmps r11,  #0 wz
17b8(05cd): 14 00 7c 5c '  jmp #BRNZ
17bc(05ce): 54 17 00 00 '  long @C_bbos_sched_dequeue_61 ' NEI4
17c0(05cf): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
17c4(05d0): 04 00 7c 5c '  jmp #LODA
17c8(05d1): 76 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+2
17cc(05d2): 2e 7c 3c 00 '  wrbyte r11, RI ' ASGNU1 addrg
17d0(05d3):             ' C_bbos_sched_dequeue_61
17d0(05d3): 00 66 fc a0 '  mov r0, #0 ' RET coni
17d4(05d4):             ' C_bbos_sched_dequeue_24
17d4(05d4): 23 00 7c 5c '  jmp #POPM
17d8(05d5): 00 0e 02 00 '  long $20e00 ' restore registers
17dc(05d6): 0c 00 7c 5c '  jmp #RETN
17e0(05d7):             '  long ' align long
17e0(05d7):             ' C_bbos_sched_init ' <symbol:bbos_sched_init>
17e0(05d7): 22 00 7c 5c '  jmp #PSHM
17e4(05d8): 00 0c 02 00 '  long $20c00 ' save registers
17e8(05d9): 00 88 fc a0 '  mov r17, #0 ' reg <- coni
17ec(05da): 0e 00 7c 5c '  jmp #JMPA
17f0(05db): d0 17 00 00 '  long @C_bbos_sched_init_71 ' JUMPV addrg
17f4(05dc):             ' C_bbos_sched_init_68
17f4(05dc): 44 7c bc a0 '  mov r11, r17 ' CVUI
17f8(05dd): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
17fc(05de): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
1800(05df): 04 00 7c 5c '  jmp #LODA
1804(05e0): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
1808(05e1): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
180c(05e2): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
1810(05e3): 01 7a fc a0 '  mov r10, #1 ' reg <- coni
1814(05e4): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
1818(05e5): 44 7c bc a0 '  mov r11, r17 ' CVUI
181c(05e6): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1820(05e7): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
1824(05e8): 04 00 7c 5c '  jmp #LODA
1828(05e9): 75 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004+1
182c(05ea): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1830(05eb): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
1834(05ec): 01 7a fc a0 '  mov r10, #1 ' reg <- coni
1838(05ed): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
183c(05ee): 44 7c bc a0 '  mov r11, r17 ' CVUI
1840(05ef): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1844(05f0): 01 7c fc d0 '  adds r11, #1 ' ADDI4 coni
1848(05f1): 3e 88 bc a0 '  mov r17, r11 ' CVI, CVU or LOAD
184c(05f2):             ' C_bbos_sched_init_71
184c(05f2): 44 7c bc a0 '  mov r11, r17 ' CVUI
1850(05f3): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1854(05f4): 03 7c 7c c3 '  cmps r11,  #3 wz,wc
1858(05f5): 18 00 7c 5c '  jmp #BR_B
185c(05f6): 78 17 00 00 '  long @C_bbos_sched_init_68 ' LTI4
1860(05f7): 23 00 7c 5c '  jmp #POPM
1864(05f8): 00 0c 02 00 '  long $20c00 ' restore registers
1868(05f9): 0c 00 7c 5c '  jmp #RETN
186c(05fa):             '  long ' align long
186c(05fa):             ' C_bbos_sched_move ' <symbol:bbos_sched_move>
186c(05fa): 22 00 7c 5c '  jmp #PSHM
1870(05fb): 00 0c 00 00 '  long $c00 ' save registers
1874(05fc): 00 5e fc a0 '  mov BC, #0 ' arg size
1878(05fd): 0b 00 7c 5c '  jmp #CALA
187c(05fe): ac 12 00 00 '  long @C_bbos_sched_myself ' CALL addrg
1880(05ff): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
1884(0600): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1888(0601): 01 7c fc 2c '  shl r11, #1 ' LSHI4 coni
188c(0602): 04 00 7c 5c '  jmp #LODA
1890(0603): 74 3e 00 00 '  long @C_tmpfileU6gSrO_4d65929a_schedule_L000004
1894(0604): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1898(0605): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
189c(0606): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
18a0(0607): 04 00 7c 5c '  jmp #LODA
18a4(0608): 28 3d 00 00 '  long @C_tmpfilegkyVRO_4d65929a_myself_L000002
18a8(0609): 2e 7c 3c 00 '  wrbyte r11, RI ' ASGNU1 addrg
18ac(060a): 23 00 7c 5c '  jmp #POPM
18b0(060b): 00 0c 00 00 '  long $c00 ' restore registers
18b4(060c): 0c 00 7c 5c '  jmp #RETN
18b8(060d):             '  long ' align long
18b8(060d):             ' C_demo ' <symbol:demo>
18b8(060d): 22 00 7c 5c '  jmp #PSHM
18bc(060e): 00 08 02 00 '  long $20800 ' save registers
18c0(060f): 04 00 7c 5c '  jmp #LODA
18c4(0610): 7c 3e 00 00 '  long @C_demo_message_L000007
18c8(0611): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
18cc(0612): 00 6c fc a0 '  mov r3, #0 ' reg ARG coni
18d0(0613): 08 5e fc a0 '  mov BC, #8 ' arg size
18d4(0614): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
18d8(0615): 0b 00 7c 5c '  jmp #CALA
18dc(0616): 24 06 00 00 '  long @C_bbos_port_receive
18e0(0617): 08 58 fc 80 '  add SP, #8 ' CALL addrg
18e4(0618): 00 66 7c c2 '  cmps r0,  #0 wz
18e8(0619): 14 00 7c 5c '  jmp #BRNZ
18ec(061a): 3c 19 00 00 '  long @C_demo_8 ' NEI4
18f0(061b): 04 00 7c 5c '  jmp #LODA
18f4(061c): 7c 3e 00 00 '  long @C_demo_message_L000007
18f8(061d): 2e 88 bc 08 '  rdlong r17, RI ' reg <- INDIRI4 addrg
18fc(061e): 04 88 7c c2 '  cmps r17,  #4 wz
1900(061f): 13 00 7c 5c '  jmp #BR_Z
1904(0620): a0 18 00 00 '  long @C_demo_13 ' EQI4
1908(0621): 06 88 7c c2 '  cmps r17,  #6 wz
190c(0622): 13 00 7c 5c '  jmp #BR_Z
1910(0623): d8 18 00 00 '  long @C_demo_16 ' EQI4
1914(0624): 0e 00 7c 5c '  jmp #JMPA
1918(0625): 1c 19 00 00 '  long @C_demo_10 ' JUMPV addrg
191c(0626):             ' C_demo_13
191c(0626): 04 00 7c 5c '  jmp #LODA
1920(0627): 84 3c 00 00 '  long @C_demo_14_L000015
1924(0628): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
1928(0629): 04 5e fc a0 '  mov BC, #4 ' arg size
192c(062a): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
1930(062b): 0b 00 7c 5c '  jmp #CALA
1934(062c): 40 36 00 00 '  long @C_printf
1938(062d): 04 58 fc 80 '  add SP, #4 ' CALL addrg
193c(062e): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
1940(062f): 04 00 7c 5c '  jmp #LODA
1944(0630): 3c 3d 00 00 '  long @C_tmpfilemS7aMO_4d65929a_init_complete_L000003
1948(0631): 2e 7c 3c 00 '  wrbyte r11, RI ' ASGNU1 addrg
194c(0632): 0e 00 7c 5c '  jmp #JMPA
1950(0633): 3c 19 00 00 '  long @C_demo_11 ' JUMPV addrg
1954(0634):             ' C_demo_16
1954(0634): 04 00 7c 5c '  jmp #LODA
1958(0635): 84 3e 00 00 '  long @C_demo_message_L000007+8
195c(0636): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRP4 addrg
1960(0637): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
1964(0638): 01 7c 7c c2 '  cmps r11,  #1 wz
1968(0639): 14 00 7c 5c '  jmp #BRNZ
196c(063a): 3c 19 00 00 '  long @C_demo_11 ' NEI4
1970(063b): 04 00 7c 5c '  jmp #LODA
1974(063c): 6c 3c 00 00 '  long @C_demo_20_L000021
1978(063d): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
197c(063e): 04 5e fc a0 '  mov BC, #4 ' arg size
1980(063f): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
1984(0640): 0b 00 7c 5c '  jmp #CALA
1988(0641): 40 36 00 00 '  long @C_printf
198c(0642): 04 58 fc 80 '  add SP, #4 ' CALL addrg
1990(0643): 0e 00 7c 5c '  jmp #JMPA
1994(0644): 3c 19 00 00 '  long @C_demo_11 ' JUMPV addrg
1998(0645):             ' C_demo_10
1998(0645): 04 00 7c 5c '  jmp #LODA
199c(0646): 5c 3c 00 00 '  long @C_demo_22_L000023
19a0(0647): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
19a4(0648): 04 5e fc a0 '  mov BC, #4 ' arg size
19a8(0649): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
19ac(064a): 0b 00 7c 5c '  jmp #CALA
19b0(064b): a4 01 00 00 '  long @C_bbos_panic
19b4(064c): 04 58 fc 80 '  add SP, #4 ' CALL addrg
19b8(064d):             ' C_demo_11
19b8(064d):             ' C_demo_8
19b8(064d): 04 00 7c 5c '  jmp #LODA
19bc(064e): 3c 3d 00 00 '  long @C_tmpfilemS7aMO_4d65929a_init_complete_L000003
19c0(064f): 2e 7c bc 00 '  rdbyte r11, RI ' reg <- INDIRU1 addrg
19c4(0650): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
19c8(0651): 00 7c 7c c2 '  cmps r11,  #0 wz
19cc(0652): 14 00 7c 5c '  jmp #BRNZ
19d0(0653): d0 19 00 00 '  long @C_demo_24 ' NEI4
19d4(0654): 04 00 7c 5c '  jmp #LODA
19d8(0655): 30 3c 00 00 '  long @C_demo_26_L000027
19dc(0656): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
19e0(0657): 04 5e fc a0 '  mov BC, #4 ' arg size
19e4(0658): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
19e8(0659): 0b 00 7c 5c '  jmp #CALA
19ec(065a): 40 36 00 00 '  long @C_printf
19f0(065b): 04 58 fc 80 '  add SP, #4 ' CALL addrg
19f4(065c): 04 7c fc a0 '  mov r11, #4 ' reg <- coni
19f8(065d): 04 00 7c 5c '  jmp #LODA
19fc(065e): 7c 3e 00 00 '  long @C_demo_message_L000007
1a00(065f): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrg
1a04(0660): 04 00 7c 5c '  jmp #LODA
1a08(0661): 2c 3d 00 00 '  long @C_tmpfile33DobP_4d65929a_demo_pins_L000002
1a0c(0662): 2e 7c bc a0 '  mov r11, RI ' reg <- addrg
1a10(0663): 04 00 7c 5c '  jmp #LODA
1a14(0664): 84 3e 00 00 '  long @C_demo_message_L000007+8
1a18(0665): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrg
1a1c(0666): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
1a20(0667): 04 00 7c 5c '  jmp #LODA
1a24(0668): 7c 3e 00 00 '  long @C_demo_message_L000007
1a28(0669): 2e 6c bc a0 '  mov r3, RI ' reg ARG ADDRG
1a2c(066a): 02 6e fc a0 '  mov r4, #2 ' reg ARG coni
1a30(066b): 0c 5e fc a0 '  mov BC, #12 ' arg size
1a34(066c): 0c 58 fc 84 '  sub SP, #12 ' stack space for reg ARGs
1a38(066d): 0b 00 7c 5c '  jmp #CALA
1a3c(066e): b8 04 00 00 '  long @C_bbos_port_send
1a40(066f): 0c 58 fc 80 '  add SP, #12 ' CALL addrg
1a44(0670): 0e 00 7c 5c '  jmp #JMPA
1a48(0671): 20 1a 00 00 '  long @C_demo_5 ' JUMPV addrg
1a4c(0672):             ' C_demo_24
1a4c(0672): 06 7c fc a0 '  mov r11, #6 ' reg <- coni
1a50(0673): 04 00 7c 5c '  jmp #LODA
1a54(0674): 7c 3e 00 00 '  long @C_demo_message_L000007
1a58(0675): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrg
1a5c(0676): 04 00 7c 5c '  jmp #LODA
1a60(0677): 90 3e 00 00 '  long @C_tmpfile3CNXmO_4d65929a_is_free_fall_L000004
1a64(0678): 2e 7c bc a0 '  mov r11, RI ' reg <- addrg
1a68(0679): 04 00 7c 5c '  jmp #LODA
1a6c(067a): 84 3e 00 00 '  long @C_demo_message_L000007+8
1a70(067b): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrg
1a74(067c): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
1a78(067d): 04 00 7c 5c '  jmp #LODA
1a7c(067e): 7c 3e 00 00 '  long @C_demo_message_L000007
1a80(067f): 2e 6c bc a0 '  mov r3, RI ' reg ARG ADDRG
1a84(0680): 02 6e fc a0 '  mov r4, #2 ' reg ARG coni
1a88(0681): 0c 5e fc a0 '  mov BC, #12 ' arg size
1a8c(0682): 0c 58 fc 84 '  sub SP, #12 ' stack space for reg ARGs
1a90(0683): 0b 00 7c 5c '  jmp #CALA
1a94(0684): b8 04 00 00 '  long @C_bbos_port_send
1a98(0685): 0c 58 fc 80 '  add SP, #12 ' CALL addrg
1a9c(0686):             ' C_demo_5
1a9c(0686): 23 00 7c 5c '  jmp #POPM
1aa0(0687): 00 08 02 00 '  long $20800 ' restore registers
1aa4(0688): 0c 00 7c 5c '  jmp #RETN
1aa8(0689):             '  long ' align long
1aa8(0689):             ' C_main ' <symbol:main>
1aa8(0689): 0b 00 7c 5c '  jmp #CALA
1aac(068a): 7c 01 00 00 '  long @C_arg_setup
1ab0(068b): 00 5e fc a0 '  mov BC, #0 ' arg size
1ab4(068c): 0b 00 7c 5c '  jmp #CALA
1ab8(068d): a0 03 00 00 '  long @C_bbos_init ' CALL addrg
1abc(068e): 04 00 7c 5c '  jmp #LODA
1ac0(068f): 08 3c 00 00 '  long @C_main_31_L000032
1ac4(0690): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
1ac8(0691): 04 5e fc a0 '  mov BC, #4 ' arg size
1acc(0692): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
1ad0(0693): 0b 00 7c 5c '  jmp #CALA
1ad4(0694): 40 36 00 00 '  long @C_printf
1ad8(0695): 04 58 fc 80 '  add SP, #4 ' CALL addrg
1adc(0696): 04 00 7c 5c '  jmp #LODA
1ae0(0697): 3c 18 00 00 '  long @C_demo
1ae4(0698): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
1ae8(0699): 00 6c fc a0 '  mov r3, #0 ' reg ARG coni
1aec(069a): 08 5e fc a0 '  mov BC, #8 ' arg size
1af0(069b): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1af4(069c): 0b 00 7c 5c '  jmp #CALA
1af8(069d): 6c 02 00 00 '  long @C_bbos_start_thread
1afc(069e): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1b00(069f): 04 00 7c 5c '  jmp #LODA
1b04(06a0): 40 0c 00 00 '  long @C_h48c
1b08(06a1): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
1b0c(06a2): 02 6c fc a0 '  mov r3, #2 ' reg ARG coni
1b10(06a3): 08 5e fc a0 '  mov BC, #8 ' arg size
1b14(06a4): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1b18(06a5): 0b 00 7c 5c '  jmp #CALA
1b1c(06a6): 6c 02 00 00 '  long @C_bbos_start_thread
1b20(06a7): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1b24(06a8): 00 5e fc a0 '  mov BC, #0 ' arg size
1b28(06a9): 0b 00 7c 5c '  jmp #CALA
1b2c(06aa): 18 04 00 00 '  long @C_bbos_start ' CALL addrg
1b30(06ab): 0e 00 7c 5c '  jmp #JMPA
1b34(06ac): 6c 01 00 00 '  long @C__exit
1b38(06ad):             '  long ' align long
1b38(06ad):             ' C_abort ' <symbol:abort>
1b38(06ad): 22 00 7c 5c '  jmp #PSHM
1b3c(06ae): 00 08 00 00 '  long $800 ' save registers
1b40(06af): 04 00 7c 5c '  jmp #LODA
1b44(06b0): dc 3d 00 00 '  long @C__clean
1b48(06b1): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRP4 addrg
1b4c(06b2): 00 7c 7c 86 '  cmp r11,  #0 wz
1b50(06b3): 13 00 7c 5c '  jmp #BR_Z
1b54(06b4): f4 1a 00 00 '  long @C_abort_4 ' EQU4
1b58(06b5): 04 00 7c 5c '  jmp #LODA
1b5c(06b6): dc 3d 00 00 '  long @C__clean
1b60(06b7): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRP4 addrg
1b64(06b8): 00 5e fc a0 '  mov BC, #0 ' arg size
1b68(06b9): 3e 5c bc a0 '  mov RI, r11
1b6c(06ba): 0d 00 7c 5c '  jmp #CALI ' CALL indirect
1b70(06bb):             ' C_abort_4
1b70(06bb): 06 6a fc a0 '  mov r2, #6 ' reg ARG coni
1b74(06bc): 04 5e fc a0 '  mov BC, #4 ' arg size
1b78(06bd): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
1b7c(06be): 0b 00 7c 5c '  jmp #CALA
1b80(06bf): 34 37 00 00 '  long @C_raise
1b84(06c0): 04 58 fc 80 '  add SP, #4 ' CALL addrg
1b88(06c1): 23 00 7c 5c '  jmp #POPM
1b8c(06c2): 00 08 00 00 '  long $800 ' restore registers
1b90(06c3): 0c 00 7c 5c '  jmp #RETN
1b94(06c4):             '  long ' align long
1b94(06c4):             ' C___bad_assertion ' <symbol:__bad_assertion>
1b94(06c4): 22 00 7c 5c '  jmp #PSHM
1b98(06c5): 00 00 02 00 '  long $20000 ' save registers
1b9c(06c6): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
1ba0(06c7): 04 00 7c 5c '  jmp #LODA
1ba4(06c8): 70 3d 00 00 '  long @C___stderr
1ba8(06c9): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
1bac(06ca): 44 6c bc a0 '  mov r3, r17 ' CVI, CVU or LOAD
1bb0(06cb): 08 5e fc a0 '  mov BC, #8 ' arg size
1bb4(06cc): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1bb8(06cd): 0b 00 7c 5c '  jmp #CALA
1bbc(06ce): bc 34 00 00 '  long @C_fputs
1bc0(06cf): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1bc4(06d0): 00 5e fc a0 '  mov BC, #0 ' arg size
1bc8(06d1): 0b 00 7c 5c '  jmp #CALA
1bcc(06d2): bc 1a 00 00 '  long @C_abort ' CALL addrg
1bd0(06d3): 23 00 7c 5c '  jmp #POPM
1bd4(06d4): 00 00 02 00 '  long $20000 ' restore registers
1bd8(06d5): 0c 00 7c 5c '  jmp #RETN
1bdc(06d6):             '  long ' align long
1bdc(06d6):             ' C_t_char ' <symbol:t_char>
1bdc(06d6): 22 00 7c 5c '  jmp #PSHM
1be0(06d7): 00 08 03 00 '  long $30800 ' save registers
1be4(06d8): 36 88 bc a0 '  mov r17, r3 ' reg var <- reg arg
1be8(06d9): 35 86 bc a0 '  mov r16, r2 ' reg var <- reg arg
1bec(06da): 44 7c bc a0 '  mov r11, r17
1bf0(06db): 01 7c fc 60 '  and r11, #1 ' BANDU4 coni
1bf4(06dc): 17 7c fc 2c '  shl r11, #23 ' LSHU4 coni
1bf8(06dd): 43 7c bc 80 '  add r11, r16 ' ADDU (1)
1bfc(06de): 3e 6a bc a0 '  mov r2, r11 ' CVI, CVU or LOAD
1c00(06df): 16 6c fc a0 '  mov r3, #22 ' reg ARG coni
1c04(06e0): 01 6e fc a0 '  mov r4, #1 ' reg ARG coni
1c08(06e1): 0c 5e fc a0 '  mov BC, #12 ' arg size
1c0c(06e2): 0c 58 fc 84 '  sub SP, #12 ' stack space for reg ARGs
1c10(06e3): 0b 00 7c 5c '  jmp #CALA
1c14(06e4): b0 1b 00 00 '  long @C__short_plugin_request
1c18(06e5): 0c 58 fc 80 '  add SP, #12 ' CALL addrg
1c1c(06e6): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
1c20(06e7): 23 00 7c 5c '  jmp #POPM
1c24(06e8): 00 08 03 00 '  long $30800 ' restore registers
1c28(06e9): 0c 00 7c 5c '  jmp #RETN
1c2c(06ea):             '  long ' align long
1c2c(06ea):             ' C__short_plugin_request ' <symbol:_short_plugin_request>
1c2c(06ea): 22 00 7c 5c '  jmp #PSHM
1c30(06eb): 00 88 03 00 '  long $38800 ' save registers
1c34(06ec): 37 88 bc a0 '  mov r17, r4 ' reg var <- reg arg
1c38(06ed): 36 86 bc a0 '  mov r16, r3 ' reg var <- reg arg
1c3c(06ee): 35 84 bc a0 '  mov r15, r2 ' reg var <- reg arg
1c40(06ef): 43 7c bc a0 '  mov r11, r16
1c44(06f0): 18 7c fc 2c '  shl r11, #24 ' LSHI4 coni
1c48(06f1): 3e 6a bc a0 '  mov r2, r11 ' ADDI/P
1c4c(06f2): 42 6a bc d0 '  adds r2, r15 ' ADDI/P (3)
1c50(06f3): 44 6c bc a0 '  mov r3, r17 ' CVI, CVU or LOAD
1c54(06f4): 08 5e fc a0 '  mov BC, #8 ' arg size
1c58(06f5): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1c5c(06f6): 0b 00 7c 5c '  jmp #CALA
1c60(06f7): 74 01 00 00 '  long @C__sys_plugin
1c64(06f8): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1c68(06f9): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
1c6c(06fa): 23 00 7c 5c '  jmp #POPM
1c70(06fb): 00 88 03 00 '  long $38800 ' restore registers
1c74(06fc): 0c 00 7c 5c '  jmp #RETN
1c78(06fd):             '  long ' align long
1c78(06fd):             ' C__long_plugin_request ' <symbol:_long_plugin_request>
1c78(06fd): 09 00 7c 5c '  jmp #NEWF
1c7c(06fe): 04 58 fc 84 '  sub SP, #4
1c80(06ff): 22 00 7c 5c '  jmp #PSHM
1c84(0700): 00 8c 03 00 '  long $38c00 ' save registers
1c88(0701): 37 88 bc a0 '  mov r17, r4 ' reg var <- reg arg
1c8c(0702): 36 86 bc a0 '  mov r16, r3 ' reg var <- reg arg
1c90(0703): 35 84 bc a0 '  mov r15, r2 ' reg var <- reg arg
1c94(0704): 05 00 7c 5c '  jmp #LODF
1c98(0705): fc ff ff ff '  long -4
1c9c(0706): 2e 84 3c 08 '  wrlong r15, RI ' ASGNI4 addrl
1ca0(0707): 43 7c bc a0 '  mov r11, r16
1ca4(0708): 18 7c fc 2c '  shl r11, #24 ' LSHI4 coni
1ca8(0709): 2d 7a bc a0 '  mov r10, FP
1cac(070a): 04 7a fc 84 '  sub r10, #-(-4) ' reg <- addrli
1cb0(070b): 3e 6a bc a0 '  mov r2, r11 ' ADDI/P
1cb4(070c): 3d 6a bc d0 '  adds r2, r10 ' ADDI/P (3)
1cb8(070d): 44 6c bc a0 '  mov r3, r17 ' CVI, CVU or LOAD
1cbc(070e): 08 5e fc a0 '  mov BC, #8 ' arg size
1cc0(070f): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1cc4(0710): 0b 00 7c 5c '  jmp #CALA
1cc8(0711): 74 01 00 00 '  long @C__sys_plugin
1ccc(0712): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1cd0(0713): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
1cd4(0714): 23 00 7c 5c '  jmp #POPM
1cd8(0715): 00 8c 03 00 '  long $38c00 ' restore registers
1cdc(0716): 04 58 fc 80 '  add SP, #4 ' framesize
1ce0(0717): 0a 00 7c 5c '  jmp #RETF
1ce4(0718):             '  long ' align long
1ce4(0718):             ' C__long_plugin_request_2 ' <symbol:_long_plugin_request_2>
1ce4(0718): 09 00 7c 5c '  jmp #NEWF
1ce8(0719): 08 58 fc 84 '  sub SP, #8
1cec(071a): 22 00 7c 5c '  jmp #PSHM
1cf0(071b): 00 cc 03 00 '  long $3cc00 ' save registers
1cf4(071c): 38 88 bc a0 '  mov r17, r5 ' reg var <- reg arg
1cf8(071d): 37 86 bc a0 '  mov r16, r4 ' reg var <- reg arg
1cfc(071e): 36 84 bc a0 '  mov r15, r3 ' reg var <- reg arg
1d00(071f): 35 82 bc a0 '  mov r14, r2 ' reg var <- reg arg
1d04(0720): 05 00 7c 5c '  jmp #LODF
1d08(0721): f8 ff ff ff '  long -8
1d0c(0722): 2e 84 3c 08 '  wrlong r15, RI ' ASGNI4 addrl
1d10(0723): 05 00 7c 5c '  jmp #LODF
1d14(0724): fc ff ff ff '  long -4
1d18(0725): 2e 82 3c 08 '  wrlong r14, RI ' ASGNI4 addrl
1d1c(0726): 43 7c bc a0 '  mov r11, r16
1d20(0727): 18 7c fc 2c '  shl r11, #24 ' LSHI4 coni
1d24(0728): 2d 7a bc a0 '  mov r10, FP
1d28(0729): 08 7a fc 84 '  sub r10, #-(-8) ' reg <- addrli
1d2c(072a): 3e 6a bc a0 '  mov r2, r11 ' ADDI/P
1d30(072b): 3d 6a bc d0 '  adds r2, r10 ' ADDI/P (3)
1d34(072c): 44 6c bc a0 '  mov r3, r17 ' CVI, CVU or LOAD
1d38(072d): 08 5e fc a0 '  mov BC, #8 ' arg size
1d3c(072e): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1d40(072f): 0b 00 7c 5c '  jmp #CALA
1d44(0730): 74 01 00 00 '  long @C__sys_plugin
1d48(0731): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1d4c(0732): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
1d50(0733): 23 00 7c 5c '  jmp #POPM
1d54(0734): 00 cc 03 00 '  long $3cc00 ' restore registers
1d58(0735): 08 58 fc 80 '  add SP, #8 ' framesize
1d5c(0736): 0a 00 7c 5c '  jmp #RETF
1d60(0737):             '  long ' align long
1d60(0737):             ' C_catalina_putc ' <symbol:catalina_putc>
1d60(0737): 22 00 7c 5c '  jmp #PSHM
1d64(0738): 00 0c 03 00 '  long $30c00 ' save registers
1d68(0739): 36 88 bc a0 '  mov r17, r3 ' reg var <- reg arg
1d6c(073a): 35 86 bc a0 '  mov r16, r2 ' reg var <- reg arg
1d70(073b): 43 7c bc a0 '  mov r11, r16 ' CVI, CVU or LOAD
1d74(073c): 04 00 7c 5c '  jmp #LODA
1d78(073d): 58 3d 00 00 '  long @C___stdout
1d7c(073e): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1d80(073f): 3d 7c 3c 86 '  cmp r11, r10 wz
1d84(0740): 14 00 7c 5c '  jmp #BRNZ
1d88(0741): 34 1d 00 00 '  long @C_catalina_putc_2 ' NEU4
1d8c(0742): 44 6a bc a0 '  mov r2, r17 ' CVI, CVU or LOAD
1d90(0743): 01 6c fc a0 '  mov r3, #1 ' reg ARG coni
1d94(0744): 08 5e fc a0 '  mov BC, #8 ' arg size
1d98(0745): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1d9c(0746): 0b 00 7c 5c '  jmp #CALA
1da0(0747): 60 1b 00 00 '  long @C_t_char
1da4(0748): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1da8(0749): 0e 00 7c 5c '  jmp #JMPA
1dac(074a): 6c 1d 00 00 '  long @C_catalina_putc_3 ' JUMPV addrg
1db0(074b):             ' C_catalina_putc_2
1db0(074b): 43 7c bc a0 '  mov r11, r16 ' CVI, CVU or LOAD
1db4(074c): 04 00 7c 5c '  jmp #LODA
1db8(074d): 70 3d 00 00 '  long @C___stderr
1dbc(074e): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
1dc0(074f): 3d 7c 3c 86 '  cmp r11, r10 wz
1dc4(0750): 14 00 7c 5c '  jmp #BRNZ
1dc8(0751): 6c 1d 00 00 '  long @C_catalina_putc_4 ' NEU4
1dcc(0752): 44 6a bc a0 '  mov r2, r17 ' CVI, CVU or LOAD
1dd0(0753): 01 6c fc a0 '  mov r3, #1 ' reg ARG coni
1dd4(0754): 08 5e fc a0 '  mov BC, #8 ' arg size
1dd8(0755): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
1ddc(0756): 0b 00 7c 5c '  jmp #CALA
1de0(0757): 60 1b 00 00 '  long @C_t_char
1de4(0758): 08 58 fc 80 '  add SP, #8 ' CALL addrg
1de8(0759):             ' C_catalina_putc_4
1de8(0759):             ' C_catalina_putc_3
1de8(0759): 44 66 bc a0 '  mov r0, r17 ' CVI, CVU or LOAD
1dec(075a): 23 00 7c 5c '  jmp #POPM
1df0(075b): 00 0c 03 00 '  long $30c00 ' restore registers
1df4(075c): 0c 00 7c 5c '  jmp #RETN
1df8(075d):             '  long ' align long
1df8(075d):             ' C__cnt
1df8(075d): f1 67 bc a0 '  mov r0, CNT
1dfc(075e): 0c 00 7c 5c '  jmp #RETN
1e00(075f):             '  long ' align long
1e00(075f):             ' C__dira
1e00(075f): f6 67 bc a0 '  mov r0, DIRA
1e04(0760): 36 ec bf 64 '  andn DIRA, r3
1e08(0761): 35 ec bf 68 '  or DIRA, r2
1e0c(0762): 0c 00 7c 5c '  jmp #RETN
1e10(0763):             '  long ' align long
1e10(0763):             ' C_tmpfilexMRBQL_4c2c6c11_gnum_L000001 ' <symbol:gnum>
1e10(0763): 22 00 7c 5c '  jmp #PSHM
1e14(0764): 00 ec 03 00 '  long $3ec00 ' save registers
1e18(0765): 37 88 bc a0 '  mov r17, r4 ' reg var <- reg arg
1e1c(0766): 36 86 bc a0 '  mov r16, r3 ' reg var <- reg arg
1e20(0767): 35 84 bc a0 '  mov r15, r2 ' reg var <- reg arg
1e24(0768): 44 7c bc 00 '  rdbyte r11, r17 ' reg <- INDIRU1 reg
1e28(0769): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1e2c(076a): 2a 7c 7c c2 '  cmps r11,  #42 wz
1e30(076b): 14 00 7c 5c '  jmp #BRNZ
1e34(076c): ec 1d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_3 ' NEI4
1e38(076d): 42 7c bc 08 '  rdlong r11, r15 ' reg <- INDIRP4 reg
1e3c(076e): 04 7c fc d0 '  adds r11, #4 ' ADDP4 coni
1e40(076f): 42 7c 3c 08 '  wrlong r11, r15 ' ASGNP4 reg
1e44(0770): 04 00 7c 5c '  jmp #LODA
1e48(0771): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
1e4c(0772): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
1e50(0773): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
1e54(0774): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
1e58(0775): 43 7c 3c 08 '  wrlong r11, r16 ' ASGNI4 reg
1e5c(0776): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
1e60(0777): 0e 00 7c 5c '  jmp #JMPA
1e64(0778): 40 1e 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_4 ' JUMPV addrg
1e68(0779):             ' C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_3
1e68(0779): 00 82 fc a0 '  mov r14, #0 ' reg <- coni
1e6c(077a): 0e 00 7c 5c '  jmp #JMPA
1e70(077b): 14 1e 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_9 ' JUMPV addrg
1e74(077c):             ' C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_8
1e74(077c): 0a 7c fc a0 '  mov r11, #10 ' reg <- coni
1e78(077d): 3e 66 bc a0 '  mov r0, r11 ' setup r0/r1 (2)
1e7c(077e): 41 68 bc a0 '  mov r1, r14 ' setup r0/r1 (2)
1e80(077f): 12 00 7c 5c '  jmp #MULT ' MULT(I/U)
1e84(0780): 33 82 bc a0 '  mov r14, r0 ' ADDI/P
1e88(0781): 40 82 bc d0 '  adds r14, r13 ' ADDI/P (3)
1e8c(0782): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
1e90(0783):             ' C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_9
1e90(0783): 44 7c bc 00 '  rdbyte r11, r17 ' reg <- INDIRU1 reg
1e94(0784): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
1e98(0785): 30 7c fc d4 '  subs r11, #48 ' SUBI4 coni
1e9c(0786): 3e 80 bc a0 '  mov r13, r11 ' CVI, CVU or LOAD
1ea0(0787): 00 7c 7c c3 '  cmps r11,  #0 wz,wc
1ea4(0788): 18 00 7c 5c '  jmp #BR_B
1ea8(0789): 3c 1e 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_11 ' LTI4
1eac(078a): 09 80 7c c3 '  cmps r13,  #9 wz,wc
1eb0(078b): 17 00 7c 5c '  jmp #BRBE
1eb4(078c): f8 1d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_8 ' LEI4
1eb8(078d):             ' C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_11
1eb8(078d): 43 82 3c 08 '  wrlong r14, r16 ' ASGNI4 reg
1ebc(078e):             ' C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_4
1ebc(078e): 44 66 bc a0 '  mov r0, r17 ' CVI, CVU or LOAD
1ec0(078f): 23 00 7c 5c '  jmp #POPM
1ec4(0790): 00 ec 03 00 '  long $3ec00 ' restore registers
1ec8(0791): 0c 00 7c 5c '  jmp #RETN
1ecc(0792):             '  long ' align long
1ecc(0792):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012 ' <symbol:o_print>
1ecc(0792): 09 00 7c 5c '  jmp #NEWF
1ed0(0793): 10 58 fc 84 '  sub SP, #16
1ed4(0794): 22 00 7c 5c '  jmp #PSHM
1ed8(0795): 00 fc 03 00 '  long $3fc00 ' save registers
1edc(0796): 38 88 bc a0 '  mov r17, r5 ' reg var <- reg arg
1ee0(0797): 37 86 bc a0 '  mov r16, r4 ' reg var <- reg arg
1ee4(0798): 36 84 bc a0 '  mov r15, r3 ' reg var <- reg arg
1ee8(0799): 35 82 bc a0 '  mov r14, r2 ' reg var <- reg arg
1eec(079a): 44 80 bc a0 '  mov r13, r17 ' CVI, CVU or LOAD
1ef0(079b): 2d 7c bc a0 '  mov r11, FP
1ef4(079c): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
1ef8(079d): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
1efc(079e): 3e 7e bc a0 '  mov r12, r11
1f00(079f): 60 7e fc 60 '  and r12, #96 ' BANDI4 coni
1f04(07a0): 20 7c fc a0 '  mov r11, #32 ' reg <- coni
1f08(07a1): 3e 7e 3c c2 '  cmps r12, r11 wz
1f0c(07a2): 13 00 7c 5c '  jmp #BR_Z
1f10(07a3): b8 1e 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_17 ' EQI4
1f14(07a4): 3e 7e 3c c3 '  cmps r12, r11 wz,wc
1f18(07a5): 18 00 7c 5c '  jmp #BR_B
1f1c(07a6): dc 1f 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_14 ' LTI4
1f20(07a7): 40 7e 7c c2 '  cmps r12,  #64 wz
1f24(07a8): 13 00 7c 5c '  jmp #BR_Z
1f28(07a9): 50 1f 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_20 ' EQI4
1f2c(07aa): 0e 00 7c 5c '  jmp #JMPA
1f30(07ab): dc 1f 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_14 ' JUMPV addrg
1f34(07ac):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_17
1f34(07ac): 00 82 7c c2 '  cmps r14,  #0 wz
1f38(07ad): 13 00 7c 5c '  jmp #BR_Z
1f3c(07ae): 0c 1f 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_18 ' EQI4
1f40(07af): 2d 7c bc a0 '  mov r11, FP
1f44(07b0): 08 7c fc 80 '  add r11, #8 ' reg <- addrfi
1f48(07b1): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
1f4c(07b2): 3e 7a bc 08 '  rdlong r10, r11 ' reg <- INDIRP4 reg
1f50(07b3): 04 7a fc d0 '  adds r10, #4 ' ADDP4 coni
1f54(07b4): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
1f58(07b5): 04 00 7c 5c '  jmp #LODA
1f5c(07b6): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
1f60(07b7): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
1f64(07b8): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (2)
1f68(07b9): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
1f6c(07ba): 10 7c fc 2c '  shl r11, #16
1f70(07bb): 10 7c fc 38 '  sar r11, #16 ' sign extend
1f74(07bc): 05 00 7c 5c '  jmp #LODF
1f78(07bd): f8 ff ff ff '  long -8
1f7c(07be): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
1f80(07bf): 0e 00 7c 5c '  jmp #JMPA
1f84(07c0): 60 20 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
1f88(07c1):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_18
1f88(07c1): 2d 7c bc a0 '  mov r11, FP
1f8c(07c2): 08 7c fc 80 '  add r11, #8 ' reg <- addrfi
1f90(07c3): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
1f94(07c4): 3e 7a bc 08 '  rdlong r10, r11 ' reg <- INDIRP4 reg
1f98(07c5): 04 7a fc d0 '  adds r10, #4 ' ADDP4 coni
1f9c(07c6): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
1fa0(07c7): 04 00 7c 5c '  jmp #LODA
1fa4(07c8): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
1fa8(07c9): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
1fac(07ca): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (2)
1fb0(07cb): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRU4 reg
1fb4(07cc): 4e 7c bc 60 '  and r11, cviu_m2 ' zero extend
1fb8(07cd): 05 00 7c 5c '  jmp #LODF
1fbc(07ce): fc ff ff ff '  long -4
1fc0(07cf): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNU4 addrl
1fc4(07d0): 0e 00 7c 5c '  jmp #JMPA
1fc8(07d1): 60 20 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
1fcc(07d2):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_20
1fcc(07d2): 00 82 7c c2 '  cmps r14,  #0 wz
1fd0(07d3): 13 00 7c 5c '  jmp #BR_Z
1fd4(07d4): 9c 1f 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_21 ' EQI4
1fd8(07d5): 2d 7c bc a0 '  mov r11, FP
1fdc(07d6): 08 7c fc 80 '  add r11, #8 ' reg <- addrfi
1fe0(07d7): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
1fe4(07d8): 3e 7a bc 08 '  rdlong r10, r11 ' reg <- INDIRP4 reg
1fe8(07d9): 04 7a fc d0 '  adds r10, #4 ' ADDP4 coni
1fec(07da): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
1ff0(07db): 04 00 7c 5c '  jmp #LODA
1ff4(07dc): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
1ff8(07dd): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
1ffc(07de): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (2)
2000(07df): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2004(07e0): 05 00 7c 5c '  jmp #LODF
2008(07e1): f8 ff ff ff '  long -8
200c(07e2): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2010(07e3): 0e 00 7c 5c '  jmp #JMPA
2014(07e4): 60 20 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
2018(07e5):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_21
2018(07e5): 2d 7c bc a0 '  mov r11, FP
201c(07e6): 08 7c fc 80 '  add r11, #8 ' reg <- addrfi
2020(07e7): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2024(07e8): 3e 7a bc 08 '  rdlong r10, r11 ' reg <- INDIRP4 reg
2028(07e9): 04 7a fc d0 '  adds r10, #4 ' ADDP4 coni
202c(07ea): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
2030(07eb): 04 00 7c 5c '  jmp #LODA
2034(07ec): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
2038(07ed): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
203c(07ee): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (2)
2040(07ef): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRU4 reg
2044(07f0): 05 00 7c 5c '  jmp #LODF
2048(07f1): fc ff ff ff '  long -4
204c(07f2): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNU4 addrl
2050(07f3): 0e 00 7c 5c '  jmp #JMPA
2054(07f4): 60 20 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
2058(07f5):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_14
2058(07f5): 00 82 7c c2 '  cmps r14,  #0 wz
205c(07f6): 13 00 7c 5c '  jmp #BR_Z
2060(07f7): 28 20 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_23 ' EQI4
2064(07f8): 2d 7c bc a0 '  mov r11, FP
2068(07f9): 08 7c fc 80 '  add r11, #8 ' reg <- addrfi
206c(07fa): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2070(07fb): 3e 7a bc 08 '  rdlong r10, r11 ' reg <- INDIRP4 reg
2074(07fc): 04 7a fc d0 '  adds r10, #4 ' ADDP4 coni
2078(07fd): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
207c(07fe): 04 00 7c 5c '  jmp #LODA
2080(07ff): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
2084(0800): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2088(0801): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (2)
208c(0802): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2090(0803): 05 00 7c 5c '  jmp #LODF
2094(0804): f8 ff ff ff '  long -8
2098(0805): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
209c(0806): 0e 00 7c 5c '  jmp #JMPA
20a0(0807): 60 20 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15 ' JUMPV addrg
20a4(0808):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_23
20a4(0808): 2d 7c bc a0 '  mov r11, FP
20a8(0809): 08 7c fc 80 '  add r11, #8 ' reg <- addrfi
20ac(080a): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
20b0(080b): 3e 7a bc 08 '  rdlong r10, r11 ' reg <- INDIRP4 reg
20b4(080c): 04 7a fc d0 '  adds r10, #4 ' ADDP4 coni
20b8(080d): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
20bc(080e): 04 00 7c 5c '  jmp #LODA
20c0(080f): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
20c4(0810): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
20c8(0811): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (2)
20cc(0812): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRU4 reg
20d0(0813): 05 00 7c 5c '  jmp #LODF
20d4(0814): fc ff ff ff '  long -4
20d8(0815): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNU4 addrl
20dc(0816):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_15
20dc(0816): 00 82 7c c2 '  cmps r14,  #0 wz
20e0(0817): 13 00 7c 5c '  jmp #BR_Z
20e4(0818): 3c 21 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_26 ' EQI4
20e8(0819): 2d 7c bc a0 '  mov r11, FP
20ec(081a): 08 7c fc 84 '  sub r11, #-(-8) ' reg <- addrli
20f0(081b): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
20f4(081c): 00 7c 7c c3 '  cmps r11,  #0 wz,wc
20f8(081d): 15 00 7c 5c '  jmp #BRAE
20fc(081e): bc 20 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_28 ' GEI4
2100(081f): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
2104(0820): 3e 88 bc a0 '  mov r17, r11
2108(0821): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
210c(0822): 2d 7a fc a0 '  mov r10, #45 ' reg <- coni
2110(0823): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
2114(0824): 2d 7c bc a0 '  mov r11, FP
2118(0825): 08 7c fc 84 '  sub r11, #-(-8) ' reg <- addrli
211c(0826): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2120(0827): 3e 7c bc a4 '  neg r11, r11 ' NEGI4
2124(0828): 05 00 7c 5c '  jmp #LODF
2128(0829): f8 ff ff ff '  long -8
212c(082a): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2130(082b): 0e 00 7c 5c '  jmp #JMPA
2134(082c): 24 21 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_29 ' JUMPV addrg
2138(082d):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_28
2138(082d): 2d 7c bc a0 '  mov r11, FP
213c(082e): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
2140(082f): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2144(0830): 02 7c fc 60 '  and r11, #2 ' BANDI4 coni
2148(0831): 00 7c 7c c2 '  cmps r11,  #0 wz
214c(0832): 13 00 7c 5c '  jmp #BR_Z
2150(0833): f4 20 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_30 ' EQI4
2154(0834): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
2158(0835): 3e 88 bc a0 '  mov r17, r11
215c(0836): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
2160(0837): 2b 7a fc a0 '  mov r10, #43 ' reg <- coni
2164(0838): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
2168(0839): 0e 00 7c 5c '  jmp #JMPA
216c(083a): 24 21 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_31 ' JUMPV addrg
2170(083b):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_30
2170(083b): 2d 7c bc a0 '  mov r11, FP
2174(083c): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
2178(083d): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
217c(083e): 04 7c fc 60 '  and r11, #4 ' BANDI4 coni
2180(083f): 00 7c 7c c2 '  cmps r11,  #0 wz
2184(0840): 13 00 7c 5c '  jmp #BR_Z
2188(0841): 24 21 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_32 ' EQI4
218c(0842): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
2190(0843): 3e 88 bc a0 '  mov r17, r11
2194(0844): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
2198(0845): 20 7a fc a0 '  mov r10, #32 ' reg <- coni
219c(0846): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
21a0(0847):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_32
21a0(0847):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_31
21a0(0847):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_29
21a0(0847): 2d 7c bc a0 '  mov r11, FP
21a4(0848): 08 7c fc 84 '  sub r11, #-(-8) ' reg <- addrli
21a8(0849): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
21ac(084a): 05 00 7c 5c '  jmp #LODF
21b0(084b): fc ff ff ff '  long -4
21b4(084c): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNU4 addrl
21b8(084d):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_26
21b8(084d): 2d 7c bc a0 '  mov r11, FP
21bc(084e): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
21c0(084f): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
21c4(0850): 08 7c fc 60 '  and r11, #8 ' BANDI4 coni
21c8(0851): 00 7c 7c c2 '  cmps r11,  #0 wz
21cc(0852): 13 00 7c 5c '  jmp #BR_Z
21d0(0853): 80 21 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_34 ' EQI4
21d4(0854): 43 7c bc a0 '  mov r11, r16 ' CVUI
21d8(0855): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
21dc(0856): 6f 7c 7c c2 '  cmps r11,  #111 wz
21e0(0857): 14 00 7c 5c '  jmp #BRNZ
21e4(0858): 80 21 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_34 ' NEI4
21e8(0859): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
21ec(085a): 3e 88 bc a0 '  mov r17, r11
21f0(085b): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
21f4(085c): 30 7a fc a0 '  mov r10, #48 ' reg <- coni
21f8(085d): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
21fc(085e):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_34
21fc(085e): 2d 7c bc a0 '  mov r11, FP
2200(085f): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
2204(0860): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRU4 reg
2208(0861): 00 7c 7c 86 '  cmp r11,  #0 wz
220c(0862): 14 00 7c 5c '  jmp #BRNZ
2210(0863): b0 21 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_36 ' NEU4
2214(0864): 00 84 7c c2 '  cmps r15,  #0 wz
2218(0865): 14 00 7c 5c '  jmp #BRNZ
221c(0866): 6c 22 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_37 ' NEI4
2220(0867): 44 66 bc a0 '  mov r0, r17 ' CVI, CVU or LOAD
2224(0868): 0e 00 7c 5c '  jmp #JMPA
2228(0869): 4c 24 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_13 ' JUMPV addrg
222c(086a):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_36
222c(086a): 2d 7c bc a0 '  mov r11, FP
2230(086b): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
2234(086c): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2238(086d): 08 7c fc 60 '  and r11, #8 ' BANDI4 coni
223c(086e): 00 7c 7c c2 '  cmps r11,  #0 wz
2240(086f): 13 00 7c 5c '  jmp #BR_Z
2244(0870): ec 21 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_43 ' EQI4
2248(0871): 43 7c bc a0 '  mov r11, r16 ' CVUI
224c(0872): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
2250(0873): 78 7c 7c c2 '  cmps r11,  #120 wz
2254(0874): 13 00 7c 5c '  jmp #BR_Z
2258(0875): 00 22 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_42 ' EQI4
225c(0876): 58 7c 7c c2 '  cmps r11,  #88 wz
2260(0877): 13 00 7c 5c '  jmp #BR_Z
2264(0878): 00 22 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_42 ' EQI4
2268(0879):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_43
2268(0879): 43 7c bc a0 '  mov r11, r16 ' CVUI
226c(087a): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
2270(087b): 70 7c 7c c2 '  cmps r11,  #112 wz
2274(087c): 14 00 7c 5c '  jmp #BRNZ
2278(087d): 6c 22 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_40 ' NEI4
227c(087e):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_42
227c(087e): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
2280(087f): 3e 88 bc a0 '  mov r17, r11
2284(0880): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
2288(0881): 30 7a fc a0 '  mov r10, #48 ' reg <- coni
228c(0882): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
2290(0883): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
2294(0884): 3e 88 bc a0 '  mov r17, r11
2298(0885): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
229c(0886): 43 7a bc a0 '  mov r10, r16 ' CVUI
22a0(0887): 4d 7a bc 60 '  and r10, cviu_m1 ' zero extend
22a4(0888): 58 7a 7c c2 '  cmps r10,  #88 wz
22a8(0889): 14 00 7c 5c '  jmp #BRNZ
22ac(088a): 4c 22 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_45 ' NEI4
22b0(088b): 58 7a fc a0 '  mov r10, #88 ' reg <- coni
22b4(088c): 05 00 7c 5c '  jmp #LODF
22b8(088d): f0 ff ff ff '  long -16
22bc(088e): 2e 7a 3c 08 '  wrlong r10, RI ' ASGNI4 addrl
22c0(088f): 0e 00 7c 5c '  jmp #JMPA
22c4(0890): 5c 22 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_46 ' JUMPV addrg
22c8(0891):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_45
22c8(0891): 78 7a fc a0 '  mov r10, #120 ' reg <- coni
22cc(0892): 05 00 7c 5c '  jmp #LODF
22d0(0893): f0 ff ff ff '  long -16
22d4(0894): 2e 7a 3c 08 '  wrlong r10, RI ' ASGNI4 addrl
22d8(0895):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_46
22d8(0895): 2d 7a bc a0 '  mov r10, FP
22dc(0896): 10 7a fc 84 '  sub r10, #-(-16) ' reg <- addrli
22e0(0897): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRI4 reg
22e4(0898): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
22e8(0899):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_40
22e8(0899):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_37
22e8(0899): 43 7c bc a0 '  mov r11, r16 ' CVUI
22ec(089a): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
22f0(089b): 05 00 7c 5c '  jmp #LODF
22f4(089c): f0 ff ff ff '  long -16
22f8(089d): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
22fc(089e): 2d 7c bc a0 '  mov r11, FP
2300(089f): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
2304(08a0): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2308(08a1): 69 7a fc a0 '  mov r10, #105 ' reg <- coni
230c(08a2): 3d 7c 3c c2 '  cmps r11, r10 wz
2310(08a3): 13 00 7c 5c '  jmp #BR_Z
2314(08a4): 8c 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_52 ' EQI4
2318(08a5): 3d 7c 3c c3 '  cmps r11, r10 wz,wc
231c(08a6): 16 00 7c 5c '  jmp #BR_A
2320(08a7): fc 22 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_55 ' GTI4
2324(08a8): 2d 7c bc a0 '  mov r11, FP
2328(08a9): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
232c(08aa): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2330(08ab): 58 7a fc a0 '  mov r10, #88 ' reg <- coni
2334(08ac): 3d 7c 3c c2 '  cmps r11, r10 wz
2338(08ad): 13 00 7c 5c '  jmp #BR_Z
233c(08ae): a4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_53 ' EQI4
2340(08af): 3d 7c 3c c3 '  cmps r11, r10 wz,wc
2344(08b0): 18 00 7c 5c '  jmp #BR_B
2348(08b1): b4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47 ' LTI4
234c(08b2): 2d 7c bc a0 '  mov r11, FP
2350(08b3): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
2354(08b4): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2358(08b5): 62 7c 7c c2 '  cmps r11,  #98 wz
235c(08b6): 13 00 7c 5c '  jmp #BR_Z
2360(08b7): 5c 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_50 ' EQI4
2364(08b8): 64 7c 7c c2 '  cmps r11,  #100 wz
2368(08b9): 13 00 7c 5c '  jmp #BR_Z
236c(08ba): 8c 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_52 ' EQI4
2370(08bb): 0e 00 7c 5c '  jmp #JMPA
2374(08bc): b4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47 ' JUMPV addrg
2378(08bd):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_55
2378(08bd): 2d 7c bc a0 '  mov r11, FP
237c(08be): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
2380(08bf): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2384(08c0): 6f 7a fc a0 '  mov r10, #111 ' reg <- coni
2388(08c1): 3d 7c 3c c2 '  cmps r11, r10 wz
238c(08c2): 13 00 7c 5c '  jmp #BR_Z
2390(08c3): 74 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_51 ' EQI4
2394(08c4): 70 7c 7c c2 '  cmps r11,  #112 wz
2398(08c5): 13 00 7c 5c '  jmp #BR_Z
239c(08c6): a4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_53 ' EQI4
23a0(08c7): 3d 7c 3c c3 '  cmps r11, r10 wz,wc
23a4(08c8): 18 00 7c 5c '  jmp #BR_B
23a8(08c9): b4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47 ' LTI4
23ac(08ca): 2d 7c bc a0 '  mov r11, FP
23b0(08cb): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
23b4(08cc): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
23b8(08cd): 75 7c 7c c2 '  cmps r11,  #117 wz
23bc(08ce): 13 00 7c 5c '  jmp #BR_Z
23c0(08cf): 8c 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_52 ' EQI4
23c4(08d0): 78 7c 7c c2 '  cmps r11,  #120 wz
23c8(08d1): 13 00 7c 5c '  jmp #BR_Z
23cc(08d2): a4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_53 ' EQI4
23d0(08d3): 0e 00 7c 5c '  jmp #JMPA
23d4(08d4): b4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47 ' JUMPV addrg
23d8(08d5):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_50
23d8(08d5): 02 7c fc a0 '  mov r11, #2 ' reg <- coni
23dc(08d6): 05 00 7c 5c '  jmp #LODF
23e0(08d7): f4 ff ff ff '  long -12
23e4(08d8): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
23e8(08d9): 0e 00 7c 5c '  jmp #JMPA
23ec(08da): b4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_48 ' JUMPV addrg
23f0(08db):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_51
23f0(08db): 08 7c fc a0 '  mov r11, #8 ' reg <- coni
23f4(08dc): 05 00 7c 5c '  jmp #LODF
23f8(08dd): f4 ff ff ff '  long -12
23fc(08de): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2400(08df): 0e 00 7c 5c '  jmp #JMPA
2404(08e0): b4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_48 ' JUMPV addrg
2408(08e1):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_52
2408(08e1): 0a 7c fc a0 '  mov r11, #10 ' reg <- coni
240c(08e2): 05 00 7c 5c '  jmp #LODF
2410(08e3): f4 ff ff ff '  long -12
2414(08e4): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2418(08e5): 0e 00 7c 5c '  jmp #JMPA
241c(08e6): b4 23 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_48 ' JUMPV addrg
2420(08e7):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_53
2420(08e7): 10 7c fc a0 '  mov r11, #16 ' reg <- coni
2424(08e8): 05 00 7c 5c '  jmp #LODF
2428(08e9): f4 ff ff ff '  long -12
242c(08ea): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2430(08eb):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_47
2430(08eb):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_48
2430(08eb): 42 6a bc a0 '  mov r2, r15 ' CVI, CVU or LOAD
2434(08ec): 44 6c bc a0 '  mov r3, r17 ' CVI, CVU or LOAD
2438(08ed): 2d 5c bc a0 '  mov RI, FP
243c(08ee): 0c 5c fc 84 '  sub RI, #-(-12)
2440(08ef): 2e 6e bc 08 '  rdlong r4, RI ' reg ARG INDIR ADDRLi
2444(08f0): 2d 5c bc a0 '  mov RI, FP
2448(08f1): 04 5c fc 84 '  sub RI, #-(-4)
244c(08f2): 2e 70 bc 08 '  rdlong r5, RI ' reg ARG INDIR ADDRLi
2450(08f3): 10 5e fc a0 '  mov BC, #16 ' arg size
2454(08f4): 10 58 fc 84 '  sub SP, #16 ' stack space for reg ARGs
2458(08f5): 0b 00 7c 5c '  jmp #CALA
245c(08f6): 5c 35 00 00 '  long @C__i_compute
2460(08f7): 10 58 fc 80 '  add SP, #16 ' CALL addrg
2464(08f8): 33 88 bc a0 '  mov r17, r0 ' CVI, CVU or LOAD
2468(08f9): 43 7c bc a0 '  mov r11, r16 ' CVUI
246c(08fa): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
2470(08fb): 58 7c 7c c2 '  cmps r11,  #88 wz
2474(08fc): 14 00 7c 5c '  jmp #BRNZ
2478(08fd): 48 24 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_58 ' NEI4
247c(08fe): 0e 00 7c 5c '  jmp #JMPA
2480(08ff): 34 24 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_61 ' JUMPV addrg
2484(0900):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_60
2484(0900): 40 7c bc 00 '  rdbyte r11, r13 ' reg <- INDIRU1 reg
2488(0901): 3e 6a bc a0 '  mov r2, r11 ' CVUI
248c(0902): 4d 6a bc 60 '  and r2, cviu_m1 ' zero extend
2490(0903): 04 5e fc a0 '  mov BC, #4 ' arg size
2494(0904): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
2498(0905): 0b 00 7c 5c '  jmp #CALA
249c(0906): 08 39 00 00 '  long @C_toupper
24a0(0907): 04 58 fc 80 '  add SP, #4 ' CALL addrg
24a4(0908): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
24a8(0909): 40 7c 3c 00 '  wrbyte r11, r13 ' ASGNU1 reg
24ac(090a): 01 80 fc d0 '  adds r13, #1 ' ADDP4 coni
24b0(090b):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_61
24b0(090b): 40 7c bc a0 '  mov r11, r13 ' CVI, CVU or LOAD
24b4(090c): 44 7a bc a0 '  mov r10, r17 ' CVI, CVU or LOAD
24b8(090d): 3d 7c 3c 86 '  cmp r11, r10 wz
24bc(090e): 14 00 7c 5c '  jmp #BRNZ
24c0(090f): 08 24 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_60 ' NEU4
24c4(0910):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_58
24c4(0910): 44 66 bc a0 '  mov r0, r17 ' CVI, CVU or LOAD
24c8(0911):             ' C_tmpfilehCn8zT_4c2c6c11_o_print_L000012_13
24c8(0911): 23 00 7c 5c '  jmp #POPM
24cc(0912): 00 fc 03 00 '  long $3fc00 ' restore registers
24d0(0913): 10 58 fc 80 '  add SP, #16 ' framesize
24d4(0914): 0a 00 7c 5c '  jmp #RETF
24d8(0915):             '  long ' align long
24d8(0915):             ' C__doprnt ' <symbol:_doprnt>
24d8(0915): 09 00 7c 5c '  jmp #NEWF
24dc(0916): 03 00 7c 5c '  jmp #LODL
24e0(0917): 30 04 00 00 '  long 1072
24e4(0918): 2e 58 bc 84 '  sub SP, RI
24e8(0919): 22 00 7c 5c '  jmp #PSHM
24ec(091a): 00 fe 03 00 '  long $3fe00 ' save registers
24f0(091b): 37 88 bc a0 '  mov r17, r4 ' reg var <- reg arg
24f4(091c): 2d 5c bc a0 '  mov RI, FP
24f8(091d): 0c 5c fc 80 '  add RI, #12
24fc(091e): 2e 6c 3c 08 '  wrlong r3, RI ' spill reg
2500(091f): 35 86 bc a0 '  mov r16, r2 ' reg var <- reg arg
2504(0920): 00 7e fc a0 '  mov r12, #0 ' reg <- coni
2508(0921): 0e 00 7c 5c '  jmp #JMPA
250c(0922): a0 33 00 00 '  long @C__doprnt_65 ' JUMPV addrg
2510(0923):             ' C__doprnt_64
2510(0923): 2d 7c bc a0 '  mov r11, FP
2514(0924): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
2518(0925): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
251c(0926): 25 7c 7c c2 '  cmps r11,  #37 wz
2520(0927): 13 00 7c 5c '  jmp #BR_Z
2524(0928): 44 25 00 00 '  long @C__doprnt_67 ' EQI4
2528(0929): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
252c(092a): 2d 5c bc a0 '  mov RI, FP
2530(092b): 10 5c fc 84 '  sub RI, #-(-16)
2534(092c): 2e 6c bc 08 '  rdlong r3, RI ' reg ARG INDIR ADDRLi
2538(092d): 08 5e fc a0 '  mov BC, #8 ' arg size
253c(092e): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
2540(092f): 0b 00 7c 5c '  jmp #CALA
2544(0930): fc 36 00 00 '  long @C_putc
2548(0931): 08 58 fc 80 '  add SP, #8 ' CALL addrg
254c(0932): 04 00 7c 5c '  jmp #LODA
2550(0933): 10 3d 00 00 '  long @C__doprnt_L000071
2554(0934): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
2558(0935): 3d 66 3c c2 '  cmps r0, r10 wz
255c(0936): 14 00 7c 5c '  jmp #BRNZ
2560(0937): 38 25 00 00 '  long @C__doprnt_69 ' NEI4
2564(0938): 00 7e 7c c2 '  cmps r12,  #0 wz
2568(0939): 13 00 7c 5c '  jmp #BR_Z
256c(093a): 0c 25 00 00 '  long @C__doprnt_75 ' EQI4
2570(093b): 3f 7c bc a4 '  neg r11, r12 ' NEGI4
2574(093c): 05 00 7c 5c '  jmp #LODF
2578(093d): d8 fb ff ff '  long -1064
257c(093e): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2580(093f): 0e 00 7c 5c '  jmp #JMPA
2584(0940): 24 25 00 00 '  long @C__doprnt_76 ' JUMPV addrg
2588(0941):             ' C__doprnt_75
2588(0941): 04 00 7c 5c '  jmp #LODA
258c(0942): 10 3d 00 00 '  long @C__doprnt_L000071
2590(0943): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2594(0944): 05 00 7c 5c '  jmp #LODF
2598(0945): d8 fb ff ff '  long -1064
259c(0946): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
25a0(0947):             ' C__doprnt_76
25a0(0947): 05 00 7c 5c '  jmp #LODF
25a4(0948): d8 fb ff ff '  long -1064
25a8(0949): 2e 66 bc 08 '  rdlong r0, RI ' reg <- INDIRI4 addrl
25ac(094a): 0e 00 7c 5c '  jmp #JMPA
25b0(094b): d0 33 00 00 '  long @C__doprnt_63 ' JUMPV addrg
25b4(094c):             ' C__doprnt_69
25b4(094c): 01 7e fc d0 '  adds r12, #1 ' ADDI4 coni
25b8(094d): 0e 00 7c 5c '  jmp #JMPA
25bc(094e): a0 33 00 00 '  long @C__doprnt_65 ' JUMPV addrg
25c0(094f):             ' C__doprnt_67
25c0(094f): 00 80 fc a0 '  mov r13, #0 ' reg <- coni
25c4(0950):             ' C__doprnt_77
25c4(0950): 44 7c bc 00 '  rdbyte r11, r17 ' reg <- INDIRU1 reg
25c8(0951): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
25cc(0952): 05 00 7c 5c '  jmp #LODF
25d0(0953): d8 fb ff ff '  long -1064
25d4(0954): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
25d8(0955): 05 00 7c 5c '  jmp #LODF
25dc(0956): d8 fb ff ff '  long -1064
25e0(0957): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrl
25e4(0958): 20 7a fc a0 '  mov r10, #32 ' reg <- coni
25e8(0959): 3d 7c 3c c2 '  cmps r11, r10 wz
25ec(095a): 13 00 7c 5c '  jmp #BR_Z
25f0(095b): e0 25 00 00 '  long @C__doprnt_85 ' EQI4
25f4(095c): 23 7c 7c c2 '  cmps r11,  #35 wz
25f8(095d): 13 00 7c 5c '  jmp #BR_Z
25fc(095e): ec 25 00 00 '  long @C__doprnt_86 ' EQI4
2600(095f): 3d 7c 3c c3 '  cmps r11, r10 wz,wc
2604(0960): 18 00 7c 5c '  jmp #BR_B
2608(0961): 04 26 00 00 '  long @C__doprnt_80 ' LTI4
260c(0962): 05 00 7c 5c '  jmp #LODF
2610(0963): d8 fb ff ff '  long -1064
2614(0964): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrl
2618(0965): 2b 7c 7c c2 '  cmps r11,  #43 wz
261c(0966): 13 00 7c 5c '  jmp #BR_Z
2620(0967): d4 25 00 00 '  long @C__doprnt_84 ' EQI4
2624(0968): 2d 7c 7c c2 '  cmps r11,  #45 wz
2628(0969): 13 00 7c 5c '  jmp #BR_Z
262c(096a): c8 25 00 00 '  long @C__doprnt_83 ' EQI4
2630(096b): 30 7c 7c c2 '  cmps r11,  #48 wz
2634(096c): 13 00 7c 5c '  jmp #BR_Z
2638(096d): f8 25 00 00 '  long @C__doprnt_87 ' EQI4
263c(096e): 0e 00 7c 5c '  jmp #JMPA
2640(096f): 04 26 00 00 '  long @C__doprnt_80 ' JUMPV addrg
2644(0970):             ' C__doprnt_83
2644(0970): 01 80 fc 68 '  or r13, #1 ' BORI4 coni
2648(0971): 0e 00 7c 5c '  jmp #JMPA
264c(0972): 1c 26 00 00 '  long @C__doprnt_81 ' JUMPV addrg
2650(0973):             ' C__doprnt_84
2650(0973): 02 80 fc 68 '  or r13, #2 ' BORI4 coni
2654(0974): 0e 00 7c 5c '  jmp #JMPA
2658(0975): 1c 26 00 00 '  long @C__doprnt_81 ' JUMPV addrg
265c(0976):             ' C__doprnt_85
265c(0976): 04 80 fc 68 '  or r13, #4 ' BORI4 coni
2660(0977): 0e 00 7c 5c '  jmp #JMPA
2664(0978): 1c 26 00 00 '  long @C__doprnt_81 ' JUMPV addrg
2668(0979):             ' C__doprnt_86
2668(0979): 08 80 fc 68 '  or r13, #8 ' BORI4 coni
266c(097a): 0e 00 7c 5c '  jmp #JMPA
2670(097b): 1c 26 00 00 '  long @C__doprnt_81 ' JUMPV addrg
2674(097c):             ' C__doprnt_87
2674(097c): 10 80 fc 68 '  or r13, #16 ' BORI4 coni
2678(097d): 0e 00 7c 5c '  jmp #JMPA
267c(097e): 1c 26 00 00 '  long @C__doprnt_81 ' JUMPV addrg
2680(097f):             ' C__doprnt_80
2680(097f): 04 00 7c 5c '  jmp #LODA
2684(0980): 0c 3d 00 00 '  long @C__doprnt_L000088
2688(0981): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
268c(0982): 3e 80 bc 68 '  or r13, r11 ' BORI/U (1)
2690(0983): 0e 00 7c 5c '  jmp #JMPA
2694(0984): 20 26 00 00 '  long @C__doprnt_78 ' JUMPV addrg
2698(0985):             ' C__doprnt_81
2698(0985): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
269c(0986):             ' C__doprnt_78
269c(0986): 04 00 7c 5c '  jmp #LODA
26a0(0987): 0c 3d 00 00 '  long @C__doprnt_L000088
26a4(0988): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
26a8(0989): 40 7c bc 60 '  and r11, r13 ' BANDI/U (2)
26ac(098a): 00 7c 7c c2 '  cmps r11,  #0 wz
26b0(098b): 13 00 7c 5c '  jmp #BR_Z
26b4(098c): 48 25 00 00 '  long @C__doprnt_77 ' EQI4
26b8(098d): 05 00 7c 5c '  jmp #LODF
26bc(098e): e4 ff ff ff '  long -28
26c0(098f): 2e 88 3c 08 '  wrlong r17, RI ' ASGNP4 addrl
26c4(0990): 2d 6a bc a0 '  mov r2, FP
26c8(0991): 0c 6a fc 80 '  add r2, #12 ' reg ARG ADDRFi
26cc(0992): 2d 6c bc a0 '  mov r3, FP
26d0(0993): 14 6c fc 84 '  sub r3, #-(-20) ' reg ARG ADDRLi
26d4(0994): 44 6e bc a0 '  mov r4, r17 ' CVI, CVU or LOAD
26d8(0995): 0c 5e fc a0 '  mov BC, #12 ' arg size
26dc(0996): 0c 58 fc 84 '  sub SP, #12 ' stack space for reg ARGs
26e0(0997): 0b 00 7c 5c '  jmp #CALA
26e4(0998): 94 1d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001
26e8(0999): 0c 58 fc 80 '  add SP, #12 ' CALL addrg
26ec(099a): 33 88 bc a0 '  mov r17, r0 ' CVI, CVU or LOAD
26f0(099b): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
26f4(099c): 2d 7a bc a0 '  mov r10, FP
26f8(099d): 1c 7a fc 84 '  sub r10, #-(-28) ' reg <- addrli
26fc(099e): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRP4 reg
2700(099f): 3d 7c 3c 86 '  cmp r11, r10 wz
2704(09a0): 13 00 7c 5c '  jmp #BR_Z
2708(09a1): 94 26 00 00 '  long @C__doprnt_92 ' EQU4
270c(09a2): 00 81 fc 68 '  or r13, #256 ' BORI4 coni
2710(09a3):             ' C__doprnt_92
2710(09a3): 44 7c bc 00 '  rdbyte r11, r17 ' reg <- INDIRU1 reg
2714(09a4): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
2718(09a5): 2e 7c 7c c2 '  cmps r11,  #46 wz
271c(09a6): 14 00 7c 5c '  jmp #BRNZ
2720(09a7): 0c 27 00 00 '  long @C__doprnt_94 ' NEI4
2724(09a8): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
2728(09a9): 05 00 7c 5c '  jmp #LODF
272c(09aa): e4 ff ff ff '  long -28
2730(09ab): 2e 88 3c 08 '  wrlong r17, RI ' ASGNP4 addrl
2734(09ac): 2d 6a bc a0 '  mov r2, FP
2738(09ad): 0c 6a fc 80 '  add r2, #12 ' reg ARG ADDRFi
273c(09ae): 2d 6c bc a0 '  mov r3, FP
2740(09af): 18 6c fc 84 '  sub r3, #-(-24) ' reg ARG ADDRLi
2744(09b0): 44 6e bc a0 '  mov r4, r17 ' CVI, CVU or LOAD
2748(09b1): 0c 5e fc a0 '  mov BC, #12 ' arg size
274c(09b2): 0c 58 fc 84 '  sub SP, #12 ' stack space for reg ARGs
2750(09b3): 0b 00 7c 5c '  jmp #CALA
2754(09b4): 94 1d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001
2758(09b5): 0c 58 fc 80 '  add SP, #12 ' CALL addrg
275c(09b6): 33 88 bc a0 '  mov r17, r0 ' CVI, CVU or LOAD
2760(09b7): 2d 7c bc a0 '  mov r11, FP
2764(09b8): 18 7c fc 84 '  sub r11, #-(-24) ' reg <- addrli
2768(09b9): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
276c(09ba): 00 7c 7c c3 '  cmps r11,  #0 wz,wc
2770(09bb): 18 00 7c 5c '  jmp #BR_B
2774(09bc): 0c 27 00 00 '  long @C__doprnt_96 ' LTI4
2778(09bd): 04 00 7c 5c '  jmp #LODA
277c(09be): 08 3d 00 00 '  long @C__doprnt_L000098
2780(09bf): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2784(09c0): 3e 80 bc 68 '  or r13, r11 ' BORI/U (1)
2788(09c1):             ' C__doprnt_96
2788(09c1):             ' C__doprnt_94
2788(09c1): 00 7c fc a0 '  mov r11, #0 ' reg <- coni
278c(09c2): 40 7a bc a0 '  mov r10, r13
2790(09c3): 00 7b fc 60 '  and r10, #256 ' BANDI4 coni
2794(09c4): 3e 7a 3c c2 '  cmps r10, r11 wz
2798(09c5): 13 00 7c 5c '  jmp #BR_Z
279c(09c6): 5c 27 00 00 '  long @C__doprnt_101 ' EQI4
27a0(09c7): 2d 7a bc a0 '  mov r10, FP
27a4(09c8): 14 7a fc 84 '  sub r10, #-(-20) ' reg <- addrli
27a8(09c9): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRI4 reg
27ac(09ca): 3e 7a 3c c3 '  cmps r10, r11 wz,wc
27b0(09cb): 15 00 7c 5c '  jmp #BRAE
27b4(09cc): 5c 27 00 00 '  long @C__doprnt_101 ' GEI4
27b8(09cd): 2d 7c bc a0 '  mov r11, FP
27bc(09ce): 14 7c fc 84 '  sub r11, #-(-20) ' reg <- addrli
27c0(09cf): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
27c4(09d0): 3e 7c bc a4 '  neg r11, r11 ' NEGI4
27c8(09d1): 05 00 7c 5c '  jmp #LODF
27cc(09d2): ec ff ff ff '  long -20
27d0(09d3): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
27d4(09d4): 01 80 fc 68 '  or r13, #1 ' BORI4 coni
27d8(09d5):             ' C__doprnt_101
27d8(09d5): 40 7c bc a0 '  mov r11, r13
27dc(09d6): 00 7d fc 60 '  and r11, #256 ' BANDI4 coni
27e0(09d7): 00 7c 7c c2 '  cmps r11,  #0 wz
27e4(09d8): 14 00 7c 5c '  jmp #BRNZ
27e8(09d9): 80 27 00 00 '  long @C__doprnt_103 ' NEI4
27ec(09da): 00 7c fc a0 '  mov r11, #0 ' reg <- coni
27f0(09db): 05 00 7c 5c '  jmp #LODF
27f4(09dc): ec ff ff ff '  long -20
27f8(09dd): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
27fc(09de):             ' C__doprnt_103
27fc(09de): 40 7c bc a0 '  mov r11, r13
2800(09df): 02 7c fc 60 '  and r11, #2 ' BANDI4 coni
2804(09e0): 00 7c 7c c2 '  cmps r11,  #0 wz
2808(09e1): 13 00 7c 5c '  jmp #BR_Z
280c(09e2): a4 27 00 00 '  long @C__doprnt_105 ' EQI4
2810(09e3): 04 00 7c 5c '  jmp #LODA
2814(09e4): 04 3d 00 00 '  long @C__doprnt_L000107
2818(09e5): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
281c(09e6): 3e 80 bc 60 '  and r13, r11 ' BANDI/U (1)
2820(09e7):             ' C__doprnt_105
2820(09e7): 40 7c bc a0 '  mov r11, r13
2824(09e8): 01 7c fc 60 '  and r11, #1 ' BANDI4 coni
2828(09e9): 00 7c 7c c2 '  cmps r11,  #0 wz
282c(09ea): 13 00 7c 5c '  jmp #BR_Z
2830(09eb): c8 27 00 00 '  long @C__doprnt_110 ' EQI4
2834(09ec): 04 00 7c 5c '  jmp #LODA
2838(09ed): 00 3d 00 00 '  long @C__doprnt_L000112
283c(09ee): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2840(09ef): 3e 80 bc 60 '  and r13, r11 ' BANDI/U (1)
2844(09f0):             ' C__doprnt_110
2844(09f0): 05 00 7c 5c '  jmp #LODF
2848(09f1): dc fb ff ff '  long -1060
284c(09f2): 2e 7c bc a0 '  mov r11, RI ' reg <- addrl
2850(09f3): 05 00 7c 5c '  jmp #LODF
2854(09f4): fc ff ff ff '  long -4
2858(09f5): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
285c(09f6): 05 00 7c 5c '  jmp #LODF
2860(09f7): dc fb ff ff '  long -1060
2864(09f8): 2e 84 bc a0 '  mov r15, RI ' reg <- addrl
2868(09f9): 44 7c bc 00 '  rdbyte r11, r17 ' reg <- INDIRU1 reg
286c(09fa): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
2870(09fb): 05 00 7c 5c '  jmp #LODF
2874(09fc): d8 fb ff ff '  long -1064
2878(09fd): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
287c(09fe): 05 00 7c 5c '  jmp #LODF
2880(09ff): d8 fb ff ff '  long -1064
2884(0a00): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrl
2888(0a01): 68 7a fc a0 '  mov r10, #104 ' reg <- coni
288c(0a02): 3d 7c 3c c2 '  cmps r11, r10 wz
2890(0a03): 13 00 7c 5c '  jmp #BR_Z
2894(0a04): 68 28 00 00 '  long @C__doprnt_118 ' EQI4
2898(0a05): 3d 7c 3c c3 '  cmps r11, r10 wz,wc
289c(0a06): 16 00 7c 5c '  jmp #BR_A
28a0(0a07): 48 28 00 00 '  long @C__doprnt_122 ' GTI4
28a4(0a08): 05 00 7c 5c '  jmp #LODF
28a8(0a09): d8 fb ff ff '  long -1064
28ac(0a0a): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrl
28b0(0a0b): 4c 7c 7c c2 '  cmps r11,  #76 wz
28b4(0a0c): 13 00 7c 5c '  jmp #BR_Z
28b8(0a0d): 88 28 00 00 '  long @C__doprnt_120 ' EQI4
28bc(0a0e): 0e 00 7c 5c '  jmp #JMPA
28c0(0a0f): 90 28 00 00 '  long @C__doprnt_115 ' JUMPV addrg
28c4(0a10):             ' C__doprnt_122
28c4(0a10): 05 00 7c 5c '  jmp #LODF
28c8(0a11): d8 fb ff ff '  long -1064
28cc(0a12): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrl
28d0(0a13): 6c 7c 7c c2 '  cmps r11,  #108 wz
28d4(0a14): 13 00 7c 5c '  jmp #BR_Z
28d8(0a15): 78 28 00 00 '  long @C__doprnt_119 ' EQI4
28dc(0a16): 0e 00 7c 5c '  jmp #JMPA
28e0(0a17): 90 28 00 00 '  long @C__doprnt_115 ' JUMPV addrg
28e4(0a18):             ' C__doprnt_118
28e4(0a18): 20 80 fc 68 '  or r13, #32 ' BORI4 coni
28e8(0a19): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
28ec(0a1a): 0e 00 7c 5c '  jmp #JMPA
28f0(0a1b): 90 28 00 00 '  long @C__doprnt_116 ' JUMPV addrg
28f4(0a1c):             ' C__doprnt_119
28f4(0a1c): 40 80 fc 68 '  or r13, #64 ' BORI4 coni
28f8(0a1d): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
28fc(0a1e): 0e 00 7c 5c '  jmp #JMPA
2900(0a1f): 90 28 00 00 '  long @C__doprnt_116 ' JUMPV addrg
2904(0a20):             ' C__doprnt_120
2904(0a20): 80 80 fc 68 '  or r13, #128 ' BORI4 coni
2908(0a21): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
290c(0a22):             ' C__doprnt_115
290c(0a22):             ' C__doprnt_116
290c(0a22): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
2910(0a23): 3e 88 bc a0 '  mov r17, r11
2914(0a24): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
2918(0a25): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
291c(0a26): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
2920(0a27): 05 00 7c 5c '  jmp #LODF
2924(0a28): f0 ff ff ff '  long -16
2928(0a29): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
292c(0a2a): 05 00 7c 5c '  jmp #LODF
2930(0a2b): d4 fb ff ff '  long -1068
2934(0a2c): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2938(0a2d): 05 00 7c 5c '  jmp #LODF
293c(0a2e): d4 fb ff ff '  long -1068
2940(0a2f): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrl
2944(0a30): 62 7c 7c c3 '  cmps r11,  #98 wz,wc
2948(0a31): 18 00 7c 5c '  jmp #BR_B
294c(0a32): fc 28 00 00 '  long @C__doprnt_160 ' LTI4
2950(0a33): 75 7c 7c c3 '  cmps r11,  #117 wz,wc
2954(0a34): 16 00 7c 5c '  jmp #BR_A
2958(0a35): 1c 29 00 00 '  long @C__doprnt_161 ' GTI4
295c(0a36): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
2960(0a37): 04 00 7c 5c '  jmp #LODA
2964(0a38): 1c 3b 00 00 '  long @C__doprnt_162_L000164-392
2968(0a39): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
296c(0a3a): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
2970(0a3b): 3e 5c bc 08 '  rdlong RI, r11
2974(0a3c): 0f 00 7c 5c '  jmp #JMPI ' JUMPV INDIR reg
2978(0a3d):             ' C__doprnt_160
2978(0a3d): 05 00 7c 5c '  jmp #LODF
297c(0a3e): d4 fb ff ff '  long -1068
2980(0a3f): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrl
2984(0a40): 58 7c 7c c2 '  cmps r11,  #88 wz
2988(0a41): 13 00 7c 5c '  jmp #BR_Z
298c(0a42): ac 2b 00 00 '  long @C__doprnt_147 ' EQI4
2990(0a43): 0e 00 7c 5c '  jmp #JMPA
2994(0a44): 3c 29 00 00 '  long @C__doprnt_123 ' JUMPV addrg
2998(0a45):             ' C__doprnt_161
2998(0a45): 05 00 7c 5c '  jmp #LODF
299c(0a46): d4 fb ff ff '  long -1068
29a0(0a47): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRI4 addrl
29a4(0a48): 78 7c 7c c2 '  cmps r11,  #120 wz
29a8(0a49): 13 00 7c 5c '  jmp #BR_Z
29ac(0a4a): ac 2b 00 00 '  long @C__doprnt_147 ' EQI4
29b0(0a4b): 0e 00 7c 5c '  jmp #JMPA
29b4(0a4c): 3c 29 00 00 '  long @C__doprnt_123 ' JUMPV addrg
29b8(0a4d):             ' C__doprnt_123
29b8(0a4d): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
29bc(0a4e): 2d 5c bc a0 '  mov RI, FP
29c0(0a4f): 10 5c fc 84 '  sub RI, #-(-16)
29c4(0a50): 2e 6c bc 08 '  rdlong r3, RI ' reg ARG INDIR ADDRLi
29c8(0a51): 08 5e fc a0 '  mov BC, #8 ' arg size
29cc(0a52): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
29d0(0a53): 0b 00 7c 5c '  jmp #CALA
29d4(0a54): fc 36 00 00 '  long @C_putc
29d8(0a55): 08 58 fc 80 '  add SP, #8 ' CALL addrg
29dc(0a56): 04 00 7c 5c '  jmp #LODA
29e0(0a57): 10 3d 00 00 '  long @C__doprnt_L000071
29e4(0a58): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
29e8(0a59): 3d 66 3c c2 '  cmps r0, r10 wz
29ec(0a5a): 14 00 7c 5c '  jmp #BRNZ
29f0(0a5b): c8 29 00 00 '  long @C__doprnt_126 ' NEI4
29f4(0a5c): 00 7e 7c c2 '  cmps r12,  #0 wz
29f8(0a5d): 13 00 7c 5c '  jmp #BR_Z
29fc(0a5e): 9c 29 00 00 '  long @C__doprnt_129 ' EQI4
2a00(0a5f): 3f 7c bc a4 '  neg r11, r12 ' NEGI4
2a04(0a60): 05 00 7c 5c '  jmp #LODF
2a08(0a61): d0 fb ff ff '  long -1072
2a0c(0a62): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2a10(0a63): 0e 00 7c 5c '  jmp #JMPA
2a14(0a64): b4 29 00 00 '  long @C__doprnt_130 ' JUMPV addrg
2a18(0a65):             ' C__doprnt_129
2a18(0a65): 04 00 7c 5c '  jmp #LODA
2a1c(0a66): 10 3d 00 00 '  long @C__doprnt_L000071
2a20(0a67): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2a24(0a68): 05 00 7c 5c '  jmp #LODF
2a28(0a69): d0 fb ff ff '  long -1072
2a2c(0a6a): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2a30(0a6b):             ' C__doprnt_130
2a30(0a6b): 05 00 7c 5c '  jmp #LODF
2a34(0a6c): d0 fb ff ff '  long -1072
2a38(0a6d): 2e 66 bc 08 '  rdlong r0, RI ' reg <- INDIRI4 addrl
2a3c(0a6e): 0e 00 7c 5c '  jmp #JMPA
2a40(0a6f): d0 33 00 00 '  long @C__doprnt_63 ' JUMPV addrg
2a44(0a70):             ' C__doprnt_126
2a44(0a70): 01 7e fc d0 '  adds r12, #1 ' ADDI4 coni
2a48(0a71): 0e 00 7c 5c '  jmp #JMPA
2a4c(0a72): a0 33 00 00 '  long @C__doprnt_65 ' JUMPV addrg
2a50(0a73):             ' C__doprnt_131
2a50(0a73): 40 7c bc a0 '  mov r11, r13
2a54(0a74): 20 7c fc 60 '  and r11, #32 ' BANDI4 coni
2a58(0a75): 00 7c 7c c2 '  cmps r11,  #0 wz
2a5c(0a76): 13 00 7c 5c '  jmp #BR_Z
2a60(0a77): 28 2a 00 00 '  long @C__doprnt_132 ' EQI4
2a64(0a78): 2d 7c bc a0 '  mov r11, FP
2a68(0a79): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
2a6c(0a7a): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2a70(0a7b): 04 7c fc d0 '  adds r11, #4 ' ADDP4 coni
2a74(0a7c): 05 00 7c 5c '  jmp #LODF
2a78(0a7d): 0c 00 00 00 '  long 12
2a7c(0a7e): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
2a80(0a7f): 04 00 7c 5c '  jmp #LODA
2a84(0a80): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
2a88(0a81): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
2a8c(0a82): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
2a90(0a83): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2a94(0a84): 3f 7a bc a0 '  mov r10, r12 ' CVI, CVU or LOAD
2a98(0a85): 3e 7a 3c 04 '  wrword r10, r11 ' ASGNI2 reg
2a9c(0a86): 0e 00 7c 5c '  jmp #JMPA
2aa0(0a87): a0 33 00 00 '  long @C__doprnt_65 ' JUMPV addrg
2aa4(0a88):             ' C__doprnt_132
2aa4(0a88): 40 7c bc a0 '  mov r11, r13
2aa8(0a89): 40 7c fc 60 '  and r11, #64 ' BANDI4 coni
2aac(0a8a): 00 7c 7c c2 '  cmps r11,  #0 wz
2ab0(0a8b): 13 00 7c 5c '  jmp #BR_Z
2ab4(0a8c): 78 2a 00 00 '  long @C__doprnt_134 ' EQI4
2ab8(0a8d): 2d 7c bc a0 '  mov r11, FP
2abc(0a8e): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
2ac0(0a8f): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2ac4(0a90): 04 7c fc d0 '  adds r11, #4 ' ADDP4 coni
2ac8(0a91): 05 00 7c 5c '  jmp #LODF
2acc(0a92): 0c 00 00 00 '  long 12
2ad0(0a93): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
2ad4(0a94): 04 00 7c 5c '  jmp #LODA
2ad8(0a95): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
2adc(0a96): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
2ae0(0a97): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
2ae4(0a98): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2ae8(0a99): 3e 7e 3c 08 '  wrlong r12, r11 ' ASGNI4 reg
2aec(0a9a): 0e 00 7c 5c '  jmp #JMPA
2af0(0a9b): a0 33 00 00 '  long @C__doprnt_65 ' JUMPV addrg
2af4(0a9c):             ' C__doprnt_134
2af4(0a9c): 2d 7c bc a0 '  mov r11, FP
2af8(0a9d): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
2afc(0a9e): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2b00(0a9f): 04 7c fc d0 '  adds r11, #4 ' ADDP4 coni
2b04(0aa0): 05 00 7c 5c '  jmp #LODF
2b08(0aa1): 0c 00 00 00 '  long 12
2b0c(0aa2): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
2b10(0aa3): 04 00 7c 5c '  jmp #LODA
2b14(0aa4): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
2b18(0aa5): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
2b1c(0aa6): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
2b20(0aa7): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2b24(0aa8): 3e 7e 3c 08 '  wrlong r12, r11 ' ASGNI4 reg
2b28(0aa9): 0e 00 7c 5c '  jmp #JMPA
2b2c(0aaa): a0 33 00 00 '  long @C__doprnt_65 ' JUMPV addrg
2b30(0aab):             ' C__doprnt_136
2b30(0aab): 2d 7c bc a0 '  mov r11, FP
2b34(0aac): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
2b38(0aad): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2b3c(0aae): 04 7c fc d0 '  adds r11, #4 ' ADDP4 coni
2b40(0aaf): 05 00 7c 5c '  jmp #LODF
2b44(0ab0): 0c 00 00 00 '  long 12
2b48(0ab1): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
2b4c(0ab2): 04 00 7c 5c '  jmp #LODA
2b50(0ab3): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
2b54(0ab4): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
2b58(0ab5): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
2b5c(0ab6): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2b60(0ab7): 05 00 7c 5c '  jmp #LODF
2b64(0ab8): fc ff ff ff '  long -4
2b68(0ab9): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
2b6c(0aba): 2d 7c bc a0 '  mov r11, FP
2b70(0abb): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
2b74(0abc): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2b78(0abd): 00 7c 7c 86 '  cmp r11,  #0 wz
2b7c(0abe): 14 00 7c 5c '  jmp #BRNZ
2b80(0abf): 1c 2b 00 00 '  long @C__doprnt_137 ' NEU4
2b84(0ac0): 04 00 7c 5c '  jmp #LODA
2b88(0ac1): f8 3c 00 00 '  long @C__doprnt_139_L000140
2b8c(0ac2): 2d 5e bc a0 '  mov BC, FP
2b90(0ac3): 04 5e fc 84 '  sub BC, #-(-4)
2b94(0ac4): 2f 5c 3c 08 '  wrlong RI, BC ' ASGNP4 addrli addrg
2b98(0ac5):             ' C__doprnt_137
2b98(0ac5): 2d 7c bc a0 '  mov r11, FP
2b9c(0ac6): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
2ba0(0ac7): 3e 84 bc 08 '  rdlong r15, r11 ' reg <- INDIRP4 reg
2ba4(0ac8): 0e 00 7c 5c '  jmp #JMPA
2ba8(0ac9): 6c 2b 00 00 '  long @C__doprnt_142 ' JUMPV addrg
2bac(0aca):             ' C__doprnt_141
2bac(0aca): 42 7c bc 00 '  rdbyte r11, r15 ' reg <- INDIRU1 reg
2bb0(0acb): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
2bb4(0acc): 00 7c 7c c2 '  cmps r11,  #0 wz
2bb8(0acd): 14 00 7c 5c '  jmp #BRNZ
2bbc(0ace): 4c 2b 00 00 '  long @C__doprnt_144 ' NEI4
2bc0(0acf): 0e 00 7c 5c '  jmp #JMPA
2bc4(0ad0): c4 2d 00 00 '  long @C__doprnt_124 ' JUMPV addrg
2bc8(0ad1):             ' C__doprnt_144
2bc8(0ad1): 01 84 fc d0 '  adds r15, #1 ' ADDP4 coni
2bcc(0ad2): 2d 7c bc a0 '  mov r11, FP
2bd0(0ad3): 18 7c fc 84 '  sub r11, #-(-24) ' reg <- addrli
2bd4(0ad4): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2bd8(0ad5): 01 7c fc d4 '  subs r11, #1 ' SUBI4 coni
2bdc(0ad6): 05 00 7c 5c '  jmp #LODF
2be0(0ad7): e8 ff ff ff '  long -24
2be4(0ad8): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2be8(0ad9):             ' C__doprnt_142
2be8(0ad9): 00 7c fc a0 '  mov r11, #0 ' reg <- coni
2bec(0ada): 2d 7a bc a0 '  mov r10, FP
2bf0(0adb): 18 7a fc 84 '  sub r10, #-(-24) ' reg <- addrli
2bf4(0adc): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRI4 reg
2bf8(0add): 3e 7a 3c c2 '  cmps r10, r11 wz
2bfc(0ade): 14 00 7c 5c '  jmp #BRNZ
2c00(0adf): 30 2b 00 00 '  long @C__doprnt_141 ' NEI4
2c04(0ae0): 04 00 7c 5c '  jmp #LODA
2c08(0ae1): 08 3d 00 00 '  long @C__doprnt_L000098
2c0c(0ae2): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
2c10(0ae3): 40 7a bc 60 '  and r10, r13 ' BANDI/U (2)
2c14(0ae4): 3e 7a 3c c2 '  cmps r10, r11 wz
2c18(0ae5): 13 00 7c 5c '  jmp #BR_Z
2c1c(0ae6): 30 2b 00 00 '  long @C__doprnt_141 ' EQI4
2c20(0ae7): 0e 00 7c 5c '  jmp #JMPA
2c24(0ae8): c4 2d 00 00 '  long @C__doprnt_124 ' JUMPV addrg
2c28(0ae9):             ' C__doprnt_146
2c28(0ae9):             ' C__doprnt_147
2c28(0ae9): 04 00 7c 5c '  jmp #LODA
2c2c(0aea): 08 3d 00 00 '  long @C__doprnt_L000098
2c30(0aeb): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2c34(0aec): 40 7c bc 60 '  and r11, r13 ' BANDI/U (2)
2c38(0aed): 00 7c 7c c2 '  cmps r11,  #0 wz
2c3c(0aee): 14 00 7c 5c '  jmp #BRNZ
2c40(0aef): e0 2b 00 00 '  long @C__doprnt_148 ' NEI4
2c44(0af0): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
2c48(0af1): 05 00 7c 5c '  jmp #LODF
2c4c(0af2): e8 ff ff ff '  long -24
2c50(0af3): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2c54(0af4): 0e 00 7c 5c '  jmp #JMPA
2c58(0af5): 08 2c 00 00 '  long @C__doprnt_149 ' JUMPV addrg
2c5c(0af6):             ' C__doprnt_148
2c5c(0af6): 2d 7c bc a0 '  mov r11, FP
2c60(0af7): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
2c64(0af8): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2c68(0af9): 70 7c 7c c2 '  cmps r11,  #112 wz
2c6c(0afa): 13 00 7c 5c '  jmp #BR_Z
2c70(0afb): 08 2c 00 00 '  long @C__doprnt_150 ' EQI4
2c74(0afc): 04 00 7c 5c '  jmp #LODA
2c78(0afd): 00 3d 00 00 '  long @C__doprnt_L000112
2c7c(0afe): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2c80(0aff): 3e 80 bc 60 '  and r13, r11 ' BANDI/U (1)
2c84(0b00):             ' C__doprnt_150
2c84(0b00):             ' C__doprnt_149
2c84(0b00): 00 6a fc a0 '  mov r2, #0 ' reg ARG coni
2c88(0b01): 2d 5c bc a0 '  mov RI, FP
2c8c(0b02): 18 5c fc 84 '  sub RI, #-(-24)
2c90(0b03): 2e 6c bc 08 '  rdlong r3, RI ' reg ARG INDIR ADDRLi
2c94(0b04): 2d 7c bc a0 '  mov r11, FP
2c98(0b05): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
2c9c(0b06): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2ca0(0b07): 3e 6e bc a0 '  mov r4, r11 ' CVUI
2ca4(0b08): 4d 6e bc 60 '  and r4, cviu_m1 ' zero extend
2ca8(0b09): 42 70 bc a0 '  mov r5, r15 ' CVI, CVU or LOAD
2cac(0b0a): 10 58 fc 84 '  sub SP, #16 ' stack space for reg ARGs
2cb0(0b0b): 40 5c bc a0 '  mov RI, r13
2cb4(0b0c): 06 00 7c 5c '  jmp #PSHL ' stack ARG
2cb8(0b0d): 2d 5c bc a0 '  mov RI, FP
2cbc(0b0e): 0c 5c fc 80 '  add RI, #12
2cc0(0b0f): 06 00 7c 5c '  jmp #PSHL ' stack ARG ADDRFi
2cc4(0b10): 18 5e fc a0 '  mov BC, #24 ' arg size
2cc8(0b11): 0b 00 7c 5c '  jmp #CALA
2ccc(0b12): 50 1e 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012
2cd0(0b13): 18 58 fc 80 '  add SP, #24 ' CALL addrg
2cd4(0b14): 33 84 bc a0 '  mov r15, r0 ' CVI, CVU or LOAD
2cd8(0b15): 0e 00 7c 5c '  jmp #JMPA
2cdc(0b16): c4 2d 00 00 '  long @C__doprnt_124 ' JUMPV addrg
2ce0(0b17):             ' C__doprnt_152
2ce0(0b17): 04 00 7c 5c '  jmp #LODA
2ce4(0b18): f4 3c 00 00 '  long @C__doprnt_L000153
2ce8(0b19): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2cec(0b1a): 3e 80 bc 68 '  or r13, r11 ' BORI/U (1)
2cf0(0b1b): 04 00 7c 5c '  jmp #LODA
2cf4(0b1c): 08 3d 00 00 '  long @C__doprnt_L000098
2cf8(0b1d): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2cfc(0b1e): 40 7c bc 60 '  and r11, r13 ' BANDI/U (2)
2d00(0b1f): 00 7c 7c c2 '  cmps r11,  #0 wz
2d04(0b20): 14 00 7c 5c '  jmp #BRNZ
2d08(0b21): a8 2c 00 00 '  long @C__doprnt_156 ' NEI4
2d0c(0b22): 01 7c fc a0 '  mov r11, #1 ' reg <- coni
2d10(0b23): 05 00 7c 5c '  jmp #LODF
2d14(0b24): e8 ff ff ff '  long -24
2d18(0b25): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2d1c(0b26): 0e 00 7c 5c '  jmp #JMPA
2d20(0b27): b8 2c 00 00 '  long @C__doprnt_157 ' JUMPV addrg
2d24(0b28):             ' C__doprnt_156
2d24(0b28): 04 00 7c 5c '  jmp #LODA
2d28(0b29): 00 3d 00 00 '  long @C__doprnt_L000112
2d2c(0b2a): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2d30(0b2b): 3e 80 bc 60 '  and r13, r11 ' BANDI/U (1)
2d34(0b2c):             ' C__doprnt_157
2d34(0b2c): 01 6a fc a0 '  mov r2, #1 ' reg ARG coni
2d38(0b2d): 2d 5c bc a0 '  mov RI, FP
2d3c(0b2e): 18 5c fc 84 '  sub RI, #-(-24)
2d40(0b2f): 2e 6c bc 08 '  rdlong r3, RI ' reg ARG INDIR ADDRLi
2d44(0b30): 2d 7c bc a0 '  mov r11, FP
2d48(0b31): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
2d4c(0b32): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2d50(0b33): 3e 6e bc a0 '  mov r4, r11 ' CVUI
2d54(0b34): 4d 6e bc 60 '  and r4, cviu_m1 ' zero extend
2d58(0b35): 42 70 bc a0 '  mov r5, r15 ' CVI, CVU or LOAD
2d5c(0b36): 10 58 fc 84 '  sub SP, #16 ' stack space for reg ARGs
2d60(0b37): 40 5c bc a0 '  mov RI, r13
2d64(0b38): 06 00 7c 5c '  jmp #PSHL ' stack ARG
2d68(0b39): 2d 5c bc a0 '  mov RI, FP
2d6c(0b3a): 0c 5c fc 80 '  add RI, #12
2d70(0b3b): 06 00 7c 5c '  jmp #PSHL ' stack ARG ADDRFi
2d74(0b3c): 18 5e fc a0 '  mov BC, #24 ' arg size
2d78(0b3d): 0b 00 7c 5c '  jmp #CALA
2d7c(0b3e): 50 1e 00 00 '  long @C_tmpfilehCn8zT_4c2c6c11_o_print_L000012
2d80(0b3f): 18 58 fc 80 '  add SP, #24 ' CALL addrg
2d84(0b40): 33 84 bc a0 '  mov r15, r0 ' CVI, CVU or LOAD
2d88(0b41): 0e 00 7c 5c '  jmp #JMPA
2d8c(0b42): c4 2d 00 00 '  long @C__doprnt_124 ' JUMPV addrg
2d90(0b43):             ' C__doprnt_158
2d90(0b43): 42 7c bc a0 '  mov r11, r15 ' CVI, CVU or LOAD
2d94(0b44): 3e 84 bc a0 '  mov r15, r11
2d98(0b45): 01 84 fc d0 '  adds r15, #1 ' ADDP4 coni
2d9c(0b46): 2d 7a bc a0 '  mov r10, FP
2da0(0b47): 0c 7a fc 80 '  add r10, #12 ' reg <- addrfi
2da4(0b48): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRP4 reg
2da8(0b49): 04 7a fc d0 '  adds r10, #4 ' ADDP4 coni
2dac(0b4a): 05 00 7c 5c '  jmp #LODF
2db0(0b4b): 0c 00 00 00 '  long 12
2db4(0b4c): 2e 7a 3c 08 '  wrlong r10, RI ' ASGNP4 addrl
2db8(0b4d): 04 00 7c 5c '  jmp #LODA
2dbc(0b4e): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
2dc0(0b4f): 2e 78 bc 08 '  rdlong  r9, RI ' reg <- con
2dc4(0b50): 3c 7a bc d0 '  adds r10, r9 ' ADDI/P (1)
2dc8(0b51): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRI4 reg
2dcc(0b52): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
2dd0(0b53): 0e 00 7c 5c '  jmp #JMPA
2dd4(0b54): c4 2d 00 00 '  long @C__doprnt_124 ' JUMPV addrg
2dd8(0b55):             ' C__doprnt_159
2dd8(0b55): 2d 7c bc a0 '  mov r11, FP
2ddc(0b56): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
2de0(0b57): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2de4(0b58): 04 7c fc d0 '  adds r11, #4 ' ADDP4 coni
2de8(0b59): 05 00 7c 5c '  jmp #LODF
2dec(0b5a): 0c 00 00 00 '  long 12
2df0(0b5b): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
2df4(0b5c): 04 00 7c 5c '  jmp #LODA
2df8(0b5d): 14 3d 00 00 '  long @C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005
2dfc(0b5e): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
2e00(0b5f): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
2e04(0b60): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2e08(0b61): 05 00 7c 5c '  jmp #LODF
2e0c(0b62): 0c 00 00 00 '  long 12
2e10(0b63): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
2e14(0b64): 2d 7c bc a0 '  mov r11, FP
2e18(0b65): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
2e1c(0b66): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2e20(0b67): 04 7c fc d0 '  adds r11, #4 ' ADDP4 coni
2e24(0b68): 05 00 7c 5c '  jmp #LODF
2e28(0b69): 0c 00 00 00 '  long 12
2e2c(0b6a): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
2e30(0b6b): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
2e34(0b6c): 3e 88 bc 08 '  rdlong r17, r11 ' reg <- INDIRP4 reg
2e38(0b6d): 0e 00 7c 5c '  jmp #JMPA
2e3c(0b6e): a0 33 00 00 '  long @C__doprnt_65 ' JUMPV addrg
2e40(0b6f):             ' C__doprnt_124
2e40(0b6f): 20 7c fc a0 '  mov r11, #32 ' reg <- coni
2e44(0b70): 05 00 7c 5c '  jmp #LODF
2e48(0b71): f4 ff ff ff '  long -12
2e4c(0b72): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2e50(0b73): 40 7c bc a0 '  mov r11, r13
2e54(0b74): 10 7c fc 60 '  and r11, #16 ' BANDI4 coni
2e58(0b75): 00 7c 7c c2 '  cmps r11,  #0 wz
2e5c(0b76): 13 00 7c 5c '  jmp #BR_Z
2e60(0b77): f8 2d 00 00 '  long @C__doprnt_166 ' EQI4
2e64(0b78): 30 7c fc a0 '  mov r11, #48 ' reg <- coni
2e68(0b79): 05 00 7c 5c '  jmp #LODF
2e6c(0b7a): f4 ff ff ff '  long -12
2e70(0b7b): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2e74(0b7c):             ' C__doprnt_166
2e74(0b7c): 42 7c bc a0 '  mov r11, r15 ' CVI, CVU or LOAD
2e78(0b7d): 2d 7a bc a0 '  mov r10, FP
2e7c(0b7e): 04 7a fc 84 '  sub r10, #-(-4) ' reg <- addrli
2e80(0b7f): 3d 7a bc 08 '  rdlong r10, r10 ' reg <- INDIRP4 reg
2e84(0b80): 3d 7c bc 84 '  sub r11, r10 ' SUBU (1)
2e88(0b81): 3e 82 bc a0 '  mov r14, r11 ' CVI, CVU or LOAD
2e8c(0b82): 00 7c fc a0 '  mov r11, #0 ' reg <- coni
2e90(0b83): 05 00 7c 5c '  jmp #LODF
2e94(0b84): e0 ff ff ff '  long -32
2e98(0b85): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2e9c(0b86): 40 7c bc a0 '  mov r11, r13
2ea0(0b87): 10 7c fc 60 '  and r11, #16 ' BANDI4 coni
2ea4(0b88): 00 7c 7c c2 '  cmps r11,  #0 wz
2ea8(0b89): 13 00 7c 5c '  jmp #BR_Z
2eac(0b8a): f4 2e 00 00 '  long @C__doprnt_168 ' EQI4
2eb0(0b8b): 2d 7c bc a0 '  mov r11, FP
2eb4(0b8c): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
2eb8(0b8d): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2ebc(0b8e): 78 7c 7c c2 '  cmps r11,  #120 wz
2ec0(0b8f): 13 00 7c 5c '  jmp #BR_Z
2ec4(0b90): 58 2e 00 00 '  long @C__doprnt_172 ' EQI4
2ec8(0b91): 58 7c 7c c2 '  cmps r11,  #88 wz
2ecc(0b92): 14 00 7c 5c '  jmp #BRNZ
2ed0(0b93): 6c 2e 00 00 '  long @C__doprnt_171 ' NEI4
2ed4(0b94):             ' C__doprnt_172
2ed4(0b94): 40 7c bc a0 '  mov r11, r13
2ed8(0b95): 08 7c fc 60 '  and r11, #8 ' BANDI4 coni
2edc(0b96): 00 7c 7c c2 '  cmps r11,  #0 wz
2ee0(0b97): 14 00 7c 5c '  jmp #BRNZ
2ee4(0b98): d8 2e 00 00 '  long @C__doprnt_175 ' NEI4
2ee8(0b99):             ' C__doprnt_171
2ee8(0b99): 2d 7c bc a0 '  mov r11, FP
2eec(0b9a): 10 7c fc 84 '  sub r11, #-(-16) ' reg <- addrli
2ef0(0b9b): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2ef4(0b9c): 70 7c 7c c2 '  cmps r11,  #112 wz
2ef8(0b9d): 13 00 7c 5c '  jmp #BR_Z
2efc(0b9e): d8 2e 00 00 '  long @C__doprnt_175 ' EQI4
2f00(0b9f): 04 00 7c 5c '  jmp #LODA
2f04(0ba0): f4 3c 00 00 '  long @C__doprnt_L000153
2f08(0ba1): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2f0c(0ba2): 40 7c bc 60 '  and r11, r13 ' BANDI/U (2)
2f10(0ba3): 00 7c 7c c2 '  cmps r11,  #0 wz
2f14(0ba4): 13 00 7c 5c '  jmp #BR_Z
2f18(0ba5): f4 2e 00 00 '  long @C__doprnt_168 ' EQI4
2f1c(0ba6): 2d 7c bc a0 '  mov r11, FP
2f20(0ba7): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
2f24(0ba8): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
2f28(0ba9): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
2f2c(0baa): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
2f30(0bab): 2b 7c 7c c2 '  cmps r11,  #43 wz
2f34(0bac): 13 00 7c 5c '  jmp #BR_Z
2f38(0bad): d8 2e 00 00 '  long @C__doprnt_175 ' EQI4
2f3c(0bae): 2d 7c 7c c2 '  cmps r11,  #45 wz
2f40(0baf): 13 00 7c 5c '  jmp #BR_Z
2f44(0bb0): d8 2e 00 00 '  long @C__doprnt_175 ' EQI4
2f48(0bb1): 20 7c 7c c2 '  cmps r11,  #32 wz
2f4c(0bb2): 14 00 7c 5c '  jmp #BRNZ
2f50(0bb3): f4 2e 00 00 '  long @C__doprnt_168 ' NEI4
2f54(0bb4):             ' C__doprnt_175
2f54(0bb4): 2d 7c bc a0 '  mov r11, FP
2f58(0bb5): 20 7c fc 84 '  sub r11, #-(-32) ' reg <- addrli
2f5c(0bb6): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2f60(0bb7): 01 7c fc d0 '  adds r11, #1 ' ADDI4 coni
2f64(0bb8): 05 00 7c 5c '  jmp #LODF
2f68(0bb9): e0 ff ff ff '  long -32
2f6c(0bba): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2f70(0bbb):             ' C__doprnt_168
2f70(0bbb): 2d 7c bc a0 '  mov r11, FP
2f74(0bbc): 14 7c fc 84 '  sub r11, #-(-20) ' reg <- addrli
2f78(0bbd): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2f7c(0bbe): 41 7c bc d4 '  subs r11, r14 ' SUBI/P (1)
2f80(0bbf): 05 00 7c 5c '  jmp #LODF
2f84(0bc0): f8 ff ff ff '  long -8
2f88(0bc1): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
2f8c(0bc2): 00 7c 7c c3 '  cmps r11,  #0 wz,wc
2f90(0bc3): 17 00 7c 5c '  jmp #BRBE
2f94(0bc4): ec 31 00 00 '  long @C__doprnt_176 ' LEI4
2f98(0bc5): 40 7c bc a0 '  mov r11, r13
2f9c(0bc6): 01 7c fc 60 '  and r11, #1 ' BANDI4 coni
2fa0(0bc7): 00 7c 7c c2 '  cmps r11,  #0 wz
2fa4(0bc8): 14 00 7c 5c '  jmp #BRNZ
2fa8(0bc9): ec 31 00 00 '  long @C__doprnt_178 ' NEI4
2fac(0bca): 2d 7c bc a0 '  mov r11, FP
2fb0(0bcb): 08 7c fc 84 '  sub r11, #-(-8) ' reg <- addrli
2fb4(0bcc): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2fb8(0bcd): 3e 7e bc d0 '  adds r12, r11 ' ADDI/P (1)
2fbc(0bce): 2d 7c bc a0 '  mov r11, FP
2fc0(0bcf): 20 7c fc 84 '  sub r11, #-(-32) ' reg <- addrli
2fc4(0bd0): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
2fc8(0bd1): 00 7c 7c c2 '  cmps r11,  #0 wz
2fcc(0bd2): 13 00 7c 5c '  jmp #BR_Z
2fd0(0bd3): 38 31 00 00 '  long @C__doprnt_180 ' EQI4
2fd4(0bd4): 04 00 7c 5c '  jmp #LODA
2fd8(0bd5): f4 3c 00 00 '  long @C__doprnt_L000153
2fdc(0bd6): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
2fe0(0bd7): 40 7c bc 60 '  and r11, r13 ' BANDI/U (2)
2fe4(0bd8): 00 7c 7c c2 '  cmps r11,  #0 wz
2fe8(0bd9): 13 00 7c 5c '  jmp #BR_Z
2fec(0bda): 28 30 00 00 '  long @C__doprnt_182 ' EQI4
2ff0(0bdb): 01 82 fc d4 '  subs r14, #1 ' SUBI4 coni
2ff4(0bdc): 01 7e fc d0 '  adds r12, #1 ' ADDI4 coni
2ff8(0bdd): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
2ffc(0bde): 2d 7c bc a0 '  mov r11, FP
3000(0bdf): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
3004(0be0): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
3008(0be1): 3e 7a bc a0 '  mov r10, r11
300c(0be2): 01 7a fc d0 '  adds r10, #1 ' ADDP4 coni
3010(0be3): 05 00 7c 5c '  jmp #LODF
3014(0be4): fc ff ff ff '  long -4
3018(0be5): 2e 7a 3c 08 '  wrlong r10, RI ' ASGNP4 addrl
301c(0be6): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
3020(0be7): 3e 6c bc a0 '  mov r3, r11 ' CVUI
3024(0be8): 4d 6c bc 60 '  and r3, cviu_m1 ' zero extend
3028(0be9): 08 5e fc a0 '  mov BC, #8 ' arg size
302c(0bea): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
3030(0beb): 0b 00 7c 5c '  jmp #CALA
3034(0bec): fc 36 00 00 '  long @C_putc
3038(0bed): 08 58 fc 80 '  add SP, #8 ' CALL addrg
303c(0bee): 04 00 7c 5c '  jmp #LODA
3040(0bef): 10 3d 00 00 '  long @C__doprnt_L000071
3044(0bf0): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
3048(0bf1): 3d 66 3c c2 '  cmps r0, r10 wz
304c(0bf2): 14 00 7c 5c '  jmp #BRNZ
3050(0bf3): 38 31 00 00 '  long @C__doprnt_183 ' NEI4
3054(0bf4): 00 7e 7c c2 '  cmps r12,  #0 wz
3058(0bf5): 13 00 7c 5c '  jmp #BR_Z
305c(0bf6): fc 2f 00 00 '  long @C__doprnt_187 ' EQI4
3060(0bf7): 3f 7c bc a4 '  neg r11, r12 ' NEGI4
3064(0bf8): 05 00 7c 5c '  jmp #LODF
3068(0bf9): d0 fb ff ff '  long -1072
306c(0bfa): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
3070(0bfb): 0e 00 7c 5c '  jmp #JMPA
3074(0bfc): 14 30 00 00 '  long @C__doprnt_188 ' JUMPV addrg
3078(0bfd):             ' C__doprnt_187
3078(0bfd): 04 00 7c 5c '  jmp #LODA
307c(0bfe): 10 3d 00 00 '  long @C__doprnt_L000071
3080(0bff): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
3084(0c00): 05 00 7c 5c '  jmp #LODF
3088(0c01): d0 fb ff ff '  long -1072
308c(0c02): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
3090(0c03):             ' C__doprnt_188
3090(0c03): 05 00 7c 5c '  jmp #LODF
3094(0c04): d0 fb ff ff '  long -1072
3098(0c05): 2e 66 bc 08 '  rdlong r0, RI ' reg <- INDIRI4 addrl
309c(0c06): 0e 00 7c 5c '  jmp #JMPA
30a0(0c07): d0 33 00 00 '  long @C__doprnt_63 ' JUMPV addrg
30a4(0c08):             ' C__doprnt_182
30a4(0c08): 02 82 fc d4 '  subs r14, #2 ' SUBI4 coni
30a8(0c09): 02 7e fc d0 '  adds r12, #2 ' ADDI4 coni
30ac(0c0a): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
30b0(0c0b): 2d 7c bc a0 '  mov r11, FP
30b4(0c0c): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
30b8(0c0d): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
30bc(0c0e): 3e 7a bc a0 '  mov r10, r11
30c0(0c0f): 01 7a fc d0 '  adds r10, #1 ' ADDP4 coni
30c4(0c10): 05 00 7c 5c '  jmp #LODF
30c8(0c11): fc ff ff ff '  long -4
30cc(0c12): 2e 7a 3c 08 '  wrlong r10, RI ' ASGNP4 addrl
30d0(0c13): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
30d4(0c14): 3e 6c bc a0 '  mov r3, r11 ' CVUI
30d8(0c15): 4d 6c bc 60 '  and r3, cviu_m1 ' zero extend
30dc(0c16): 08 5e fc a0 '  mov BC, #8 ' arg size
30e0(0c17): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
30e4(0c18): 0b 00 7c 5c '  jmp #CALA
30e8(0c19): fc 36 00 00 '  long @C_putc
30ec(0c1a): 08 58 fc 80 '  add SP, #8 ' CALL addrg
30f0(0c1b): 04 00 7c 5c '  jmp #LODA
30f4(0c1c): 10 3d 00 00 '  long @C__doprnt_L000071
30f8(0c1d): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
30fc(0c1e): 3d 66 3c c2 '  cmps r0, r10 wz
3100(0c1f): 13 00 7c 5c '  jmp #BR_Z
3104(0c20): e8 30 00 00 '  long @C__doprnt_191 ' EQI4
3108(0c21): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
310c(0c22): 2d 7c bc a0 '  mov r11, FP
3110(0c23): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
3114(0c24): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
3118(0c25): 3e 7a bc a0 '  mov r10, r11
311c(0c26): 01 7a fc d0 '  adds r10, #1 ' ADDP4 coni
3120(0c27): 05 00 7c 5c '  jmp #LODF
3124(0c28): fc ff ff ff '  long -4
3128(0c29): 2e 7a 3c 08 '  wrlong r10, RI ' ASGNP4 addrl
312c(0c2a): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
3130(0c2b): 3e 6c bc a0 '  mov r3, r11 ' CVUI
3134(0c2c): 4d 6c bc 60 '  and r3, cviu_m1 ' zero extend
3138(0c2d): 08 5e fc a0 '  mov BC, #8 ' arg size
313c(0c2e): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
3140(0c2f): 0b 00 7c 5c '  jmp #CALA
3144(0c30): fc 36 00 00 '  long @C_putc
3148(0c31): 08 58 fc 80 '  add SP, #8 ' CALL addrg
314c(0c32): 04 00 7c 5c '  jmp #LODA
3150(0c33): 10 3d 00 00 '  long @C__doprnt_L000071
3154(0c34): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
3158(0c35): 3d 66 3c c2 '  cmps r0, r10 wz
315c(0c36): 14 00 7c 5c '  jmp #BRNZ
3160(0c37): 38 31 00 00 '  long @C__doprnt_189 ' NEI4
3164(0c38):             ' C__doprnt_191
3164(0c38): 00 7e 7c c2 '  cmps r12,  #0 wz
3168(0c39): 13 00 7c 5c '  jmp #BR_Z
316c(0c3a): 0c 31 00 00 '  long @C__doprnt_193 ' EQI4
3170(0c3b): 3f 7c bc a4 '  neg r11, r12 ' NEGI4
3174(0c3c): 05 00 7c 5c '  jmp #LODF
3178(0c3d): d0 fb ff ff '  long -1072
317c(0c3e): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
3180(0c3f): 0e 00 7c 5c '  jmp #JMPA
3184(0c40): 24 31 00 00 '  long @C__doprnt_194 ' JUMPV addrg
3188(0c41):             ' C__doprnt_193
3188(0c41): 04 00 7c 5c '  jmp #LODA
318c(0c42): 10 3d 00 00 '  long @C__doprnt_L000071
3190(0c43): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
3194(0c44): 05 00 7c 5c '  jmp #LODF
3198(0c45): d0 fb ff ff '  long -1072
319c(0c46): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
31a0(0c47):             ' C__doprnt_194
31a0(0c47): 05 00 7c 5c '  jmp #LODF
31a4(0c48): d0 fb ff ff '  long -1072
31a8(0c49): 2e 66 bc 08 '  rdlong r0, RI ' reg <- INDIRI4 addrl
31ac(0c4a): 0e 00 7c 5c '  jmp #JMPA
31b0(0c4b): d0 33 00 00 '  long @C__doprnt_63 ' JUMPV addrg
31b4(0c4c):             ' C__doprnt_189
31b4(0c4c):             ' C__doprnt_183
31b4(0c4c):             ' C__doprnt_180
31b4(0c4c):             ' C__doprnt_195
31b4(0c4c): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
31b8(0c4d): 2d 5c bc a0 '  mov RI, FP
31bc(0c4e): 0c 5c fc 84 '  sub RI, #-(-12)
31c0(0c4f): 2e 6c bc 08 '  rdlong r3, RI ' reg ARG INDIR ADDRLi
31c4(0c50): 08 5e fc a0 '  mov BC, #8 ' arg size
31c8(0c51): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
31cc(0c52): 0b 00 7c 5c '  jmp #CALA
31d0(0c53): fc 36 00 00 '  long @C_putc
31d4(0c54): 08 58 fc 80 '  add SP, #8 ' CALL addrg
31d8(0c55): 04 00 7c 5c '  jmp #LODA
31dc(0c56): 10 3d 00 00 '  long @C__doprnt_L000071
31e0(0c57): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
31e4(0c58): 3d 66 3c c2 '  cmps r0, r10 wz
31e8(0c59): 14 00 7c 5c '  jmp #BRNZ
31ec(0c5a): c4 31 00 00 '  long @C__doprnt_198 ' NEI4
31f0(0c5b): 00 7e 7c c2 '  cmps r12,  #0 wz
31f4(0c5c): 13 00 7c 5c '  jmp #BR_Z
31f8(0c5d): 98 31 00 00 '  long @C__doprnt_201 ' EQI4
31fc(0c5e): 3f 7c bc a4 '  neg r11, r12 ' NEGI4
3200(0c5f): 05 00 7c 5c '  jmp #LODF
3204(0c60): d0 fb ff ff '  long -1072
3208(0c61): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
320c(0c62): 0e 00 7c 5c '  jmp #JMPA
3210(0c63): b0 31 00 00 '  long @C__doprnt_202 ' JUMPV addrg
3214(0c64):             ' C__doprnt_201
3214(0c64): 04 00 7c 5c '  jmp #LODA
3218(0c65): 10 3d 00 00 '  long @C__doprnt_L000071
321c(0c66): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
3220(0c67): 05 00 7c 5c '  jmp #LODF
3224(0c68): d0 fb ff ff '  long -1072
3228(0c69): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
322c(0c6a):             ' C__doprnt_202
322c(0c6a): 05 00 7c 5c '  jmp #LODF
3230(0c6b): d0 fb ff ff '  long -1072
3234(0c6c): 2e 66 bc 08 '  rdlong r0, RI ' reg <- INDIRI4 addrl
3238(0c6d): 0e 00 7c 5c '  jmp #JMPA
323c(0c6e): d0 33 00 00 '  long @C__doprnt_63 ' JUMPV addrg
3240(0c6f):             ' C__doprnt_198
3240(0c6f): 2d 7c bc a0 '  mov r11, FP
3244(0c70): 08 7c fc 84 '  sub r11, #-(-8) ' reg <- addrli
3248(0c71): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
324c(0c72): 01 7c fc d4 '  subs r11, #1 ' SUBI4 coni
3250(0c73): 05 00 7c 5c '  jmp #LODF
3254(0c74): f8 ff ff ff '  long -8
3258(0c75): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
325c(0c76): 00 7c 7c c2 '  cmps r11,  #0 wz
3260(0c77): 14 00 7c 5c '  jmp #BRNZ
3264(0c78): 38 31 00 00 '  long @C__doprnt_195 ' NEI4
3268(0c79):             ' C__doprnt_178
3268(0c79):             ' C__doprnt_176
3268(0c79): 41 7e bc d0 '  adds r12, r14 ' ADDI/P (1)
326c(0c7a): 0e 00 7c 5c '  jmp #JMPA
3270(0c7b): a4 32 00 00 '  long @C__doprnt_204 ' JUMPV addrg
3274(0c7c):             ' C__doprnt_203
3274(0c7c): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
3278(0c7d): 2d 7c bc a0 '  mov r11, FP
327c(0c7e): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
3280(0c7f): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
3284(0c80): 3e 7a bc a0 '  mov r10, r11
3288(0c81): 01 7a fc d0 '  adds r10, #1 ' ADDP4 coni
328c(0c82): 05 00 7c 5c '  jmp #LODF
3290(0c83): fc ff ff ff '  long -4
3294(0c84): 2e 7a 3c 08 '  wrlong r10, RI ' ASGNP4 addrl
3298(0c85): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
329c(0c86): 3e 6c bc a0 '  mov r3, r11 ' CVUI
32a0(0c87): 4d 6c bc 60 '  and r3, cviu_m1 ' zero extend
32a4(0c88): 08 5e fc a0 '  mov BC, #8 ' arg size
32a8(0c89): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
32ac(0c8a): 0b 00 7c 5c '  jmp #CALA
32b0(0c8b): fc 36 00 00 '  long @C_putc
32b4(0c8c): 08 58 fc 80 '  add SP, #8 ' CALL addrg
32b8(0c8d): 04 00 7c 5c '  jmp #LODA
32bc(0c8e): 10 3d 00 00 '  long @C__doprnt_L000071
32c0(0c8f): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
32c4(0c90): 3d 66 3c c2 '  cmps r0, r10 wz
32c8(0c91): 14 00 7c 5c '  jmp #BRNZ
32cc(0c92): a4 32 00 00 '  long @C__doprnt_206 ' NEI4
32d0(0c93): 00 7e 7c c2 '  cmps r12,  #0 wz
32d4(0c94): 13 00 7c 5c '  jmp #BR_Z
32d8(0c95): 78 32 00 00 '  long @C__doprnt_209 ' EQI4
32dc(0c96): 3f 7c bc a4 '  neg r11, r12 ' NEGI4
32e0(0c97): 05 00 7c 5c '  jmp #LODF
32e4(0c98): d0 fb ff ff '  long -1072
32e8(0c99): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
32ec(0c9a): 0e 00 7c 5c '  jmp #JMPA
32f0(0c9b): 90 32 00 00 '  long @C__doprnt_210 ' JUMPV addrg
32f4(0c9c):             ' C__doprnt_209
32f4(0c9c): 04 00 7c 5c '  jmp #LODA
32f8(0c9d): 10 3d 00 00 '  long @C__doprnt_L000071
32fc(0c9e): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
3300(0c9f): 05 00 7c 5c '  jmp #LODF
3304(0ca0): d0 fb ff ff '  long -1072
3308(0ca1): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
330c(0ca2):             ' C__doprnt_210
330c(0ca2): 05 00 7c 5c '  jmp #LODF
3310(0ca3): d0 fb ff ff '  long -1072
3314(0ca4): 2e 66 bc 08 '  rdlong r0, RI ' reg <- INDIRI4 addrl
3318(0ca5): 0e 00 7c 5c '  jmp #JMPA
331c(0ca6): d0 33 00 00 '  long @C__doprnt_63 ' JUMPV addrg
3320(0ca7):             ' C__doprnt_206
3320(0ca7):             ' C__doprnt_204
3320(0ca7): 41 7c bc a0 '  mov r11, r14
3324(0ca8): 01 7c fc d4 '  subs r11, #1 ' SUBI4 coni
3328(0ca9): 3e 82 bc a0 '  mov r14, r11 ' CVI, CVU or LOAD
332c(0caa): 00 7c 7c c3 '  cmps r11,  #0 wz,wc
3330(0cab): 15 00 7c 5c '  jmp #BRAE
3334(0cac): f8 31 00 00 '  long @C__doprnt_203 ' GEI4
3338(0cad): 2d 7c bc a0 '  mov r11, FP
333c(0cae): 08 7c fc 84 '  sub r11, #-(-8) ' reg <- addrli
3340(0caf): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
3344(0cb0): 00 7c 7c c3 '  cmps r11,  #0 wz,wc
3348(0cb1): 17 00 7c 5c '  jmp #BRBE
334c(0cb2): 78 33 00 00 '  long @C__doprnt_214 ' LEI4
3350(0cb3): 2d 7c bc a0 '  mov r11, FP
3354(0cb4): 08 7c fc 84 '  sub r11, #-(-8) ' reg <- addrli
3358(0cb5): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
335c(0cb6): 3e 7e bc d0 '  adds r12, r11 ' ADDI/P (1)
3360(0cb7): 0e 00 7c 5c '  jmp #JMPA
3364(0cb8): 78 33 00 00 '  long @C__doprnt_214 ' JUMPV addrg
3368(0cb9):             ' C__doprnt_213
3368(0cb9): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
336c(0cba): 2d 5c bc a0 '  mov RI, FP
3370(0cbb): 0c 5c fc 84 '  sub RI, #-(-12)
3374(0cbc): 2e 6c bc 08 '  rdlong r3, RI ' reg ARG INDIR ADDRLi
3378(0cbd): 08 5e fc a0 '  mov BC, #8 ' arg size
337c(0cbe): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
3380(0cbf): 0b 00 7c 5c '  jmp #CALA
3384(0cc0): fc 36 00 00 '  long @C_putc
3388(0cc1): 08 58 fc 80 '  add SP, #8 ' CALL addrg
338c(0cc2): 04 00 7c 5c '  jmp #LODA
3390(0cc3): 10 3d 00 00 '  long @C__doprnt_L000071
3394(0cc4): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
3398(0cc5): 3d 66 3c c2 '  cmps r0, r10 wz
339c(0cc6): 14 00 7c 5c '  jmp #BRNZ
33a0(0cc7): 78 33 00 00 '  long @C__doprnt_216 ' NEI4
33a4(0cc8): 00 7e 7c c2 '  cmps r12,  #0 wz
33a8(0cc9): 13 00 7c 5c '  jmp #BR_Z
33ac(0cca): 4c 33 00 00 '  long @C__doprnt_219 ' EQI4
33b0(0ccb): 3f 7c bc a4 '  neg r11, r12 ' NEGI4
33b4(0ccc): 05 00 7c 5c '  jmp #LODF
33b8(0ccd): d0 fb ff ff '  long -1072
33bc(0cce): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
33c0(0ccf): 0e 00 7c 5c '  jmp #JMPA
33c4(0cd0): 64 33 00 00 '  long @C__doprnt_220 ' JUMPV addrg
33c8(0cd1):             ' C__doprnt_219
33c8(0cd1): 04 00 7c 5c '  jmp #LODA
33cc(0cd2): 10 3d 00 00 '  long @C__doprnt_L000071
33d0(0cd3): 2e 7c bc 08 '  rdlong  r11, RI ' reg <- con
33d4(0cd4): 05 00 7c 5c '  jmp #LODF
33d8(0cd5): d0 fb ff ff '  long -1072
33dc(0cd6): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
33e0(0cd7):             ' C__doprnt_220
33e0(0cd7): 05 00 7c 5c '  jmp #LODF
33e4(0cd8): d0 fb ff ff '  long -1072
33e8(0cd9): 2e 66 bc 08 '  rdlong r0, RI ' reg <- INDIRI4 addrl
33ec(0cda): 0e 00 7c 5c '  jmp #JMPA
33f0(0cdb): d0 33 00 00 '  long @C__doprnt_63 ' JUMPV addrg
33f4(0cdc):             ' C__doprnt_216
33f4(0cdc):             ' C__doprnt_214
33f4(0cdc): 2d 7c bc a0 '  mov r11, FP
33f8(0cdd): 08 7c fc 84 '  sub r11, #-(-8) ' reg <- addrli
33fc(0cde): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRI4 reg
3400(0cdf): 01 7c fc d4 '  subs r11, #1 ' SUBI4 coni
3404(0ce0): 05 00 7c 5c '  jmp #LODF
3408(0ce1): f8 ff ff ff '  long -8
340c(0ce2): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
3410(0ce3): 00 7c 7c c3 '  cmps r11,  #0 wz,wc
3414(0ce4): 15 00 7c 5c '  jmp #BRAE
3418(0ce5): ec 32 00 00 '  long @C__doprnt_213 ' GEI4
341c(0ce6):             ' C__doprnt_65
341c(0ce6): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
3420(0ce7): 3e 88 bc a0 '  mov r17, r11
3424(0ce8): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
3428(0ce9): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
342c(0cea): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
3430(0ceb): 05 00 7c 5c '  jmp #LODF
3434(0cec): f0 ff ff ff '  long -16
3438(0ced): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNI4 addrl
343c(0cee): 00 7c 7c c2 '  cmps r11,  #0 wz
3440(0cef): 14 00 7c 5c '  jmp #BRNZ
3444(0cf0): 94 24 00 00 '  long @C__doprnt_64 ' NEI4
3448(0cf1): 3f 66 bc a0 '  mov r0, r12 ' CVI, CVU or LOAD
344c(0cf2):             ' C__doprnt_63
344c(0cf2): 23 00 7c 5c '  jmp #POPM
3450(0cf3): 00 fe 03 00 '  long $3fe00 ' restore registers
3454(0cf4): 03 00 7c 5c '  jmp #LODL
3458(0cf5): 30 04 00 00 '  long 1072
345c(0cf6): 2e 58 bc 80 '  add SP, RI ' framesize
3460(0cf7): 0a 00 7c 5c '  jmp #RETF
3464(0cf8):             '  long ' align long
3464(0cf8):             ' C_tmpfile7diLJI_4c2c6bf1__calls_L000003 ' <symbol:_calls>
3464(0cf8): 22 00 7c 5c '  jmp #PSHM
3468(0cf9): 00 0c 02 00 '  long $20c00 ' save registers
346c(0cfa): 04 00 7c 5c '  jmp #LODA
3470(0cfb): d8 3d 00 00 '  long @C___funccnt
3474(0cfc): 2e 88 bc 08 '  rdlong r17, RI ' reg <- INDIRI4 addrg
3478(0cfd): 0e 00 7c 5c '  jmp #JMPA
347c(0cfe): 2c 34 00 00 '  long @C_tmpfile7diLJI_4c2c6bf1__calls_L000003_6 ' JUMPV addrg
3480(0cff):             ' C_tmpfile7diLJI_4c2c6bf1__calls_L000003_5
3480(0cff): 44 7c bc a0 '  mov r11, r17
3484(0d00): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
3488(0d01): 04 00 7c 5c '  jmp #LODA
348c(0d02): 94 3e 00 00 '  long @C___functab
3490(0d03): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
3494(0d04): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
3498(0d05): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
349c(0d06): 00 5e fc a0 '  mov BC, #0 ' arg size
34a0(0d07): 3e 5c bc a0 '  mov RI, r11
34a4(0d08): 0d 00 7c 5c '  jmp #CALI ' CALL indirect
34a8(0d09):             ' C_tmpfile7diLJI_4c2c6bf1__calls_L000003_6
34a8(0d09): 44 7c bc a0 '  mov r11, r17
34ac(0d0a): 01 7c fc d4 '  subs r11, #1 ' SUBI4 coni
34b0(0d0b): 3e 88 bc a0 '  mov r17, r11 ' CVI, CVU or LOAD
34b4(0d0c): 00 7c 7c c3 '  cmps r11,  #0 wz,wc
34b8(0d0d): 15 00 7c 5c '  jmp #BRAE
34bc(0d0e): 04 34 00 00 '  long @C_tmpfile7diLJI_4c2c6bf1__calls_L000003_5 ' GEI4
34c0(0d0f): 23 00 7c 5c '  jmp #POPM
34c4(0d10): 00 0c 02 00 '  long $20c00 ' restore registers
34c8(0d11): 0c 00 7c 5c '  jmp #RETN
34cc(0d12):             '  long ' align long
34cc(0d12):             ' C_exit ' <symbol:exit>
34cc(0d12): 22 00 7c 5c '  jmp #PSHM
34d0(0d13): 00 08 02 00 '  long $20800 ' save registers
34d4(0d14): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
34d8(0d15): 00 5e fc a0 '  mov BC, #0 ' arg size
34dc(0d16): 0b 00 7c 5c '  jmp #CALA
34e0(0d17): e8 33 00 00 '  long @C_tmpfile7diLJI_4c2c6bf1__calls_L000003 ' CALL addrg
34e4(0d18): 04 00 7c 5c '  jmp #LODA
34e8(0d19): dc 3d 00 00 '  long @C__clean
34ec(0d1a): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRP4 addrg
34f0(0d1b): 00 7c 7c 86 '  cmp r11,  #0 wz
34f4(0d1c): 13 00 7c 5c '  jmp #BR_Z
34f8(0d1d): 98 34 00 00 '  long @C_exit_9 ' EQU4
34fc(0d1e): 04 00 7c 5c '  jmp #LODA
3500(0d1f): dc 3d 00 00 '  long @C__clean
3504(0d20): 2e 7c bc 08 '  rdlong r11, RI ' reg <- INDIRP4 addrg
3508(0d21): 00 5e fc a0 '  mov BC, #0 ' arg size
350c(0d22): 3e 5c bc a0 '  mov RI, r11
3510(0d23): 0d 00 7c 5c '  jmp #CALI ' CALL indirect
3514(0d24):             ' C_exit_9
3514(0d24): 44 6a bc a0 '  mov r2, r17 ' CVI, CVU or LOAD
3518(0d25): 04 5e fc a0 '  mov BC, #4 ' arg size
351c(0d26): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
3520(0d27): 0b 00 7c 5c '  jmp #CALA
3524(0d28): 6c 01 00 00 '  long @C__exit
3528(0d29): 04 58 fc 80 '  add SP, #4 ' CALL addrg
352c(0d2a): 23 00 7c 5c '  jmp #POPM
3530(0d2b): 00 08 02 00 '  long $20800 ' restore registers
3534(0d2c): 0c 00 7c 5c '  jmp #RETN
3538(0d2d):             '  long ' align long
3538(0d2d):             ' C_fputs ' <symbol:fputs>
3538(0d2d): 22 00 7c 5c '  jmp #PSHM
353c(0d2e): 00 8c 03 00 '  long $38c00 ' save registers
3540(0d2f): 36 88 bc a0 '  mov r17, r3 ' reg var <- reg arg
3544(0d30): 35 86 bc a0 '  mov r16, r2 ' reg var <- reg arg
3548(0d31): 00 84 fc a0 '  mov r15, #0 ' reg <- coni
354c(0d32): 0e 00 7c 5c '  jmp #JMPA
3550(0d33): 38 35 00 00 '  long @C_fputs_3 ' JUMPV addrg
3554(0d34):             ' C_fputs_2
3554(0d34): 43 6a bc a0 '  mov r2, r16 ' CVI, CVU or LOAD
3558(0d35): 44 7c bc a0 '  mov r11, r17 ' CVI, CVU or LOAD
355c(0d36): 3e 88 bc a0 '  mov r17, r11
3560(0d37): 01 88 fc d0 '  adds r17, #1 ' ADDP4 coni
3564(0d38): 3e 7c bc 00 '  rdbyte r11, r11 ' reg <- INDIRU1 reg
3568(0d39): 3e 6c bc a0 '  mov r3, r11 ' CVUI
356c(0d3a): 4d 6c bc 60 '  and r3, cviu_m1 ' zero extend
3570(0d3b): 08 5e fc a0 '  mov BC, #8 ' arg size
3574(0d3c): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
3578(0d3d): 0b 00 7c 5c '  jmp #CALA
357c(0d3e): fc 36 00 00 '  long @C_putc
3580(0d3f): 08 58 fc 80 '  add SP, #8 ' CALL addrg
3584(0d40): 04 00 7c 5c '  jmp #LODA
3588(0d41): 18 3d 00 00 '  long @C_fputs_L000007
358c(0d42): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
3590(0d43): 3d 66 3c c2 '  cmps r0, r10 wz
3594(0d44): 14 00 7c 5c '  jmp #BRNZ
3598(0d45): 34 35 00 00 '  long @C_fputs_5 ' NEI4
359c(0d46): 04 00 7c 5c '  jmp #LODA
35a0(0d47): 18 3d 00 00 '  long @C_fputs_L000007
35a4(0d48): 2e 66 bc 08 '  rdlong  r0, RI ' reg <- con
35a8(0d49): 0e 00 7c 5c '  jmp #JMPA
35ac(0d4a): 50 35 00 00 '  long @C_fputs_1 ' JUMPV addrg
35b0(0d4b):             ' C_fputs_5
35b0(0d4b): 01 84 fc d0 '  adds r15, #1 ' ADDI4 coni
35b4(0d4c):             ' C_fputs_3
35b4(0d4c): 44 7c bc 00 '  rdbyte r11, r17 ' reg <- INDIRU1 reg
35b8(0d4d): 4d 7c bc 60 '  and r11, cviu_m1 ' zero extend
35bc(0d4e): 00 7c 7c c2 '  cmps r11,  #0 wz
35c0(0d4f): 14 00 7c 5c '  jmp #BRNZ
35c4(0d50): d8 34 00 00 '  long @C_fputs_2 ' NEI4
35c8(0d51): 42 66 bc a0 '  mov r0, r15 ' CVI, CVU or LOAD
35cc(0d52):             ' C_fputs_1
35cc(0d52): 23 00 7c 5c '  jmp #POPM
35d0(0d53): 00 8c 03 00 '  long $38c00 ' restore registers
35d4(0d54): 0c 00 7c 5c '  jmp #RETN
35d8(0d55):             '  long ' align long
35d8(0d55):             ' C__i_compute ' <symbol:_i_compute>
35d8(0d55): 22 00 7c 5c '  jmp #PSHM
35dc(0d56): 00 fc 03 00 '  long $3fc00 ' save registers
35e0(0d57): 38 88 bc a0 '  mov r17, r5 ' reg var <- reg arg
35e4(0d58): 37 86 bc a0 '  mov r16, r4 ' reg var <- reg arg
35e8(0d59): 36 84 bc a0 '  mov r15, r3 ' reg var <- reg arg
35ec(0d5a): 35 82 bc a0 '  mov r14, r2 ' reg var <- reg arg
35f0(0d5b): 44 66 bc a0 '  mov r0, r17 ' setup r0/r1 (2)
35f4(0d5c): 43 68 bc a0 '  mov r1, r16 ' setup r0/r1 (2)
35f8(0d5d): 11 00 7c 5c '  jmp #DIVU ' DIVU
35fc(0d5e): 34 80 bc a0 '  mov r13, r1 ' CVI, CVU or LOAD
3600(0d5f): 44 66 bc a0 '  mov r0, r17 ' setup r0/r1 (2)
3604(0d60): 43 68 bc a0 '  mov r1, r16 ' setup r0/r1 (2)
3608(0d61): 11 00 7c 5c '  jmp #DIVU ' DIVU
360c(0d62): 33 88 bc a0 '  mov r17, r0 ' CVI, CVU or LOAD
3610(0d63): 00 88 7c 86 '  cmp r17,  #0 wz
3614(0d64): 14 00 7c 5c '  jmp #BRNZ
3618(0d65): ac 35 00 00 '  long @C__i_compute_4 ' NEU4
361c(0d66): 01 82 7c c3 '  cmps r14,  #1 wz,wc
3620(0d67): 17 00 7c 5c '  jmp #BRBE
3624(0d68): d8 35 00 00 '  long @C__i_compute_2 ' LEI4
3628(0d69):             ' C__i_compute_4
3628(0d69): 41 6a bc a0 '  mov r2, r14
362c(0d6a): 01 6a fc d4 '  subs r2, #1 ' SUBI4 coni
3630(0d6b): 42 6c bc a0 '  mov r3, r15 ' CVI, CVU or LOAD
3634(0d6c): 43 6e bc a0 '  mov r4, r16 ' CVI, CVU or LOAD
3638(0d6d): 44 70 bc a0 '  mov r5, r17 ' CVI, CVU or LOAD
363c(0d6e): 10 5e fc a0 '  mov BC, #16 ' arg size
3640(0d6f): 10 58 fc 84 '  sub SP, #16 ' stack space for reg ARGs
3644(0d70): 0b 00 7c 5c '  jmp #CALA
3648(0d71): 5c 35 00 00 '  long @C__i_compute
364c(0d72): 10 58 fc 80 '  add SP, #16 ' CALL addrg
3650(0d73): 33 84 bc a0 '  mov r15, r0 ' CVI, CVU or LOAD
3654(0d74):             ' C__i_compute_2
3654(0d74): 42 7c bc a0 '  mov r11, r15 ' CVI, CVU or LOAD
3658(0d75): 3e 84 bc a0 '  mov r15, r11
365c(0d76): 01 84 fc d0 '  adds r15, #1 ' ADDP4 coni
3660(0d77): 09 80 7c c3 '  cmps r13,  #9 wz,wc
3664(0d78): 17 00 7c 5c '  jmp #BRBE
3668(0d79): 08 36 00 00 '  long @C__i_compute_6 ' LEI4
366c(0d7a): 40 7a bc a0 '  mov r10, r13
3670(0d7b): 0a 7a fc d4 '  subs r10, #10 ' SUBI4 coni
3674(0d7c): 3d 7e bc a0 '  mov r12, r10
3678(0d7d): 61 7e fc d0 '  adds r12, #97 ' ADDI4 coni
367c(0d7e): 0e 00 7c 5c '  jmp #JMPA
3680(0d7f): 10 36 00 00 '  long @C__i_compute_7 ' JUMPV addrg
3684(0d80):             ' C__i_compute_6
3684(0d80): 40 7e bc a0 '  mov r12, r13
3688(0d81): 30 7e fc d0 '  adds r12, #48 ' ADDI4 coni
368c(0d82):             ' C__i_compute_7
368c(0d82): 3f 7a bc a0 '  mov r10, r12 ' CVI, CVU or LOAD
3690(0d83): 3e 7a 3c 00 '  wrbyte r10, r11 ' ASGNU1 reg
3694(0d84): 42 66 bc a0 '  mov r0, r15 ' CVI, CVU or LOAD
3698(0d85): 23 00 7c 5c '  jmp #POPM
369c(0d86): 00 fc 03 00 '  long $3fc00 ' restore registers
36a0(0d87): 0c 00 7c 5c '  jmp #RETN
36a4(0d88):             '  long ' align long
36a4(0d88):             ' C__ina
36a4(0d88): f2 67 bc a0 '  mov r0, INA
36a8(0d89): 0c 00 7c 5c '  jmp #RETN
36ac(0d8a):             '  long ' align long
36ac(0d8a):             ' C__outa
36ac(0d8a): f4 67 bc a0 '  mov r0, OUTA
36b0(0d8b): 36 e8 bf 64 '  andn OUTA, r3
36b4(0d8c): 35 e8 bf 68 '  or OUTA, r2
36b8(0d8d): 0c 00 7c 5c '  jmp #RETN
36bc(0d8e):             '  long ' align long
36bc(0d8e):             ' C_printf ' <symbol:printf>
36bc(0d8e): 09 00 7c 5c '  jmp #NEWF
36c0(0d8f): 08 58 fc 84 '  sub SP, #8
36c4(0d90): 22 00 7c 5c '  jmp #PSHM
36c8(0d91): 00 08 00 00 '  long $800 ' save registers
36cc(0d92): 2d 5c bc a0 '  mov RI, FP
36d0(0d93): 08 5c fc 80 '  add RI, #8
36d4(0d94): 04 5e fc 84 '  sub BC, #4
36d8(0d95): 2e 5e 3c 87 '  cmp BC, RI wz,wc
36dc(0d96): 2f 6a 0c 08 '  if_ae wrlong r2, BC ' spill reg (varadic)
36e0(0d97): 04 5e fc 84 '  sub BC, #4
36e4(0d98): 2e 5e 3c 87 '  cmp BC, RI wz,wc
36e8(0d99): 2f 6c 0c 08 '  if_ae wrlong r3, BC ' spill reg (varadic)
36ec(0d9a): 04 5e fc 84 '  sub BC, #4
36f0(0d9b): 2e 5e 3c 87 '  cmp BC, RI wz,wc
36f4(0d9c): 2f 6e 0c 08 '  if_ae wrlong r4, BC ' spill reg (varadic)
36f8(0d9d): 04 5e fc 84 '  sub BC, #4
36fc(0d9e): 2e 5e 3c 87 '  cmp BC, RI wz,wc
3700(0d9f): 2f 70 0c 08 '  if_ae wrlong r5, BC ' spill reg (varadic)
3704(0da0): 2d 7c bc a0 '  mov r11, FP
3708(0da1): 0c 7c fc 80 '  add r11, #12 ' reg <- addrfi
370c(0da2): 05 00 7c 5c '  jmp #LODF
3710(0da3): fc ff ff ff '  long -4
3714(0da4): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
3718(0da5): 04 00 7c 5c '  jmp #LODA
371c(0da6): 58 3d 00 00 '  long @C___stdout
3720(0da7): 2e 6a bc a0 '  mov r2, RI ' reg ARG ADDRG
3724(0da8): 2d 5c bc a0 '  mov RI, FP
3728(0da9): 04 5c fc 84 '  sub RI, #-(-4)
372c(0daa): 2e 6c bc 08 '  rdlong r3, RI ' reg ARG INDIR ADDRLi
3730(0dab): 2d 5c bc a0 '  mov RI, FP
3734(0dac): 08 5c fc 80 '  add RI, #8
3738(0dad): 2e 6e bc 08 '  rdlong r4, RI ' reg ARG INDIR ADDRFi
373c(0dae): 0c 5e fc a0 '  mov BC, #12 ' arg size
3740(0daf): 0c 58 fc 84 '  sub SP, #12 ' stack space for reg ARGs
3744(0db0): 0b 00 7c 5c '  jmp #CALA
3748(0db1): 5c 24 00 00 '  long @C__doprnt
374c(0db2): 0c 58 fc 80 '  add SP, #12 ' CALL addrg
3750(0db3): 05 00 7c 5c '  jmp #LODF
3754(0db4): f8 ff ff ff '  long -8
3758(0db5): 2e 66 3c 08 '  wrlong r0, RI ' ASGNI4 addrl
375c(0db6): 2d 7c bc a0 '  mov r11, FP
3760(0db7): 08 7c fc 84 '  sub r11, #-(-8) ' reg <- addrli
3764(0db8): 3e 66 bc 08 '  rdlong r0, r11 ' reg <- INDIRI4 reg
3768(0db9): 23 00 7c 5c '  jmp #POPM
376c(0dba): 00 08 00 00 '  long $800 ' restore registers
3770(0dbb): 08 58 fc 80 '  add SP, #8 ' framesize
3774(0dbc): 0a 00 7c 5c '  jmp #RETF
3778(0dbd):             '  long ' align long
3778(0dbd):             ' C_putc ' <symbol:putc>
3778(0dbd): 22 00 7c 5c '  jmp #PSHM
377c(0dbe): 00 08 03 00 '  long $30800 ' save registers
3780(0dbf): 36 88 bc a0 '  mov r17, r3 ' reg var <- reg arg
3784(0dc0): 35 86 bc a0 '  mov r16, r2 ' reg var <- reg arg
3788(0dc1): 44 6c bc a0 '  mov r3, r17 ' CVI, CVU or LOAD
378c(0dc2): 08 5e fc a0 '  mov BC, #8 ' arg size
3790(0dc3): 08 58 fc 84 '  sub SP, #8 ' stack space for reg ARGs
3794(0dc4): 0b 00 7c 5c '  jmp #CALA
3798(0dc5): e4 1c 00 00 '  long @C_catalina_putc
379c(0dc6): 08 58 fc 80 '  add SP, #8 ' CALL addrg
37a0(0dc7): 33 7c bc a0 '  mov r11, r0 ' CVI, CVU or LOAD
37a4(0dc8): 23 00 7c 5c '  jmp #POPM
37a8(0dc9): 00 08 03 00 '  long $30800 ' restore registers
37ac(0dca): 0c 00 7c 5c '  jmp #RETN
37b0(0dcb):             '  long ' align long
37b0(0dcb):             ' C_raise ' <symbol:raise>
37b0(0dcb): 09 00 7c 5c '  jmp #NEWF
37b4(0dcc): 04 58 fc 84 '  sub SP, #4
37b8(0dcd): 22 00 7c 5c '  jmp #PSHM
37bc(0dce): 00 0c 02 00 '  long $20c00 ' save registers
37c0(0dcf): 35 88 bc a0 '  mov r17, r2 ' reg var <- reg arg
37c4(0dd0): 00 88 7c c3 '  cmps r17,  #0 wz,wc
37c8(0dd1): 18 00 7c 5c '  jmp #BR_B
37cc(0dd2): 60 37 00 00 '  long @C_raise_5 ' LTI4
37d0(0dd3): 10 88 7c c3 '  cmps r17,  #16 wz,wc
37d4(0dd4): 17 00 7c 5c '  jmp #BRBE
37d8(0dd5): 74 37 00 00 '  long @C_raise_3 ' LEI4
37dc(0dd6):             ' C_raise_5
37dc(0dd6): 04 00 7c 5c '  jmp #LODA
37e0(0dd7): 20 3d 00 00 '  long @C_raise_L000006
37e4(0dd8): 2e 66 bc 08 '  rdlong  r0, RI ' reg <- con
37e8(0dd9): 0e 00 7c 5c '  jmp #JMPA
37ec(0dda): 1c 38 00 00 '  long @C_raise_2 ' JUMPV addrg
37f0(0ddb):             ' C_raise_3
37f0(0ddb): 44 7c bc a0 '  mov r11, r17
37f4(0ddc): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
37f8(0ddd): 04 00 7c 5c '  jmp #LODA
37fc(0dde): e0 3d 00 00 '  long @C_tmpfilenOxQ8q_4c2c6bf0__sig_handler_L000001
3800(0ddf): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
3804(0de0): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
3808(0de1): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
380c(0de2): 05 00 7c 5c '  jmp #LODF
3810(0de3): fc ff ff ff '  long -4
3814(0de4): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
3818(0de5): 2d 7c bc a0 '  mov r11, FP
381c(0de6): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
3820(0de7): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
3824(0de8): 01 7c 7c 86 '  cmp r11,  #1 wz
3828(0de9): 13 00 7c 5c '  jmp #BR_Z
382c(0dea): d8 37 00 00 '  long @C_raise_9 ' EQU4
3830(0deb): 44 6a bc a0 '  mov r2, r17 ' CVI, CVU or LOAD
3834(0dec): 2d 7c bc a0 '  mov r11, FP
3838(0ded): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
383c(0dee): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
3840(0def): 04 5e fc a0 '  mov BC, #4 ' arg size
3844(0df0): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
3848(0df1): 3e 5c bc a0 '  mov RI, r11
384c(0df2): 0d 00 7c 5c '  jmp #CALI
3850(0df3): 04 58 fc 80 '  add SP, #4 ' CALL indirect
3854(0df4):             ' C_raise_9
3854(0df4): 06 88 7c c2 '  cmps r17,  #6 wz
3858(0df5): 14 00 7c 5c '  jmp #BRNZ
385c(0df6): 0c 38 00 00 '  long @C_raise_11 ' NEI4
3860(0df7): 04 00 7c 5c '  jmp #LODA
3864(0df8): 20 3d 00 00 '  long @C_raise_L000006
3868(0df9): 2e 6a bc 08 '  rdlong r2, RI ' reg ARG con
386c(0dfa): 04 5e fc a0 '  mov BC, #4 ' arg size
3870(0dfb): 04 58 fc 84 '  sub SP, #4 ' stack space for reg ARGs
3874(0dfc): 0b 00 7c 5c '  jmp #CALA
3878(0dfd): 50 34 00 00 '  long @C_exit
387c(0dfe): 04 58 fc 80 '  add SP, #4 ' CALL addrg
3880(0dff): 0e 00 7c 5c '  jmp #JMPA
3884(0e00): 18 38 00 00 '  long @C_raise_12 ' JUMPV addrg
3888(0e01):             ' C_raise_11
3888(0e01): 00 66 fc a0 '  mov r0, #0 ' RET coni
388c(0e02): 0e 00 7c 5c '  jmp #JMPA
3890(0e03): 1c 38 00 00 '  long @C_raise_2 ' JUMPV addrg
3894(0e04):             ' C_raise_12
3894(0e04): 00 66 fc a0 '  mov r0, #0 ' RET coni
3898(0e05):             ' C_raise_2
3898(0e05): 23 00 7c 5c '  jmp #POPM
389c(0e06): 00 0c 02 00 '  long $20c00 ' restore registers
38a0(0e07): 04 58 fc 80 '  add SP, #4 ' framesize
38a4(0e08): 0a 00 7c 5c '  jmp #RETF
38a8(0e09):             '  long ' align long
38a8(0e09):             ' C_signal ' <symbol:signal>
38a8(0e09): 09 00 7c 5c '  jmp #NEWF
38ac(0e0a): 04 58 fc 84 '  sub SP, #4
38b0(0e0b): 22 00 7c 5c '  jmp #PSHM
38b4(0e0c): 00 0c 00 00 '  long $c00 ' save registers
38b8(0e0d): 00 6c 7c c3 '  cmps r3,  #0 wz,wc
38bc(0e0e): 18 00 7c 5c '  jmp #BR_B
38c0(0e0f): 54 38 00 00 '  long @C_signal_16 ' LTI4
38c4(0e10): 10 6c 7c c3 '  cmps r3,  #16 wz,wc
38c8(0e11): 17 00 7c 5c '  jmp #BRBE
38cc(0e12): 68 38 00 00 '  long @C_signal_14 ' LEI4
38d0(0e13):             ' C_signal_16
38d0(0e13): 04 00 7c 5c '  jmp #LODA
38d4(0e14): 20 3d 00 00 '  long @C_raise_L000006
38d8(0e15): 2e 66 bc 08 '  rdlong  r0, RI ' reg <- con
38dc(0e16): 0e 00 7c 5c '  jmp #JMPA
38e0(0e17): f8 38 00 00 '  long @C_signal_13 ' JUMPV addrg
38e4(0e18):             ' C_signal_14
38e4(0e18): 36 7c bc a0 '  mov r11, r3
38e8(0e19): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
38ec(0e1a): 04 00 7c 5c '  jmp #LODA
38f0(0e1b): e0 3d 00 00 '  long @C_tmpfilenOxQ8q_4c2c6bf0__sig_handler_L000001
38f4(0e1c): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
38f8(0e1d): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
38fc(0e1e): 3e 7c bc 08 '  rdlong r11, r11 ' reg <- INDIRP4 reg
3900(0e1f): 05 00 7c 5c '  jmp #LODF
3904(0e20): fc ff ff ff '  long -4
3908(0e21): 2e 7c 3c 08 '  wrlong r11, RI ' ASGNP4 addrl
390c(0e22): 35 7c bc a0 '  mov r11, r2 ' CVI, CVU or LOAD
3910(0e23): 00 7c 7c 86 '  cmp r11,  #0 wz
3914(0e24): 14 00 7c 5c '  jmp #BRNZ
3918(0e25): d0 38 00 00 '  long @C_signal_19 ' NEU4
391c(0e26): 36 7c bc a0 '  mov r11, r3
3920(0e27): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
3924(0e28): 04 00 7c 5c '  jmp #LODA
3928(0e29): e0 3d 00 00 '  long @C_tmpfilenOxQ8q_4c2c6bf0__sig_handler_L000001
392c(0e2a): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
3930(0e2b): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
3934(0e2c): 04 00 7c 5c '  jmp #LODA
3938(0e2d): 1c 3d 00 00 '  long @C_signal_L000022
393c(0e2e): 2e 7a bc 08 '  rdlong  r10, RI ' reg <- con
3940(0e2f): 3e 7a 3c 08 '  wrlong r10, r11 ' ASGNP4 reg
3944(0e30): 0e 00 7c 5c '  jmp #JMPA
3948(0e31): ec 38 00 00 '  long @C_signal_20 ' JUMPV addrg
394c(0e32):             ' C_signal_19
394c(0e32): 36 7c bc a0 '  mov r11, r3
3950(0e33): 02 7c fc 2c '  shl r11, #2 ' LSHI4 coni
3954(0e34): 04 00 7c 5c '  jmp #LODA
3958(0e35): e0 3d 00 00 '  long @C_tmpfilenOxQ8q_4c2c6bf0__sig_handler_L000001
395c(0e36): 2e 7a bc a0 '  mov r10, RI ' reg <- addrg
3960(0e37): 3d 7c bc d0 '  adds r11, r10 ' ADDI/P (1)
3964(0e38): 3e 6a 3c 08 '  wrlong r2, r11 ' ASGNP4 reg
3968(0e39):             ' C_signal_20
3968(0e39): 2d 7c bc a0 '  mov r11, FP
396c(0e3a): 04 7c fc 84 '  sub r11, #-(-4) ' reg <- addrli
3970(0e3b): 3e 66 bc 08 '  rdlong r0, r11 ' reg <- INDIRP4 reg
3974(0e3c):             ' C_signal_13
3974(0e3c): 23 00 7c 5c '  jmp #POPM
3978(0e3d): 00 0c 00 00 '  long $c00 ' restore registers
397c(0e3e): 04 58 fc 80 '  add SP, #4 ' framesize
3980(0e3f): 0a 00 7c 5c '  jmp #RETF
3984(0e40):             '  long ' align long
3984(0e40):             ' C_toupper ' <symbol:toupper>
3984(0e40): 22 00 7c 5c '  jmp #PSHM
3988(0e41): 00 08 02 00 '  long $20800 ' save registers
398c(0e42): 35 7c bc a0 '  mov r11, r2
3990(0e43): 61 7c fc d4 '  subs r11, #97 ' SUBI4 coni
3994(0e44): 1a 7c 7c 87 '  cmp r11,  #26 wz,wc 
3998(0e45): 15 00 7c 5c '  jmp #BRAE
399c(0e46): 3c 39 00 00 '  long @C_toupper_3 ' GEU4
39a0(0e47): 35 7c bc a0 '  mov r11, r2
39a4(0e48): 61 7c fc d4 '  subs r11, #97 ' SUBI4 coni
39a8(0e49): 3e 88 bc a0 '  mov r17, r11
39ac(0e4a): 41 88 fc d0 '  adds r17, #65 ' ADDI4 coni
39b0(0e4b): 0e 00 7c 5c '  jmp #JMPA
39b4(0e4c): 40 39 00 00 '  long @C_toupper_4 ' JUMPV addrg
39b8(0e4d):             ' C_toupper_3
39b8(0e4d): 35 88 bc a0 '  mov r17, r2 ' CVI, CVU or LOAD
39bc(0e4e):             ' C_toupper_4
39bc(0e4e): 44 66 bc a0 '  mov r0, r17 ' CVI, CVU or LOAD
39c0(0e4f): 23 00 7c 5c '  jmp #POPM
39c4(0e50): 00 08 02 00 '  long $20800 ' restore registers
39c8(0e51): 0c 00 7c 5c '  jmp #RETN
39cc(0e52):             '  long ' align long
39cc(0e52):             ' C__waitcnt
39cc(0e52): 00 6a fc f8 '  waitcnt r2, #0
39d0(0e53): 0c 00 7c 5c '  jmp #RETN
39d4(0e54):             '  long ' align long
39d4(0e54):             ' Catalina_Cnst
39d4(0e54):             '  long ' align long
39d4(0e54):             ' C_bbos_stop_thread_14_L000015 ' <symbol:14>
39d4(0e54): 41          '  byte 65
39d5(----): 73          '  byte 115
39d6(----): 73          '  byte 115
39d7(----): 65          '  byte 101
39d8(0e55): 72          '  byte 114
39d9(----): 74          '  byte 116
39da(----): 69          '  byte 105
39db(----): 6f          '  byte 111
39dc(0e56): 6e          '  byte 110
39dd(----): 20          '  byte 32
39de(----): 22          '  byte 34
39df(----): 74          '  byte 116
39e0(0e57): 69          '  byte 105
39e1(----): 64          '  byte 100
39e2(----): 20          '  byte 32
39e3(----): 3c          '  byte 60
39e4(0e58): 20          '  byte 32
39e5(----): 42          '  byte 66
39e6(----): 42          '  byte 66
39e7(----): 4f          '  byte 79
39e8(0e59): 53          '  byte 83
39e9(----): 5f          '  byte 95
39ea(----): 4e          '  byte 78
39eb(----): 55          '  byte 85
39ec(0e5a): 4d          '  byte 77
39ed(----): 42          '  byte 66
39ee(----): 45          '  byte 69
39ef(----): 52          '  byte 82
39f0(0e5b): 5f          '  byte 95
39f1(----): 4f          '  byte 79
39f2(----): 46          '  byte 70
39f3(----): 5f          '  byte 95
39f4(0e5c): 54          '  byte 84
39f5(----): 48          '  byte 72
39f6(----): 52          '  byte 82
39f7(----): 45          '  byte 69
39f8(0e5d): 41          '  byte 65
39f9(----): 44          '  byte 68
39fa(----): 53          '  byte 83
39fb(----): 22          '  byte 34
39fc(0e5e): 20          '  byte 32
39fd(----): 66          '  byte 102
39fe(----): 61          '  byte 97
39ff(----): 69          '  byte 105
3a00(0e5f): 6c          '  byte 108
3a01(----): 65          '  byte 101
3a02(----): 64          '  byte 100
3a03(----): 2c          '  byte 44
3a04(0e60): 20          '  byte 32
3a05(----): 66          '  byte 102
3a06(----): 69          '  byte 105
3a07(----): 6c          '  byte 108
3a08(0e61): 65          '  byte 101
3a09(----): 20          '  byte 32
3a0a(----): 22          '  byte 34
3a0b(----): 2e          '  byte 46
3a0c(0e62): 2e          '  byte 46
3a0d(----): 2f          '  byte 47
3a0e(----): 2e          '  byte 46
3a0f(----): 2e          '  byte 46
3a10(0e63): 2f          '  byte 47
3a11(----): 62          '  byte 98
3a12(----): 62          '  byte 98
3a13(----): 6f          '  byte 111
3a14(0e64): 73          '  byte 115
3a15(----): 2f          '  byte 47
3a16(----): 6b          '  byte 107
3a17(----): 65          '  byte 101
3a18(0e65): 72          '  byte 114
3a19(----): 6e          '  byte 110
3a1a(----): 65          '  byte 101
3a1b(----): 6c          '  byte 108
3a1c(0e66): 2f          '  byte 47
3a1d(----): 73          '  byte 115
3a1e(----): 79          '  byte 121
3a1f(----): 73          '  byte 115
3a20(0e67): 74          '  byte 116
3a21(----): 65          '  byte 101
3a22(----): 6d          '  byte 109
3a23(----): 2e          '  byte 46
3a24(0e68): 63          '  byte 99
3a25(----): 22          '  byte 34
3a26(----): 2c          '  byte 44
3a27(----): 20          '  byte 32
3a28(0e69): 6c          '  byte 108
3a29(----): 69          '  byte 105
3a2a(----): 6e          '  byte 110
3a2b(----): 65          '  byte 101
3a2c(0e6a): 20          '  byte 32
3a2d(----): 38          '  byte 56
3a2e(----): 31          '  byte 49
3a2f(----): 0a          '  byte 10
3a30(0e6b): 00          '  byte 0
3a31(----): 00 00 00    
3a34(0e6c):             '  long ' align long
3a34(0e6c):             ' C_bbos_start_thread_9_L000010 ' <symbol:9>
3a34(0e6c): 41          '  byte 65
3a35(----): 73          '  byte 115
3a36(----): 73          '  byte 115
3a37(----): 65          '  byte 101
3a38(0e6d): 72          '  byte 114
3a39(----): 74          '  byte 116
3a3a(----): 69          '  byte 105
3a3b(----): 6f          '  byte 111
3a3c(0e6e): 6e          '  byte 110
3a3d(----): 20          '  byte 32
3a3e(----): 22          '  byte 34
3a3f(----): 74          '  byte 116
3a40(0e6f): 69          '  byte 105
3a41(----): 64          '  byte 100
3a42(----): 20          '  byte 32
3a43(----): 3c          '  byte 60
3a44(0e70): 20          '  byte 32
3a45(----): 42          '  byte 66
3a46(----): 42          '  byte 66
3a47(----): 4f          '  byte 79
3a48(0e71): 53          '  byte 83
3a49(----): 5f          '  byte 95
3a4a(----): 4e          '  byte 78
3a4b(----): 55          '  byte 85
3a4c(0e72): 4d          '  byte 77
3a4d(----): 42          '  byte 66
3a4e(----): 45          '  byte 69
3a4f(----): 52          '  byte 82
3a50(0e73): 5f          '  byte 95
3a51(----): 4f          '  byte 79
3a52(----): 46          '  byte 70
3a53(----): 5f          '  byte 95
3a54(0e74): 54          '  byte 84
3a55(----): 48          '  byte 72
3a56(----): 52          '  byte 82
3a57(----): 45          '  byte 69
3a58(0e75): 41          '  byte 65
3a59(----): 44          '  byte 68
3a5a(----): 53          '  byte 83
3a5b(----): 22          '  byte 34
3a5c(0e76): 20          '  byte 32
3a5d(----): 66          '  byte 102
3a5e(----): 61          '  byte 97
3a5f(----): 69          '  byte 105
3a60(0e77): 6c          '  byte 108
3a61(----): 65          '  byte 101
3a62(----): 64          '  byte 100
3a63(----): 2c          '  byte 44
3a64(0e78): 20          '  byte 32
3a65(----): 66          '  byte 102
3a66(----): 69          '  byte 105
3a67(----): 6c          '  byte 108
3a68(0e79): 65          '  byte 101
3a69(----): 20          '  byte 32
3a6a(----): 22          '  byte 34
3a6b(----): 2e          '  byte 46
3a6c(0e7a): 2e          '  byte 46
3a6d(----): 2f          '  byte 47
3a6e(----): 2e          '  byte 46
3a6f(----): 2e          '  byte 46
3a70(0e7b): 2f          '  byte 47
3a71(----): 62          '  byte 98
3a72(----): 62          '  byte 98
3a73(----): 6f          '  byte 111
3a74(0e7c): 73          '  byte 115
3a75(----): 2f          '  byte 47
3a76(----): 6b          '  byte 107
3a77(----): 65          '  byte 101
3a78(0e7d): 72          '  byte 114
3a79(----): 6e          '  byte 110
3a7a(----): 65          '  byte 101
3a7b(----): 6c          '  byte 108
3a7c(0e7e): 2f          '  byte 47
3a7d(----): 73          '  byte 115
3a7e(----): 79          '  byte 121
3a7f(----): 73          '  byte 115
3a80(0e7f): 74          '  byte 116
3a81(----): 65          '  byte 101
3a82(----): 6d          '  byte 109
3a83(----): 2e          '  byte 46
3a84(0e80): 63          '  byte 99
3a85(----): 22          '  byte 34
3a86(----): 2c          '  byte 44
3a87(----): 20          '  byte 32
3a88(0e81): 6c          '  byte 108
3a89(----): 69          '  byte 105
3a8a(----): 6e          '  byte 110
3a8b(----): 65          '  byte 101
3a8c(0e82): 20          '  byte 32
3a8d(----): 36          '  byte 54
3a8e(----): 31          '  byte 49
3a8f(----): 0a          '  byte 10
3a90(0e83): 00          '  byte 0
3a91(----): 00 00 00    
3a94(0e84):             '  long ' align long
3a94(0e84):             ' C_bbos_stop_thread_L000019 ' <symbol:20>
3a94(0e84): 00 00 00 00 '  long 0
3a98(0e85):             '  long ' align long
3a98(0e85):             ' C_bbos_switch_thread_4_L000005 ' <symbol:4>
3a98(0e85): 41          '  byte 65
3a99(----): 73          '  byte 115
3a9a(----): 73          '  byte 115
3a9b(----): 65          '  byte 101
3a9c(0e86): 72          '  byte 114
3a9d(----): 74          '  byte 116
3a9e(----): 69          '  byte 105
3a9f(----): 6f          '  byte 111
3aa0(0e87): 6e          '  byte 110
3aa1(----): 20          '  byte 32
3aa2(----): 22          '  byte 34
3aa3(----): 62          '  byte 98
3aa4(0e88): 62          '  byte 98
3aa5(----): 6f          '  byte 111
3aa6(----): 73          '  byte 115
3aa7(----): 5f          '  byte 95
3aa8(0e89): 73          '  byte 115
3aa9(----): 63          '  byte 99
3aaa(----): 68          '  byte 104
3aab(----): 65          '  byte 101
3aac(0e8a): 64          '  byte 100
3aad(----): 5f          '  byte 95
3aae(----): 6d          '  byte 109
3aaf(----): 79          '  byte 121
3ab0(0e8b): 73          '  byte 115
3ab1(----): 65          '  byte 101
3ab2(----): 6c          '  byte 108
3ab3(----): 66          '  byte 102
3ab4(0e8c): 28          '  byte 40
3ab5(----): 29          '  byte 41
3ab6(----): 20          '  byte 32
3ab7(----): 3c          '  byte 60
3ab8(0e8d): 20          '  byte 32
3ab9(----): 42          '  byte 66
3aba(----): 42          '  byte 66
3abb(----): 4f          '  byte 79
3abc(0e8e): 53          '  byte 83
3abd(----): 5f          '  byte 95
3abe(----): 4e          '  byte 78
3abf(----): 55          '  byte 85
3ac0(0e8f): 4d          '  byte 77
3ac1(----): 42          '  byte 66
3ac2(----): 45          '  byte 69
3ac3(----): 52          '  byte 82
3ac4(0e90): 5f          '  byte 95
3ac5(----): 4f          '  byte 79
3ac6(----): 46          '  byte 70
3ac7(----): 5f          '  byte 95
3ac8(0e91): 54          '  byte 84
3ac9(----): 48          '  byte 72
3aca(----): 52          '  byte 82
3acb(----): 45          '  byte 69
3acc(0e92): 41          '  byte 65
3acd(----): 44          '  byte 68
3ace(----): 53          '  byte 83
3acf(----): 22          '  byte 34
3ad0(0e93): 20          '  byte 32
3ad1(----): 66          '  byte 102
3ad2(----): 61          '  byte 97
3ad3(----): 69          '  byte 105
3ad4(0e94): 6c          '  byte 108
3ad5(----): 65          '  byte 101
3ad6(----): 64          '  byte 100
3ad7(----): 2c          '  byte 44
3ad8(0e95): 20          '  byte 32
3ad9(----): 66          '  byte 102
3ada(----): 69          '  byte 105
3adb(----): 6c          '  byte 108
3adc(0e96): 65          '  byte 101
3add(----): 20          '  byte 32
3ade(----): 22          '  byte 34
3adf(----): 2e          '  byte 46
3ae0(0e97): 2e          '  byte 46
3ae1(----): 2f          '  byte 47
3ae2(----): 2e          '  byte 46
3ae3(----): 2e          '  byte 46
3ae4(0e98): 2f          '  byte 47
3ae5(----): 62          '  byte 98
3ae6(----): 62          '  byte 98
3ae7(----): 6f          '  byte 111
3ae8(0e99): 73          '  byte 115
3ae9(----): 2f          '  byte 47
3aea(----): 6b          '  byte 107
3aeb(----): 65          '  byte 101
3aec(0e9a): 72          '  byte 114
3aed(----): 6e          '  byte 110
3aee(----): 65          '  byte 101
3aef(----): 6c          '  byte 108
3af0(0e9b): 2f          '  byte 47
3af1(----): 73          '  byte 115
3af2(----): 79          '  byte 121
3af3(----): 73          '  byte 115
3af4(0e9c): 74          '  byte 116
3af5(----): 65          '  byte 101
3af6(----): 6d          '  byte 109
3af7(----): 2e          '  byte 46
3af8(0e9d): 63          '  byte 99
3af9(----): 22          '  byte 34
3afa(----): 2c          '  byte 44
3afb(----): 20          '  byte 32
3afc(0e9e): 6c          '  byte 108
3afd(----): 69          '  byte 105
3afe(----): 6e          '  byte 110
3aff(----): 65          '  byte 101
3b00(0e9f): 20          '  byte 32
3b01(----): 34          '  byte 52
3b02(----): 32          '  byte 50
3b03(----): 0a          '  byte 10
3b04(0ea0): 00          '  byte 0
3b05(----): 00 00 00    
3b08(0ea1):             '  long ' align long
3b08(0ea1):             ' C_bbos_port_send_L000011 ' <symbol:12>
3b08(0ea1): 00 00 00 00 '  long 0
3b0c(0ea2):             '  long ' align long
3b0c(0ea2):             ' C_bbos_thread_execute_5_L000006 ' <symbol:5>
3b0c(0ea2): 41          '  byte 65
3b0d(----): 73          '  byte 115
3b0e(----): 73          '  byte 115
3b0f(----): 65          '  byte 101
3b10(0ea3): 72          '  byte 114
3b11(----): 74          '  byte 116
3b12(----): 69          '  byte 105
3b13(----): 6f          '  byte 111
3b14(0ea4): 6e          '  byte 110
3b15(----): 20          '  byte 32
3b16(----): 22          '  byte 34
3b17(----): 62          '  byte 98
3b18(0ea5): 62          '  byte 98
3b19(----): 6f          '  byte 111
3b1a(----): 73          '  byte 115
3b1b(----): 5f          '  byte 95
3b1c(0ea6): 74          '  byte 116
3b1d(----): 68          '  byte 104
3b1e(----): 72          '  byte 114
3b1f(----): 65          '  byte 101
3b20(0ea7): 61          '  byte 97
3b21(----): 64          '  byte 100
3b22(----): 5f          '  byte 95
3b23(----): 74          '  byte 116
3b24(0ea8): 61          '  byte 97
3b25(----): 62          '  byte 98
3b26(----): 6c          '  byte 108
3b27(----): 65          '  byte 101
3b28(0ea9): 5b          '  byte 91
3b29(----): 74          '  byte 116
3b2a(----): 69          '  byte 105
3b2b(----): 64          '  byte 100
3b2c(0eaa): 5d          '  byte 93
3b2d(----): 20          '  byte 32
3b2e(----): 21          '  byte 33
3b2f(----): 3d          '  byte 61
3b30(0eab): 20          '  byte 32
3b31(----): 4e          '  byte 78
3b32(----): 55          '  byte 85
3b33(----): 4c          '  byte 76
3b34(0eac): 4c          '  byte 76
3b35(----): 22          '  byte 34
3b36(----): 20          '  byte 32
3b37(----): 66          '  byte 102
3b38(0ead): 61          '  byte 97
3b39(----): 69          '  byte 105
3b3a(----): 6c          '  byte 108
3b3b(----): 65          '  byte 101
3b3c(0eae): 64          '  byte 100
3b3d(----): 2c          '  byte 44
3b3e(----): 20          '  byte 32
3b3f(----): 66          '  byte 102
3b40(0eaf): 69          '  byte 105
3b41(----): 6c          '  byte 108
3b42(----): 65          '  byte 101
3b43(----): 20          '  byte 32
3b44(0eb0): 22          '  byte 34
3b45(----): 2e          '  byte 46
3b46(----): 2e          '  byte 46
3b47(----): 2f          '  byte 47
3b48(0eb1): 2e          '  byte 46
3b49(----): 2e          '  byte 46
3b4a(----): 2f          '  byte 47
3b4b(----): 62          '  byte 98
3b4c(0eb2): 62          '  byte 98
3b4d(----): 6f          '  byte 111
3b4e(----): 73          '  byte 115
3b4f(----): 2f          '  byte 47
3b50(0eb3): 6b          '  byte 107
3b51(----): 65          '  byte 101
3b52(----): 72          '  byte 114
3b53(----): 6e          '  byte 110
3b54(0eb4): 65          '  byte 101
3b55(----): 6c          '  byte 108
3b56(----): 2f          '  byte 47
3b57(----): 74          '  byte 116
3b58(0eb5): 68          '  byte 104
3b59(----): 72          '  byte 114
3b5a(----): 65          '  byte 101
3b5b(----): 61          '  byte 97
3b5c(0eb6): 64          '  byte 100
3b5d(----): 2e          '  byte 46
3b5e(----): 63          '  byte 99
3b5f(----): 22          '  byte 34
3b60(0eb7): 2c          '  byte 44
3b61(----): 20          '  byte 32
3b62(----): 6c          '  byte 108
3b63(----): 69          '  byte 105
3b64(0eb8): 6e          '  byte 110
3b65(----): 65          '  byte 101
3b66(----): 20          '  byte 32
3b67(----): 32          '  byte 50
3b68(0eb9): 34          '  byte 52
3b69(----): 0a          '  byte 10
3b6a(----): 00          '  byte 0
3b6b(----): 00          
3b6c(0eba):             '  long ' align long
3b6c(0eba):             ' C_h48c_41_L000043 ' <symbol:41>
3b6c(0eba): a0 0d 00 00 '  long @C_h48c_30
3b70(0ebb): 34 0d 00 00 '  long @C_h48c_35
3b74(0ebc): a0 0d 00 00 '  long @C_h48c_30
3b78(0ebd): 74 0d 00 00 '  long @C_h48c_29
3b7c(0ebe): cc 0c 00 00 '  long @C_h48c_33
3b80(0ebf): 74 0d 00 00 '  long @C_h48c_29
3b84(0ec0): 48 0d 00 00 '  long @C_h48c_37
3b88(0ec1):             '  long ' align long
3b88(0ec1):             ' C_h48c_39_L000040 ' <symbol:39>
3b88(0ec1): 68          '  byte 104
3b89(----): 34          '  byte 52
3b8a(----): 38          '  byte 56
3b8b(----): 63          '  byte 99
3b8c(0ec2): 20          '  byte 32
3b8d(----): 72          '  byte 114
3b8e(----): 65          '  byte 101
3b8f(----): 63          '  byte 99
3b90(0ec3): 65          '  byte 101
3b91(----): 69          '  byte 105
3b92(----): 76          '  byte 118
3b93(----): 65          '  byte 101
3b94(0ec4): 64          '  byte 100
3b95(----): 20          '  byte 32
3b96(----): 69          '  byte 105
3b97(----): 6c          '  byte 108
3b98(0ec5): 6c          '  byte 108
3b99(----): 65          '  byte 101
3b9a(----): 67          '  byte 103
3b9b(----): 61          '  byte 97
3b9c(0ec6): 6c          '  byte 108
3b9d(----): 20          '  byte 32
3b9e(----): 6d          '  byte 109
3b9f(----): 65          '  byte 101
3ba0(0ec7): 73          '  byte 115
3ba1(----): 73          '  byte 115
3ba2(----): 61          '  byte 97
3ba3(----): 67          '  byte 103
3ba4(0ec8): 65          '  byte 101
3ba5(----): 20          '  byte 32
3ba6(----): 25          '  byte 37
3ba7(----): 64          '  byte 100
3ba8(0ec9): 00          '  byte 0
3ba9(----): 00 00 00    
3bac(0eca):             '  long ' align long
3bac(0eca):             ' C_h48c_read_value_L000021 ' <symbol:22>
3bac(0eca): ff 1f 00 00 '  long 8191
3bb0(0ecb):             '  long ' align long
3bb0(0ecb):             ' C_post_clock_pulse_L000003 ' <symbol:4>
3bb0(0ecb): 58 02 00 00 '  long 600
3bb4(0ecc):             '  long ' align long
3bb4(0ecc):             ' C_bbos_sched_dequeue_25_L000026 ' <symbol:25>
3bb4(0ecc): 41          '  byte 65
3bb5(----): 73          '  byte 115
3bb6(----): 73          '  byte 115
3bb7(----): 65          '  byte 101
3bb8(0ecd): 72          '  byte 114
3bb9(----): 74          '  byte 116
3bba(----): 69          '  byte 105
3bbb(----): 6f          '  byte 111
3bbc(0ece): 6e          '  byte 110
3bbd(----): 20          '  byte 32
3bbe(----): 22          '  byte 34
3bbf(----): 74          '  byte 116
3bc0(0ecf): 69          '  byte 105
3bc1(----): 64          '  byte 100
3bc2(----): 20          '  byte 32
3bc3(----): 3c          '  byte 60
3bc4(0ed0): 3d          '  byte 61
3bc5(----): 20          '  byte 32
3bc6(----): 42          '  byte 66
3bc7(----): 42          '  byte 66
3bc8(0ed1): 4f          '  byte 79
3bc9(----): 53          '  byte 83
3bca(----): 5f          '  byte 95
3bcb(----): 4e          '  byte 78
3bcc(0ed2): 55          '  byte 85
3bcd(----): 4d          '  byte 77
3bce(----): 42          '  byte 66
3bcf(----): 45          '  byte 69
3bd0(0ed3): 52          '  byte 82
3bd1(----): 5f          '  byte 95
3bd2(----): 4f          '  byte 79
3bd3(----): 46          '  byte 70
3bd4(0ed4): 5f          '  byte 95
3bd5(----): 54          '  byte 84
3bd6(----): 48          '  byte 72
3bd7(----): 52          '  byte 82
3bd8(0ed5): 45          '  byte 69
3bd9(----): 41          '  byte 65
3bda(----): 44          '  byte 68
3bdb(----): 53          '  byte 83
3bdc(0ed6): 22          '  byte 34
3bdd(----): 20          '  byte 32
3bde(----): 66          '  byte 102
3bdf(----): 61          '  byte 97
3be0(0ed7): 69          '  byte 105
3be1(----): 6c          '  byte 108
3be2(----): 65          '  byte 101
3be3(----): 64          '  byte 100
3be4(0ed8): 2c          '  byte 44
3be5(----): 20          '  byte 32
3be6(----): 66          '  byte 102
3be7(----): 69          '  byte 105
3be8(0ed9): 6c          '  byte 108
3be9(----): 65          '  byte 101
3bea(----): 20          '  byte 32
3beb(----): 22          '  byte 34
3bec(0eda): 2e          '  byte 46
3bed(----): 2e          '  byte 46
3bee(----): 2f          '  byte 47
3bef(----): 2e          '  byte 46
3bf0(0edb): 2e          '  byte 46
3bf1(----): 2f          '  byte 47
3bf2(----): 62          '  byte 98
3bf3(----): 62          '  byte 98
3bf4(0edc): 6f          '  byte 111
3bf5(----): 73          '  byte 115
3bf6(----): 2f          '  byte 47
3bf7(----): 6b          '  byte 107
3bf8(0edd): 65          '  byte 101
3bf9(----): 72          '  byte 114
3bfa(----): 6e          '  byte 110
3bfb(----): 65          '  byte 101
3bfc(0ede): 6c          '  byte 108
3bfd(----): 2f          '  byte 47
3bfe(----): 73          '  byte 115
3bff(----): 63          '  byte 99
3c00(0edf): 68          '  byte 104
3c01(----): 65          '  byte 101
3c02(----): 64          '  byte 100
3c03(----): 75          '  byte 117
3c04(0ee0): 6c          '  byte 108
3c05(----): 65          '  byte 101
3c06(----): 72          '  byte 114
3c07(----): 73          '  byte 115
3c08(0ee1): 2f          '  byte 47
3c09(----): 66          '  byte 102
3c0a(----): 63          '  byte 99
3c0b(----): 66          '  byte 102
3c0c(0ee2): 73          '  byte 115
3c0d(----): 2e          '  byte 46
3c0e(----): 63          '  byte 99
3c0f(----): 22          '  byte 34
3c10(0ee3): 2c          '  byte 44
3c11(----): 20          '  byte 32
3c12(----): 6c          '  byte 108
3c13(----): 69          '  byte 105
3c14(0ee4): 6e          '  byte 110
3c15(----): 65          '  byte 101
3c16(----): 20          '  byte 32
3c17(----): 34          '  byte 52
3c18(0ee5): 35          '  byte 53
3c19(----): 0a          '  byte 10
3c1a(----): 00          '  byte 0
3c1b(----): 00          
3c1c(0ee6):             '  long ' align long
3c1c(0ee6):             ' C_bbos_sched_enqueue_6_L000007 ' <symbol:6>
3c1c(0ee6): 41          '  byte 65
3c1d(----): 73          '  byte 115
3c1e(----): 73          '  byte 115
3c1f(----): 65          '  byte 101
3c20(0ee7): 72          '  byte 114
3c21(----): 74          '  byte 116
3c22(----): 69          '  byte 105
3c23(----): 6f          '  byte 111
3c24(0ee8): 6e          '  byte 110
3c25(----): 20          '  byte 32
3c26(----): 22          '  byte 34
3c27(----): 74          '  byte 116
3c28(0ee9): 69          '  byte 105
3c29(----): 64          '  byte 100
3c2a(----): 20          '  byte 32
3c2b(----): 3c          '  byte 60
3c2c(0eea): 3d          '  byte 61
3c2d(----): 20          '  byte 32
3c2e(----): 42          '  byte 66
3c2f(----): 42          '  byte 66
3c30(0eeb): 4f          '  byte 79
3c31(----): 53          '  byte 83
3c32(----): 5f          '  byte 95
3c33(----): 4e          '  byte 78
3c34(0eec): 55          '  byte 85
3c35(----): 4d          '  byte 77
3c36(----): 42          '  byte 66
3c37(----): 45          '  byte 69
3c38(0eed): 52          '  byte 82
3c39(----): 5f          '  byte 95
3c3a(----): 4f          '  byte 79
3c3b(----): 46          '  byte 70
3c3c(0eee): 5f          '  byte 95
3c3d(----): 54          '  byte 84
3c3e(----): 48          '  byte 72
3c3f(----): 52          '  byte 82
3c40(0eef): 45          '  byte 69
3c41(----): 41          '  byte 65
3c42(----): 44          '  byte 68
3c43(----): 53          '  byte 83
3c44(0ef0): 22          '  byte 34
3c45(----): 20          '  byte 32
3c46(----): 66          '  byte 102
3c47(----): 61          '  byte 97
3c48(0ef1): 69          '  byte 105
3c49(----): 6c          '  byte 108
3c4a(----): 65          '  byte 101
3c4b(----): 64          '  byte 100
3c4c(0ef2): 2c          '  byte 44
3c4d(----): 20          '  byte 32
3c4e(----): 66          '  byte 102
3c4f(----): 69          '  byte 105
3c50(0ef3): 6c          '  byte 108
3c51(----): 65          '  byte 101
3c52(----): 20          '  byte 32
3c53(----): 22          '  byte 34
3c54(0ef4): 2e          '  byte 46
3c55(----): 2e          '  byte 46
3c56(----): 2f          '  byte 47
3c57(----): 2e          '  byte 46
3c58(0ef5): 2e          '  byte 46
3c59(----): 2f          '  byte 47
3c5a(----): 62          '  byte 98
3c5b(----): 62          '  byte 98
3c5c(0ef6): 6f          '  byte 111
3c5d(----): 73          '  byte 115
3c5e(----): 2f          '  byte 47
3c5f(----): 6b          '  byte 107
3c60(0ef7): 65          '  byte 101
3c61(----): 72          '  byte 114
3c62(----): 6e          '  byte 110
3c63(----): 65          '  byte 101
3c64(0ef8): 6c          '  byte 108
3c65(----): 2f          '  byte 47
3c66(----): 73          '  byte 115
3c67(----): 63          '  byte 99
3c68(0ef9): 68          '  byte 104
3c69(----): 65          '  byte 101
3c6a(----): 64          '  byte 100
3c6b(----): 75          '  byte 117
3c6c(0efa): 6c          '  byte 108
3c6d(----): 65          '  byte 101
3c6e(----): 72          '  byte 114
3c6f(----): 73          '  byte 115
3c70(0efb): 2f          '  byte 47
3c71(----): 66          '  byte 102
3c72(----): 63          '  byte 99
3c73(----): 66          '  byte 102
3c74(0efc): 73          '  byte 115
3c75(----): 2e          '  byte 46
3c76(----): 63          '  byte 99
3c77(----): 22          '  byte 34
3c78(0efd): 2c          '  byte 44
3c79(----): 20          '  byte 32
3c7a(----): 6c          '  byte 108
3c7b(----): 69          '  byte 105
3c7c(0efe): 6e          '  byte 110
3c7d(----): 65          '  byte 101
3c7e(----): 20          '  byte 32
3c7f(----): 32          '  byte 50
3c80(0eff): 35          '  byte 53
3c81(----): 0a          '  byte 10
3c82(----): 00          '  byte 0
3c83(----): 00          
3c84(0f00):             '  long ' align long
3c84(0f00):             ' C_main_31_L000032 ' <symbol:31>
3c84(0f00): 48          '  byte 72
3c85(----): 69          '  byte 105
3c86(----): 74          '  byte 116
3c87(----): 61          '  byte 97
3c88(0f01): 63          '  byte 99
3c89(----): 68          '  byte 104
3c8a(----): 69          '  byte 105
3c8b(----): 20          '  byte 32
3c8c(0f02): 48          '  byte 72
3c8d(----): 34          '  byte 52
3c8e(----): 38          '  byte 56
3c8f(----): 43          '  byte 67
3c90(0f03): 20          '  byte 32
3c91(----): 33          '  byte 51
3c92(----): 20          '  byte 32
3c93(----): 41          '  byte 65
3c94(0f04): 78          '  byte 120
3c95(----): 69          '  byte 105
3c96(----): 73          '  byte 115
3c97(----): 20          '  byte 32
3c98(0f05): 41          '  byte 65
3c99(----): 63          '  byte 99
3c9a(----): 63          '  byte 99
3c9b(----): 65          '  byte 101
3c9c(0f06): 6c          '  byte 108
3c9d(----): 65          '  byte 101
3c9e(----): 72          '  byte 114
3c9f(----): 6f          '  byte 111
3ca0(0f07): 6d          '  byte 109
3ca1(----): 65          '  byte 101
3ca2(----): 74          '  byte 116
3ca3(----): 65          '  byte 101
3ca4(0f08): 72          '  byte 114
3ca5(----): 20          '  byte 32
3ca6(----): 44          '  byte 68
3ca7(----): 65          '  byte 101
3ca8(0f09): 6d          '  byte 109
3ca9(----): 6f          '  byte 111
3caa(----): 0a          '  byte 10
3cab(----): 00          '  byte 0
3cac(0f0a):             '  long ' align long
3cac(0f0a):             ' C_demo_26_L000027 ' <symbol:26>
3cac(0f0a): 53          '  byte 83
3cad(----): 65          '  byte 101
3cae(----): 6e          '  byte 110
3caf(----): 64          '  byte 100
3cb0(0f0b): 20          '  byte 32
3cb1(----): 6f          '  byte 111
3cb2(----): 70          '  byte 112
3cb3(----): 65          '  byte 101
3cb4(0f0c): 6e          '  byte 110
3cb5(----): 2d          '  byte 45
3cb6(----): 6d          '  byte 109
3cb7(----): 65          '  byte 101
3cb8(0f0d): 73          '  byte 115
3cb9(----): 73          '  byte 115
3cba(----): 61          '  byte 97
3cbb(----): 67          '  byte 103
3cbc(0f0e): 65          '  byte 101
3cbd(----): 20          '  byte 32
3cbe(----): 74          '  byte 116
3cbf(----): 6f          '  byte 111
3cc0(0f0f): 20          '  byte 32
3cc1(----): 48          '  byte 72
3cc2(----): 34          '  byte 52
3cc3(----): 38          '  byte 56
3cc4(0f10): 43          '  byte 67
3cc5(----): 20          '  byte 32
3cc6(----): 64          '  byte 100
3cc7(----): 65          '  byte 101
3cc8(0f11): 76          '  byte 118
3cc9(----): 69          '  byte 105
3cca(----): 63          '  byte 99
3ccb(----): 65          '  byte 101
3ccc(0f12): 20          '  byte 32
3ccd(----): 64          '  byte 100
3cce(----): 72          '  byte 114
3ccf(----): 69          '  byte 105
3cd0(0f13): 76          '  byte 118
3cd1(----): 65          '  byte 101
3cd2(----): 72          '  byte 114
3cd3(----): 0a          '  byte 10
3cd4(0f14): 00          '  byte 0
3cd5(----): 00 00 00    
3cd8(0f15):             '  long ' align long
3cd8(0f15):             ' C_demo_22_L000023 ' <symbol:22>
3cd8(0f15): 55          '  byte 85
3cd9(----): 6e          '  byte 110
3cda(----): 6b          '  byte 107
3cdb(----): 6e          '  byte 110
3cdc(0f16): 6f          '  byte 111
3cdd(----): 77          '  byte 119
3cde(----): 6e          '  byte 110
3cdf(----): 20          '  byte 32
3ce0(0f17): 6d          '  byte 109
3ce1(----): 65          '  byte 101
3ce2(----): 73          '  byte 115
3ce3(----): 73          '  byte 115
3ce4(0f18): 61          '  byte 97
3ce5(----): 67          '  byte 103
3ce6(----): 65          '  byte 101
3ce7(----): 00          '  byte 0
3ce8(0f19):             '  long ' align long
3ce8(0f19):             ' C_demo_20_L000021 ' <symbol:20>
3ce8(0f19): 46          '  byte 70
3ce9(----): 72          '  byte 114
3cea(----): 65          '  byte 101
3ceb(----): 65          '  byte 101
3cec(0f1a): 20          '  byte 32
3ced(----): 66          '  byte 102
3cee(----): 61          '  byte 97
3cef(----): 6c          '  byte 108
3cf0(0f1b): 6c          '  byte 108
3cf1(----): 20          '  byte 32
3cf2(----): 64          '  byte 100
3cf3(----): 65          '  byte 101
3cf4(0f1c): 74          '  byte 116
3cf5(----): 65          '  byte 101
3cf6(----): 63          '  byte 99
3cf7(----): 74          '  byte 116
3cf8(0f1d): 65          '  byte 101
3cf9(----): 64          '  byte 100
3cfa(----): 21          '  byte 33
3cfb(----): 0a          '  byte 10
3cfc(0f1e): 00          '  byte 0
3cfd(----): 00 00 00    
3d00(0f1f):             '  long ' align long
3d00(0f1f):             ' C_demo_14_L000015 ' <symbol:14>
3d00(0f1f): 48          '  byte 72
3d01(----): 34          '  byte 52
3d02(----): 38          '  byte 56
3d03(----): 43          '  byte 67
3d04(0f20): 20          '  byte 32
3d05(----): 64          '  byte 100
3d06(----): 65          '  byte 101
3d07(----): 76          '  byte 118
3d08(0f21): 69          '  byte 105
3d09(----): 63          '  byte 99
3d0a(----): 65          '  byte 101
3d0b(----): 20          '  byte 32
3d0c(0f22): 68          '  byte 104
3d0d(----): 61          '  byte 97
3d0e(----): 73          '  byte 115
3d0f(----): 20          '  byte 32
3d10(0f23): 62          '  byte 98
3d11(----): 65          '  byte 101
3d12(----): 65          '  byte 101
3d13(----): 6e          '  byte 110
3d14(0f24): 20          '  byte 32
3d15(----): 6f          '  byte 111
3d16(----): 70          '  byte 112
3d17(----): 65          '  byte 101
3d18(0f25): 6e          '  byte 110
3d19(----): 65          '  byte 101
3d1a(----): 64          '  byte 100
3d1b(----): 0a          '  byte 10
3d1c(0f26): 00          '  byte 0
3d1d(----): 00 00 00    
3d20(0f27):             '  long ' align long
3d20(0f27):             ' C__doprnt_162_L000164 ' <symbol:162>
3d20(0f27): ac 2b 00 00 '  long @C__doprnt_147
3d24(0f28): 14 2d 00 00 '  long @C__doprnt_158
3d28(0f29): 64 2c 00 00 '  long @C__doprnt_152
3d2c(0f2a): 3c 29 00 00 '  long @C__doprnt_123
3d30(0f2b): 3c 29 00 00 '  long @C__doprnt_123
3d34(0f2c): 3c 29 00 00 '  long @C__doprnt_123
3d38(0f2d): 3c 29 00 00 '  long @C__doprnt_123
3d3c(0f2e): 64 2c 00 00 '  long @C__doprnt_152
3d40(0f2f): 3c 29 00 00 '  long @C__doprnt_123
3d44(0f30): 3c 29 00 00 '  long @C__doprnt_123
3d48(0f31): 3c 29 00 00 '  long @C__doprnt_123
3d4c(0f32): 3c 29 00 00 '  long @C__doprnt_123
3d50(0f33): d4 29 00 00 '  long @C__doprnt_131
3d54(0f34): ac 2b 00 00 '  long @C__doprnt_147
3d58(0f35): ac 2b 00 00 '  long @C__doprnt_146
3d5c(0f36): 3c 29 00 00 '  long @C__doprnt_123
3d60(0f37): 5c 2d 00 00 '  long @C__doprnt_159
3d64(0f38): b4 2a 00 00 '  long @C__doprnt_136
3d68(0f39): 3c 29 00 00 '  long @C__doprnt_123
3d6c(0f3a): ac 2b 00 00 '  long @C__doprnt_147
3d70(0f3b):             '  long ' align long
3d70(0f3b):             ' C__doprnt_L000153 ' <symbol:154>
3d70(0f3b): 00 04 00 00 '  long 1024
3d74(0f3c):             '  long ' align long
3d74(0f3c):             ' C__doprnt_139_L000140 ' <symbol:139>
3d74(0f3c): 28          '  byte 40
3d75(----): 6e          '  byte 110
3d76(----): 75          '  byte 117
3d77(----): 6c          '  byte 108
3d78(0f3d): 6c          '  byte 108
3d79(----): 29          '  byte 41
3d7a(----): 00          '  byte 0
3d7b(----): 00          
3d7c(0f3e):             '  long ' align long
3d7c(0f3e):             ' C__doprnt_L000112 ' <symbol:113>
3d7c(0f3e): ef ff ff ff '  long -17
3d80(0f3f):             '  long ' align long
3d80(0f3f):             ' C__doprnt_L000107 ' <symbol:108>
3d80(0f3f): fb ff ff ff '  long -5
3d84(0f40):             '  long ' align long
3d84(0f40):             ' C__doprnt_L000098 ' <symbol:99>
3d84(0f40): 00 02 00 00 '  long 512
3d88(0f41):             '  long ' align long
3d88(0f41):             ' C__doprnt_L000088 ' <symbol:89>
3d88(0f41): 00 10 00 00 '  long 4096
3d8c(0f42):             '  long ' align long
3d8c(0f42):             ' C__doprnt_L000071 ' <symbol:72>
3d8c(0f42): ff ff ff ff '  long -1
3d90(0f43):             '  long ' align long
3d90(0f43):             ' C_tmpfilexMRBQL_4c2c6c11_gnum_L000001_L000005 ' <symbol:6>
3d90(0f43): fc ff ff ff '  long -4
3d94(0f44):             '  long ' align long
3d94(0f44):             ' C_fputs_L000007 ' <symbol:8>
3d94(0f44): ff ff ff ff '  long -1
3d98(0f45):             '  long ' align long
3d98(0f45):             ' C_signal_L000022 ' <symbol:23>
3d98(0f45): 01 00 00 00 '  long 1
3d9c(0f46):             '  long ' align long
3d9c(0f46):             ' C_raise_L000006 ' <symbol:7>
3d9c(0f46): ff ff ff ff '  long -1
3da0(0f47):             '  long ' align long
3da0(0f47):             ' Catalina_Init
3da0(0f47):             '  long ' align long
3da0(0f47): 00 00 00 00 ' C_errno long 0
3da4(0f48):             '  long ' align long
3da4(0f48):             ' C_tmpfilegkyVRO_4d65929a_myself_L000002 ' <symbol:myself>
3da4(0f48): 01          '  byte $1
3da5(----): 00 00 00    
3da8(0f49):             '  long ' align long
3da8(0f49):             ' C_tmpfile33DobP_4d65929a_demo_pins_L000002 ' <symbol:demo_pins>
3da8(0f49): 01 00 00 00 '  long 1
3dac(0f4a): 02 00 00 00 '  long 2
3db0(0f4b): 00 00 00 00 '  long 0
3db4(0f4c): 03 00 00 00 '  long 3
3db8(0f4d):             '  long ' align long
3db8(0f4d):             ' C_tmpfilemS7aMO_4d65929a_init_complete_L000003 ' <symbol:init_complete>
3db8(0f4d): 00          '  byte $0
3db9(----): 00 00 00    
3dbc(0f4e):             '  long ' align long
3dbc(0f4e):             ' C___stdin ' <symbol:__stdin>
3dbc(0f4e): 00 00 00 00 '  long 0
3dc0(0f4f): 00 00 00 00 '  long 0
3dc4(0f50): 01 00 00 00 '  long 1
3dc8(0f51): 00 00 00 00 '  long 0
3dcc(0f52): 00 00 00 00 '  long $0
3dd0(0f53): 00 00 00 00 '  long $0
3dd4(0f54):             '  long ' align long
3dd4(0f54):             ' C___stdout ' <symbol:__stdout>
3dd4(0f54): 00 00 00 00 '  long 0
3dd8(0f55): 01 00 00 00 '  long 1
3ddc(0f56): 02 00 00 00 '  long 2
3de0(0f57): 00 00 00 00 '  long 0
3de4(0f58): 00 00 00 00 '  long $0
3de8(0f59): 00 00 00 00 '  long $0
3dec(0f5a):             '  long ' align long
3dec(0f5a):             ' C___stderr ' <symbol:__stderr>
3dec(0f5a): 00 00 00 00 '  long 0
3df0(0f5b): 02 00 00 00 '  long 2
3df4(0f5c): 42 00 00 00 '  long 66
3df8(0f5d): 00 00 00 00 '  long 0
3dfc(0f5e): 00 00 00 00 '  long $0
3e00(0f5f): 00 00 00 00 '  long $0
3e04(0f60):             '  long ' align long
3e04(0f60):             ' C___iotab ' <symbol:__iotab>
3e04(0f60): 40 3d 00 00 '  long @C___stdin
3e08(0f61): 58 3d 00 00 '  long @C___stdout
3e0c(0f62): 70 3d 00 00 '  long @C___stderr
3e10(0f63): 00 00 00 00 '  long $0
3e14(0f64): 00 00 00 00 '  byte 0[64]
3e18(0f65): 00 00 00 00 ' 
3e1c(0f66): 00 00 00 00 ' 
3e20(0f67): 00 00 00 00 ' 
3e24(0f68): 00 00 00 00 ' 
3e28(0f69): 00 00 00 00 ' 
3e2c(0f6a): 00 00 00 00 ' 
3e30(0f6b): 00 00 00 00 ' 
3e34(0f6c): 00 00 00 00 ' 
3e38(0f6d): 00 00 00 00 ' 
3e3c(0f6e): 00 00 00 00 ' 
3e40(0f6f): 00 00 00 00 ' 
3e44(0f70): 00 00 00 00 ' 
3e48(0f71): 00 00 00 00 ' 
3e4c(0f72): 00 00 00 00 ' 
3e50(0f73): 00 00 00 00 ' 
3e54(0f74):             '  long ' align long
3e54(0f74):             ' C___funccnt ' <symbol:__funccnt>
3e54(0f74): 00 00 00 00 '  long 0
3e58(0f75):             '  long ' align long
3e58(0f75):             ' C__clean ' <symbol:_clean>
3e58(0f75): 00 00 00 00 '  long $0
3e5c(0f76):             '  long ' align long
3e5c(0f76):             ' C_tmpfilenOxQ8q_4c2c6bf0__sig_handler_L000001 ' <symbol:_sig_handler>
3e5c(0f76): 01 00 00 00 '  long $1
3e60(0f77): 00 00 00 00 '  byte 0[60]
3e64(0f78): 00 00 00 00 ' 
3e68(0f79): 00 00 00 00 ' 
3e6c(0f7a): 00 00 00 00 ' 
3e70(0f7b): 00 00 00 00 ' 
3e74(0f7c): 00 00 00 00 ' 
3e78(0f7d): 00 00 00 00 ' 
3e7c(0f7e): 00 00 00 00 ' 
3e80(0f7f): 00 00 00 00 ' 
3e84(0f80): 00 00 00 00 ' 
3e88(0f81): 00 00 00 00 ' 
3e8c(0f82): 00 00 00 00 ' 
3e90(0f83): 00 00 00 00 ' 
3e94(0f84): 00 00 00 00 ' 
3e98(0f85): 00 00 00 00 ' 
3e9c(0f86):             '  long ' align long
3e9c(0f86):             ' Catalina_Data
3e9c(0f86):             '  long ' align long
3e9c(0f86):             ' C_tmpfileeFifpN_4d65929a_bbos_port_table_L000002 ' <symbol:bbos_port_table>
3e9c(0f86): 00 00 00 00 '  byte 0[36]
3ea0(0f87): 00 00 00 00 ' 
3ea4(0f88): 00 00 00 00 ' 
3ea8(0f89): 00 00 00 00 ' 
3eac(0f8a): 00 00 00 00 ' 
3eb0(0f8b): 00 00 00 00 ' 
3eb4(0f8c): 00 00 00 00 ' 
3eb8(0f8d): 00 00 00 00 ' 
3ebc(0f8e): 00 00 00 00 ' 
3ec0(0f8f):             '  long ' align long
3ec0(0f8f):             ' C_tmpfileLmT6lL_4d65929a_bbos_thread_table_L000002 ' <symbol:bbos_thread_table>
3ec0(0f8f): 00 00 00 00 '  byte 0[12]
3ec4(0f90): 00 00 00 00 ' 
3ec8(0f91): 00 00 00 00 ' 
3ecc(0f92):             '  long ' align long
3ecc(0f92):             ' C_h48c_message_L000026 ' <symbol:message>
3ecc(0f92): 00 00 00 00 '  byte 0[20]
3ed0(0f93): 00 00 00 00 ' 
3ed4(0f94): 00 00 00 00 ' 
3ed8(0f95): 00 00 00 00 ' 
3edc(0f96): 00 00 00 00 ' 
3ee0(0f97):             '  long ' align long
3ee0(0f97):             ' C_tmpfileYWQeeK_4d65929a_h48c_zerog_pin_L000005 ' <symbol:h48c_zerog_pin>
3ee0(0f97): 00 00 00 00 '  byte 0[4]
3ee4(0f98):             '  long ' align long
3ee4(0f98):             ' C_tmpfile864xGK_4d65929a_h48c_cs_pin_L000004 ' <symbol:h48c_cs_pin>
3ee4(0f98): 00 00 00 00 '  byte 0[4]
3ee8(0f99):             '  long ' align long
3ee8(0f99):             ' C_tmpfiles8nR8K_4d65929a_h48c_clk_pin_L000003 ' <symbol:h48c_clk_pin>
3ee8(0f99): 00 00 00 00 '  byte 0[4]
3eec(0f9a):             '  long ' align long
3eec(0f9a):             ' C_tmpfile8UNaBL_4d65929a_h48c_dio_pin_L000002 ' <symbol:h48c_dio_pin>
3eec(0f9a): 00 00 00 00 '  byte 0[4]
3ef0(0f9b):             '  long ' align long
3ef0(0f9b):             ' C_tmpfileU6gSrO_4d65929a_schedule_L000004 ' <symbol:schedule>
3ef0(0f9b): 00 00 00 00 '  byte 0[6]
3ef4(0f9c): 00 00       ' 
3ef6(----): 00 00       
3ef8(0f9d):             '  long ' align long
3ef8(0f9d):             ' C_demo_message_L000007 ' <symbol:message>
3ef8(0f9d): 00 00 00 00 '  byte 0[20]
3efc(0f9e): 00 00 00 00 ' 
3f00(0f9f): 00 00 00 00 ' 
3f04(0fa0): 00 00 00 00 ' 
3f08(0fa1): 00 00 00 00 ' 
3f0c(0fa2):             '  long ' align long
3f0c(0fa2):             ' C_tmpfile3CNXmO_4d65929a_is_free_fall_L000004 ' <symbol:is_free_fall>
3f0c(0fa2): 00 00 00 00 '  byte 0[4]
3f10(0fa3):             '  long ' align long
3f10(0fa3):             ' C___functab ' <symbol:__functab>
3f10(0fa3): 00 00 00 00 '  byte 0[128]
3f14(0fa4): 00 00 00 00 ' 
3f18(0fa5): 00 00 00 00 ' 
3f1c(0fa6): 00 00 00 00 ' 
3f20(0fa7): 00 00 00 00 ' 
3f24(0fa8): 00 00 00 00 ' 
3f28(0fa9): 00 00 00 00 ' 
3f2c(0faa): 00 00 00 00 ' 
3f30(0fab): 00 00 00 00 ' 
3f34(0fac): 00 00 00 00 ' 
3f38(0fad): 00 00 00 00 ' 
3f3c(0fae): 00 00 00 00 ' 
3f40(0faf): 00 00 00 00 ' 
3f44(0fb0): 00 00 00 00 ' 
3f48(0fb1): 00 00 00 00 ' 
3f4c(0fb2): 00 00 00 00 ' 
3f50(0fb3): 00 00 00 00 ' 
3f54(0fb4): 00 00 00 00 ' 
3f58(0fb5): 00 00 00 00 ' 
3f5c(0fb6): 00 00 00 00 ' 
3f60(0fb7): 00 00 00 00 ' 
3f64(0fb8): 00 00 00 00 ' 
3f68(0fb9): 00 00 00 00 ' 
3f6c(0fba): 00 00 00 00 ' 
3f70(0fbb): 00 00 00 00 ' 
3f74(0fbc): 00 00 00 00 ' 
3f78(0fbd): 00 00 00 00 ' 
3f7c(0fbe): 00 00 00 00 ' 
3f80(0fbf): 00 00 00 00 ' 
3f84(0fc0): 00 00 00 00 ' 
3f88(0fc1): 00 00 00 00 ' 
3f8c(0fc2): 00 00 00 00 ' 
3f90(0fc3):             '  long ' align long
3f90(0fc3):             ' sbrkinit  ' heap starts here
3f90(0fc3): 00 00 00 00 '  long 0 ' this long is required to workaround an obscure homespun bug!!!
3f94(0fc4):             '  long ' align long
3f94(0fc4):             ' Catalina_Ends ' end of segments
'============================ Method #1: PUB Base =============================
'PUB Base : addr
'------------------------------------------------------------------------------
   addr := @@0 ' Catalina Base Address
'------------------------------------------------------------------------------
3f94: 35             PUSH#0	
3f95: 97 00          PUSH#.B	OBJ+0[]
3f97: 61             POP  	Locals+0
3f98: 32             RETURN	
3f99: 00 00 00    

'******************************************************************************
'                           Catalina_Cogstore.spin                             
'******************************************************************************

'=================================== CONs =====================================
MAX_LONGS = 300
COGSTORE = 32508
ARGC_ADDR = 32560
ARGV_ADDR = 32562
ARGV_0 = 32564
ARGV_MAX = 32
CMD_READ = 268435456
CMD_WRITE = 536870912
CMD_SIZE = 805306368
CMD_SETUP = 1073741824
CMD_RESPONSE = -17958194
QUOTE_CHAR = 34
'=============================== Object Header ================================
3f9c: ac 03 08 01 ' 940 bytes, 8-1 methods, 1 object pointers
3fa0: 94 02 00 00 ' ptr #1 to $4230: PUB Start (locals size: 0)
3fa4: 9b 02 00 00 ' ptr #2 to $4237: PUB Valid (locals size: 0)
3fa8: b7 02 00 00 ' ptr #3 to $4253: PUB Stop (locals size: 0)
3fac: c0 02 00 00 ' ptr #4 to $425c: PUB Write (locals size: 0)
3fb0: e6 02 00 00 ' ptr #5 to $4282: PUB Read (locals size: 0)
3fb4: 0c 03 04 00 ' ptr #6 to $42a8: PUB Size (locals size: 4)
3fb8: 41 03 00 00 ' ptr #7 to $42dd: PUB Setup (locals size: 0)
3fbc: 4c 11 00 00 ' ptr #8 to $50e8: OBJ common : Catalina_Common.spin (VAR offset: 0)
'================================ DAT Section =================================
3fc0(0000):             '               org       0
3fc0(0000):             ' entry
3fc0(0000):             ' done
3fc0(0000): 00 18 fd a0 '               mov       t0,#0
3fc4(0001): 91 18 3d 08 '               wrlong    t0,command
3fc8(0002):             ' loop
3fc8(0002): 91 18 bd 0a '               rdlong    t0,command wz           ' loop ...
3fcc(0003): 02 00 68 5c '         if_z  jmp       #loop                   ' ... till ...
3fd0(0004): 93 18 3d 86 '               cmp       t0,response wz          ' ... we get ...
3fd4(0005): 02 00 68 5c '         if_z  jmp       #loop                   ' ... a command
3fd8(0006): 8c 1a bd a0 '               mov       t1,t0                   ' extract ...
3fdc(0007): 90 1a bd 60 '               and       t1,low24                ' ... address argument
3fe0(0008): 1c 18 fd 28 '               shr       t0,#28                  ' extract command
3fe4(0009): 01 18 7d 86 '               cmp       t0,#CMD_READ>>28 wz     ' do ...
3fe8(000a): 13 00 68 5c '         if_z  jmp       #do_read                ' ... read
3fec(000b): 02 18 7d 86 '               cmp       t0,#CMD_WRITE>>28 wz    ' do ... 
3ff0(000c): 1b 00 68 5c '         if_z  jmp       #do_write               ' ... write               
3ff4(000d): 03 18 7d 86 '               cmp       t0,#CMD_SIZE>>28 wz     ' do ...
3ff8(000e): 2a 00 68 5c '         if_z  jmp       #do_size                ' ... size
3ffc(000f): 04 18 7d 86 '               cmp       t0,#CMD_SETUP>>28 wz    ' do ...
4000(0010): 30 00 68 5c '         if_z  jmp       #do_setup               ' ... setup
4004(0011):             ' identify        
4004(0011): 91 26 3d 08 '               wrlong    response,command        ' otherwise return unlikely response ...
4008(0012): 02 00 7c 5c '               jmp       #loop                   ' ... and loop till we get a known command
400c(0013):             ' do_read
400c(0013): 9b 2c fc 54 '               movd      rd_inst,#storage        ' read a copy ...                                
4010(0014): 98 18 bd a2 '               mov       t0,len wz               ' ... of ...                                
4014(0015):             ' rd_loop                                         ' ... the ...                                  
4014(0015): 00 00 68 5c '         if_z  jmp       #done                   ' ... string ...                                
4018(0016): 8d 00 3c 08 ' rd_inst       wrlong    0-0,t1                  ' ... to ...                              
401c(0017): 97 2c bc 80 '               add       rd_inst,d_inc           ' ... the ...                                 
4020(0018): 04 1a fd 80 '               add       t1,#4                   ' ... address ...                                   
4024(0019): 01 18 fd 86 '               sub       t0,#1 wz                ' ... provided ...                              
4028(001a): 15 00 7c 5c '               jmp       #rd_loop                ' ... (assume there is enough space!)
402c(001b):             ' do_write
402c(001b): 9b 3c fc 54 '               movd      wr_inst,#storage        ' write ...
4030(001c): 00 30 fd a0 '               mov       len,#0                  ' ... a ...
4034(001d):             ' wr_loop                                         ' ... copy ...
4034(001d): 8d 1c bd 08 '               rdlong    t2,t1                   ' ... of ...
4038(001e): 8e 00 bc a0 ' wr_inst       mov       0-0,t2                  ' ... the ...
403c(001f): 97 3c bc 80 '               add       wr_inst,d_inc           ' ... string ...
4040(0020): 04 1a fd 80 '               add       t1,#4                   ' ... to ...
4044(0021): 01 30 fd 80 '               add       len,#1                  ' ... cog ...
4048(0022): 2c 31 7d 86 '               cmp       len,#MAX_LONGS wz       ' ... RAM ...
404c(0023): 00 00 68 5c '         if_z  jmp       #done                   ' ... stopping ...
4050(0024): 04 18 fd a0 '               mov       t0,#4                   ' ... when ... 
4054(0025): ff 1c 7d 62 ' wr_test       test      t2,#$FF wz              ' ... cog ...
4058(0026): 00 00 68 5c '       if_z    jmp       #done                   ' ... full ...
405c(0027): 08 1c fd 28 '               shr       t2,#8                   ' ... or ...
4060(0028): 25 18 fd e4 '               djnz      t0,#wr_test             ' ... termination ... 
4064(0029): 1d 00 7c 5c '               jmp       #wr_loop                ' ... detected
4068(002a):             ' do_size
4068(002a): 90 1a 3d 86 '               cmp       t1,low24 wz             ' return ...
406c(002b): 02 00 54 5c '         if_nz jmp       #loop                   ' ... the ...                     
4070(002c): 98 18 bd a0 '               mov       t0,len                  ' ... size (in LONGs) ...
4074(002d): 92 18 bd 68 '               or        t0,size_cmd             ' ... of ...
4078(002e): 91 18 3d 08 '               wrlong    t0,command              ' ... the stored ...
407c(002f): 02 00 7c 5c '               jmp       #loop                   ' ... command line
4080(0030):             ' do_setup                                        
4080(0030): 77 30 7d ec '               tjz       len,#no_args            ' if no stored string, set argc/argv to default values
4084(0031): 8d 1c bd a0 '               mov       t2,t1                   ' save the address argument
4088(0032): 9b 6a fc 54 '               movd      su_inst,#storage        ' otherwise ...
408c(0033): 98 18 bd a2 '               mov       t0,len wz               ' ... read ...
4090(0034):             ' su_loop                                         ' ... the ...             
4090(0034): 3a 00 68 5c '         if_z  jmp       #su_count_args          ' ... stored ...
4094(0035): 8d 00 3c 08 ' su_inst       wrlong    0-0,t1                  ' ... string ...
4098(0036): 97 6a bc 80 '               add       su_inst,d_inc           ' ... to ...
409c(0037): 04 1a fd 80 '               add       t1,#4                   ' ... the ...
40a0(0038): 01 18 fd 86 '               sub       t0,#1 wz                ' ... address ...
40a4(0039): 34 00 7c 5c '               jmp       #su_loop                ' ... provided (assume there is enough space!) 
40a8(003a):             ' su_count_args
40a8(003a): 8e 1a bd a0 '               mov       t1,t2                   ' count the number of arguments in the string
40ac(003b): 00 32 fd a0 '               mov       n,#0                    ' no arguments yet           
40b0(003c): 00 34 fd a0 '               mov       q,#0                    ' not in a quoted string                                                    
40b4(003d):             ' su_count_loop
40b4(003d): 7c 00 fd 5c '               call      #skip_to_non_space      ' find next non-space
40b8(003e): 00 18 7d 86 '               cmp       t0,#0 wz                ' end of string?
40bc(003f): 43 00 68 5c '         if_z  jmp       #su_save_argc           ' yes - set up argc
40c0(0040): 01 32 fd 80 '               add       n,#1                    ' no - found an argument
40c4(0041): 81 16 fd 5c '               call      #skip_to_space          ' skip to next space (i.e. end of argument)                            
40c8(0042): 3d 00 7c 5c '               jmp       #su_count_loop                         
40cc(0043):             ' su_save_argc
40cc(0043): 20 32 7d 87 '               cmp       n,#ARGV_MAX wz,wc       ' set up argc and first element of argv                                 
40d0(0044): 20 32 c5 a0 '         if_a  mov       n,#ARGV_MAX             '                                    
40d4(0045): 94 32 3d 04 '               wrword    n,argc                  ' word[common#ARGC_ADDR] := n                                              
40d8(0046): 95 2c 3d 04 '               wrword    argv_start,argv         ' word[common#ARGV_ADDR] := argv_0                               
40dc(0047): 8e 1a bd a0 '               mov       t1,t2      
40e0(0048): 7c 00 fd 5c '               call      #skip_to_non_space      ' find start of first argument ...
40e4(0049): 96 1e bd a0 '               mov       t3,argv_start           ' ... and save it ...                                
40e8(004a): 8f 1a 3d 08 '               wrlong    t1,t3                   ' ... in long[common#ARGV_0] 
40ec(004b): 00 34 fd a0 '               mov       q,#0                    ' not currently within quoted string
40f0(004c):             ' su_argv_loop
40f0(004c): 8d 18 bd 02 '               rdbyte    t0,t1 wz                ' deconstruct command line, creating the argv array as we go                 
40f4(004d): 73 00 68 5c '         if_z  jmp       #su_argv_done           ' end of string found - terminate the argv array                                                                    
40f8(004e): 22 18 7d 86 '               cmp       t0,#QUOTE_CHAR wz       ' found a quote?                                                            
40fc(004f): 62 00 54 5c '         if_nz jmp       #su_argv_notquote       ' no - just copy character (or terminate argument of it is a space)
4100(0050): 01 34 fd 6e '               xor       q,#1 wz                 ' yes - toggle marker indicating we are within quoted string
4104(0051): 71 00 54 5c '         if_nz jmp       #su_argv_nextchar       ' if this is the start of a quoted string, just keep processing
4108(0052): 8d 18 bd a0 '               mov       t0,t1                   ' otherwise, is the end ...
410c(0053): 01 18 fd 80 '               add       t0,#1                   ' ... of the quoted string ...
4110(0054): 8c 18 bd 02 '               rdbyte    t0,t0 wz                ' ... also ... 
4114(0055): 58 00 68 5c '         if_z  jmp       #su_argv_chkquote       ' ... the end ...
4118(0056): 20 18 7d 86 '               cmp       t0,#" " wz              ' ... of the argument?
411c(0057): 71 00 54 5c '         if_nz jmp       #su_argv_nextchar       ' no - just keep processing 
4120(0058):             ' su_argv_chkquote
4120(0058): 8f 18 bd 08 '               rdlong    t0,t3                   ' yes - is there a quote ...
4124(0059): 8c 18 bd 00 '               rdbyte    t0,t0                   ' ... at the start ...
4128(005a): 22 18 7d 86 '               cmp       t0,#QUOTE_CHAR wz       ' ... of the argument?
412c(005b): 5e 00 68 5c '         if_z  jmp       #su_argv_delquote       ' yes - delete the start and end quotes 
4130(005c): 01 1a fd 80 '               add       t1,#1                   ' no - do not delete the start or end quotes ...
4134(005d): 65 00 7c 5c '               jmp       #su_argv_nextarg        ' ... just save the argument        
4138(005e):             ' su_argv_delquote             
4138(005e): 8f 18 bd 08 '               rdlong    t0,t3                   ' remove quote ...
413c(005f): 01 18 fd 80 '               add       t0,#1                   ' ... from start ...     
4140(0060): 8f 18 3d 08 '               wrlong    t0,t3                   ' ... of string
4144(0061): 65 00 7c 5c '               jmp       #su_argv_nextarg        ' save next argument
4148(0062):             ' su_argv_notquote                                 
4148(0062): 20 18 7d 86 '               cmp       t0,#" " wz              ' found a space?              
414c(0063): 71 00 54 5c '         if_nz jmp       #su_argv_nextchar       ' no - just keep processing                                       
4150(0064): 71 34 7d e8 '               tjnz      q,#su_argv_nextchar     ' yes - are we within a quote? If yes, just keep processing
4154(0065):             ' su_argv_nextarg              
4154(0065): 01 32 fd 80 '               add       n,#1                    ' no - found the end of an argument                                       
4158(0066): 20 32 7d 87 '               cmp       n,#ARGV_MAX wz,wc       ' too many arguments?                                      
415c(0067): 73 00 4c 5c '         if_ae jmp       #su_argv_done           ' yes - just terminate argv array                                       
4160(0068): 00 18 fd a0 '               mov       t0,#0                   ' no - zero terminate ...
4164(0069): 8d 18 3d 00 '               wrbyte    t0,t1                   ' ... the current argument                                          
4168(006a): 01 1a fd 80 '               add       t1,#1                   ' find the start ...    
416c(006b): 7c 00 fd 5c '               call      #skip_to_non_space      ' ... of the next argument
4170(006c): 8d 18 bd 02 '               rdbyte    t0,t1 wz                ' end of string?
4174(006d): 73 00 68 5c '         if_z  jmp       #su_argv_done           ' yes - terminate qrgv array
4178(006e): 04 1e fd 80 '               add       t3,#4                   ' no - save new pointer ...          
417c(006f): 8f 1a 3d 08 '               wrlong    t1,t3                   ' ... in the argv array          
4180(0070): 4c 00 7c 5c '               jmp       #su_argv_loop           ' ... and keep processing
4184(0071):             ' su_argv_nextchar        
4184(0071): 01 1a fd 80 '               add       t1,#1                   '  process ...              
4188(0072): 4c 00 7c 5c '               jmp       #su_argv_loop           '  ... the next character          
418c(0073):             ' su_argv_done                                                        
418c(0073): 04 1e fd 80 '               add       t3,#4                   '   ' terminate argv array with a null entry   
4190(0074): 00 18 fd a0 '               mov       t0,#0                   '   long[b] := 0                               
4194(0075): 8f 18 3d 08 '               wrlong    t0,t3                   '                                              
4198(0076): 00 00 7c 5c '               jmp       #done                   '   
419c(0077):             ' no_args                                         ' 
419c(0077): 00 18 fd a0 '               mov       t0,#0                   ' if no stored string ...   
41a0(0078): 94 18 3d 04 '               wrword    t0,argc                 ' ... set argc ...                    
41a4(0079): 96 18 3d 08 '               wrlong    t0,argv_start           ' ... and argv_0 to zero                 
41a8(007a): 95 2c 3d 04 '               wrword    argv_start,argv         ' set argv to argv_0          
41ac(007b): 00 00 7c 5c '               jmp       #done                   
41b0(007c):             ' skip_to_non_space
41b0(007c): 8d 18 bd 00 '               rdbyte    t0,t1
41b4(007d): 20 18 7d 86 '               cmp       t0,#" " wz
41b8(007e): 01 1a e9 80 '         if_z  add       t1,#1     
41bc(007f): 7c 00 68 5c '         if_z  jmp       #skip_to_non_space          
41c0(0080):             ' skip_to_non_space_ret
41c0(0080): 00 00 7c 5c '               ret
41c4(0081):             ' skip_to_space
41c4(0081): 8d 18 bd 02 '               rdbyte    t0,t1 wz
41c8(0082): 8b 00 68 5c '         if_z  jmp       #skip_to_space_ret
41cc(0083): 22 18 7d 86 '               cmp       t0,#QUOTE_CHAR wz
41d0(0084): 01 34 e9 6c '         if_z  xor       q,#1
41d4(0085): 89 00 68 5c '         if_z  jmp       #:skip_char
41d8(0086): 20 18 7d 86 '               cmp       t0,#" " wz
41dc(0087): 89 00 54 5c '         if_nz jmp       #:skip_char
41e0(0088): 8b 34 7d ec '               tjz       q,#skip_to_space_ret
41e4(0089):             ' :skip_char              
41e4(0089): 01 1a fd 80 '               add       t1,#1
41e8(008a): 81 00 7c 5c '               jmp       #skip_to_space          
41ec(008b):             ' skip_to_space_ret
41ec(008b): 00 00 7c 5c '               ret
41f0(008c): 00 00 00 00 ' t0            long      0
41f4(008d): 00 00 00 00 ' t1            long      0
41f8(008e): 00 00 00 00 ' t2            long      0
41fc(008f): 00 00 00 00 ' t3            long      0
4200(0090): ff ff ff 00 ' low24         long      $FFFFFF
4204(0091): fc 7e 00 00 ' command       long      COGSTORE   
4208(0092): 00 00 00 30 ' size_cmd      long      CMD_SIZE
420c(0093): ce fa ed fe ' response      long      CMD_RESPONSE
4210(0094): 30 7f 00 00 ' argc          long      ARGC_ADDR
4214(0095): 32 7f 00 00 ' argv          long      ARGV_ADDR
4218(0096): 34 7f 00 00 ' argv_start    long      ARGV_0
421c(0097): 00 02 00 00 ' d_inc         long      1<<9
4220(0098): 00 00 00 00 ' len           long      0                       ' storage used (longs)
4224(0099): 00 00 00 00 ' n             long      0
4228(009a): 00 00 00 00 ' q             long      0
422c(009b): 00 00 00 00 ' storage       long      0                       ' long storage starts here      
'=========================== Method #1: PUB Start =============================
'PUB Start
'------------------------------------------------------------------------------
  coginit(7, @entry, 0)
'------------------------------------------------------------------------------
4230: 37 22          PUSH#kp	7 ($7)
4232: c7 24          PUSH#.L	OBJ+36
4234: 35             PUSH#0	
4235: 2c             COGISUB	
4236: 32             RETURN	
'=========================== Method #2: PUB Valid =============================
'PUB Valid : ok
'------------------------------------------------------------------------------
  long[COGSTORE] := -1 ' any invalid command
'------------------------------------------------------------------------------
4237: 34             PUSH#-1	
4238: 39 7e fc       PUSH#k2	32508
423b: c1             POP.L	Mem[]
'------------------------------------------------------------------------------
  repeat 100
'------------------------------------------------------------------------------
423c: 38 64          PUSH#k1	100
423e: 08 10          LOOPJPF	.+16 (dest:$4250)
'------------------------------------------------------------------------------
    if long[COGSTORE] == CMD_RESPONSE
'------------------------------------------------------------------------------
4240: 39 7e fc       PUSH#k2	32508
4243: c0             PUSH.L	Mem[]
4244: 3b fe ed fa ce PUSH#k4	-17958194
4249: fc             EQ   	
424a: 0a 02          JPF  	.+2 (dest:$424e)
'------------------------------------------------------------------------------
      return -1
'------------------------------------------------------------------------------
424c: 34             PUSH#-1	
424d: 33             RETVAL	
424e: 09 70          LOOPRPT	.-16 (dest:$4240)
'------------------------------------------------------------------------------
  return 0
'------------------------------------------------------------------------------
4250: 35             PUSH#0	
4251: 33             RETVAL	
4252: 32             RETURN	
'============================ Method #3: PUB Stop =============================
'PUB Stop
'------------------------------------------------------------------------------
  if Valid
'------------------------------------------------------------------------------
4253: 00             FRAME	Call with return value	
4254: 05 02          CALL 	+2 
4256: 0a 03          JPF  	.+3 (dest:$425b)
'------------------------------------------------------------------------------
    cogstop(7)
'------------------------------------------------------------------------------
4258: 37 22          PUSH#kp	7 ($7)
425a: 21             COGSTOP	
425b: 32             RETURN	
'=========================== Method #4: PUB Write =============================
'PUB Write(Addr) : ok
'------------------------------------------------------------------------------
  if Valid
'------------------------------------------------------------------------------
425c: 00             FRAME	Call with return value	
425d: 05 02          CALL 	+2 
425f: 0a 1e          JPF  	.+30 (dest:$427f)
'------------------------------------------------------------------------------
    long[COGSTORE] := CMD_WRITE | Addr
'------------------------------------------------------------------------------
4261: 37 1c          PUSH#kp	536870912 ($20000000)
4263: 64             PUSH 	Locals+4
4264: ea             BIT_OR	
4265: 39 7e fc       PUSH#k2	32508
4268: c1             POP.L	Mem[]
'------------------------------------------------------------------------------
    repeat 100000
'------------------------------------------------------------------------------
4269: 3a 01 86 a0    PUSH#k3	100000
426d: 08 0c          LOOPJPF	.+12 (dest:$427b)
'------------------------------------------------------------------------------
      if long[COGSTORE] == 0
'------------------------------------------------------------------------------
426f: 39 7e fc       PUSH#k2	32508
4272: c0             PUSH.L	Mem[]
4273: 35             PUSH#0	
4274: fc             EQ   	
4275: 0a 02          JPF  	.+2 (dest:$4279)
'------------------------------------------------------------------------------
        return -1
'------------------------------------------------------------------------------
4277: 34             PUSH#-1	
4278: 33             RETVAL	
4279: 09 74          LOOPRPT	.-12 (dest:$426f)
'------------------------------------------------------------------------------
    return 0
'------------------------------------------------------------------------------
427b: 35             PUSH#0	
427c: 33             RETVAL	
'------------------------------------------------------------------------------
  else
'------------------------------------------------------------------------------
427d: 04 02          GOTO 	.+2 (dest:$4281)
'------------------------------------------------------------------------------
    return 0
'------------------------------------------------------------------------------
427f: 35             PUSH#0	
4280: 33             RETVAL	
4281: 32             RETURN	
'============================ Method #5: PUB Read =============================
'PUB Read(Addr) : ok
'------------------------------------------------------------------------------
  if Valid
'------------------------------------------------------------------------------
4282: 00             FRAME	Call with return value	
4283: 05 02          CALL 	+2 
4285: 0a 1e          JPF  	.+30 (dest:$42a5)
'------------------------------------------------------------------------------
    long[COGSTORE] := CMD_READ | Addr
'------------------------------------------------------------------------------
4287: 37 1b          PUSH#kp	268435456 ($10000000)
4289: 64             PUSH 	Locals+4
428a: ea             BIT_OR	
428b: 39 7e fc       PUSH#k2	32508
428e: c1             POP.L	Mem[]
'------------------------------------------------------------------------------
    repeat 100000
'------------------------------------------------------------------------------
428f: 3a 01 86 a0    PUSH#k3	100000
4293: 08 0c          LOOPJPF	.+12 (dest:$42a1)
'------------------------------------------------------------------------------
      if long[COGSTORE] == 0
'------------------------------------------------------------------------------
4295: 39 7e fc       PUSH#k2	32508
4298: c0             PUSH.L	Mem[]
4299: 35             PUSH#0	
429a: fc             EQ   	
429b: 0a 02          JPF  	.+2 (dest:$429f)
'------------------------------------------------------------------------------
        return -1
'------------------------------------------------------------------------------
429d: 34             PUSH#-1	
429e: 33             RETVAL	
429f: 09 74          LOOPRPT	.-12 (dest:$4295)
'------------------------------------------------------------------------------
    return 0
'------------------------------------------------------------------------------
42a1: 35             PUSH#0	
42a2: 33             RETVAL	
'------------------------------------------------------------------------------
  else
'------------------------------------------------------------------------------
42a3: 04 02          GOTO 	.+2 (dest:$42a7)
'------------------------------------------------------------------------------
    return 0
'------------------------------------------------------------------------------
42a5: 35             PUSH#0	
42a6: 33             RETVAL	
42a7: 32             RETURN	
'============================ Method #6: PUB Size =============================
'PUB Size | s
'------------------------------------------------------------------------------
  if not Valid
'------------------------------------------------------------------------------
42a8: 00             FRAME	Call with return value	
42a9: 05 02          CALL 	+2 
42ab: ff             LOG_NOT	
42ac: 0a 02          JPF  	.+2 (dest:$42b0)
'------------------------------------------------------------------------------
    return -1
'------------------------------------------------------------------------------
42ae: 34             PUSH#-1	
42af: 33             RETVAL	
'------------------------------------------------------------------------------
  long[COGSTORE] := CMD_SIZE | $FFFFFF 
'------------------------------------------------------------------------------
42b0: 3b 30 00 00 00 PUSH#k4	805306368
42b5: 37 37          PUSH#kp	16777215 ($ffffff)
42b7: ea             BIT_OR	
42b8: 39 7e fc       PUSH#k2	32508
42bb: c1             POP.L	Mem[]
'------------------------------------------------------------------------------
  repeat 100
'------------------------------------------------------------------------------
42bc: 38 64          PUSH#k1	100
42be: 08 19          LOOPJPF	.+25 (dest:$42d9)
'------------------------------------------------------------------------------
    if long[COGSTORE] <> CMD_SIZE | $FFFFFF
'------------------------------------------------------------------------------
42c0: 39 7e fc       PUSH#k2	32508
42c3: c0             PUSH.L	Mem[]
42c4: 3b 30 00 00 00 PUSH#k4	805306368
42c9: 37 37          PUSH#kp	16777215 ($ffffff)
42cb: ea             BIT_OR	
42cc: fb             NE   	
42cd: 0a 08          JPF  	.+8 (dest:$42d7)
'------------------------------------------------------------------------------
      return long[COGSTORE] & $FFFFFF
'------------------------------------------------------------------------------
42cf: 39 7e fc       PUSH#k2	32508
42d2: c0             PUSH.L	Mem[]
42d3: 37 37          PUSH#kp	16777215 ($ffffff)
42d5: e8             BIT_AND	
42d6: 33             RETVAL	
42d7: 09 67          LOOPRPT	.-25 (dest:$42c0)
'------------------------------------------------------------------------------
  return -2
'------------------------------------------------------------------------------
42d9: 37 60          PUSH#kp	-2 ($fffffffe)
42db: 33             RETVAL	
42dc: 32             RETURN	
'=========================== Method #7: PUB Setup =============================
'PUB Setup(addr) : i
'------------------------------------------------------------------------------
  word[ARGC_ADDR] := 0
'------------------------------------------------------------------------------
42dd: 35             PUSH#0	
42de: 39 7f 30       PUSH#k2	32560
42e1: a1             POP.W	Mem[]
'------------------------------------------------------------------------------
  word[ARGV_ADDR] := 0
'------------------------------------------------------------------------------
42e2: 35             PUSH#0	
42e3: 39 7f 32       PUSH#k2	32562
42e6: a1             POP.W	Mem[]
'------------------------------------------------------------------------------
  repeat i from 0 to ARGV_MAX-1
'------------------------------------------------------------------------------
42e7: 35             PUSH#0	
42e8: 61             POP  	Locals+0
'------------------------------------------------------------------------------
    long[ARGV_0][i] := 0
'------------------------------------------------------------------------------
42e9: 35             PUSH#0	
42ea: 39 7f 34       PUSH#k2	32564
42ed: 60             PUSH 	Locals+0
42ee: d1             POP.L	Mem[][]
42ef: 35             PUSH#0	
42f0: 37 04          PUSH#kp	32 ($20)
42f2: 36             PUSH#1	
42f3: ed             SUB  	
42f4: 62 02 72       USING	Locals+0, RPTINCJ .-14 (dest:$42e9)
'------------------------------------------------------------------------------
  if not Valid
'------------------------------------------------------------------------------
42f7: 00             FRAME	Call with return value	
42f8: 05 02          CALL 	+2 
42fa: ff             LOG_NOT	
42fb: 0a 2c          JPF  	.+44 (dest:$4329)
'------------------------------------------------------------------------------
    word[ARGC_ADDR] := 1
'------------------------------------------------------------------------------
42fd: 36             PUSH#1	
42fe: 39 7f 30       PUSH#k2	32560
4301: a1             POP.W	Mem[]
'------------------------------------------------------------------------------
    word[ARGV_ADDR] := ARGV_0
'------------------------------------------------------------------------------
4302: 39 7f 34       PUSH#k2	32564
4305: 39 7f 32       PUSH#k2	32562
4308: a1             POP.W	Mem[]
'------------------------------------------------------------------------------
    long[ARGV_0] := ARGV_0 + 4*(ARGV_MAX-2)
'------------------------------------------------------------------------------
4309: 39 7f 34       PUSH#k2	32564
430c: 37 01          PUSH#kp	4 ($4)
430e: 37 04          PUSH#kp	32 ($20)
4310: 37 00          PUSH#kp	2 ($2)
4312: ed             SUB  	
4313: f4             MPY  	
4314: ec             ADD  	
4315: 39 7f 34       PUSH#k2	32564
4318: c1             POP.L	Mem[]
'------------------------------------------------------------------------------
    long[ARGV_0][ARGV_MAX-2] := $6C6C756E ' null
'------------------------------------------------------------------------------
4319: 3b 6c 6c 75 6e PUSH#k4	1819047278
431e: 39 7f 34       PUSH#k2	32564
4321: 37 04          PUSH#kp	32 ($20)
4323: 37 00          PUSH#kp	2 ($2)
4325: ed             SUB  	
4326: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  else
'------------------------------------------------------------------------------
4327: 04 1c          GOTO 	.+28 (dest:$4345)
'------------------------------------------------------------------------------
    long[COGSTORE] := CMD_SETUP | Addr
'------------------------------------------------------------------------------
4329: 37 1d          PUSH#kp	1073741824 ($40000000)
432b: 64             PUSH 	Locals+4
432c: ea             BIT_OR	
432d: 39 7e fc       PUSH#k2	32508
4330: c1             POP.L	Mem[]
'------------------------------------------------------------------------------
    repeat 100000
'------------------------------------------------------------------------------
4331: 3a 01 86 a0    PUSH#k3	100000
4335: 08 0c          LOOPJPF	.+12 (dest:$4343)
'------------------------------------------------------------------------------
      if long[COGSTORE] == 0
'------------------------------------------------------------------------------
4337: 39 7e fc       PUSH#k2	32508
433a: c0             PUSH.L	Mem[]
433b: 35             PUSH#0	
433c: fc             EQ   	
433d: 0a 02          JPF  	.+2 (dest:$4341)
'------------------------------------------------------------------------------
        return -1
'------------------------------------------------------------------------------
433f: 34             PUSH#-1	
4340: 33             RETVAL	
4341: 09 74          LOOPRPT	.-12 (dest:$4337)
'------------------------------------------------------------------------------
    return 0
'------------------------------------------------------------------------------
4343: 35             PUSH#0	
4344: 33             RETVAL	
4345: 32             RETURN	
4346: 00 00       

'******************************************************************************
'                              Catalina_LMM.spin                               
'******************************************************************************

'=================================== CONs =====================================
SignFlag = 1
ZeroFlag = 2
NaNFlag = 8
'=============================== Object Header ================================
4348: a8 07 03 00 ' 1960 bytes, 3-1 methods, 0 object pointers
434c: 88 07 00 00 ' ptr #1 to $4ad0: PUB Entry_Addr (locals size: 0)
4350: 8c 07 00 00 ' ptr #2 to $4ad4: PUB Run (locals size: 0)
'================================ DAT Section =================================
4354(0000):             '  org 0
4354(0000):             ' entry
4354(0000): 02 00 7c 5c '    jmp #INIT            '$00
4358(0001): 02 00 7c 5c '    jmp #INIT            '$01 remove this line when using POD, since it
435c(0002): 53 00 7c 5c ' INIT    jmp #lmm_init   '$02
4360(0003): 81 00 7c 5c ' LODL    jmp #load_l     '$03
4364(0004): 83 00 7c 5c ' LODA    jmp #load_a     '$04
4368(0005): 85 00 7c 5c ' LODF    jmp #fp_ind     '$05
436c(0006): 88 00 7c 5c ' PSHL    jmp #push_l     '$06
4370(0007): a9 00 7c 5c ' PSHB    jmp #push_b     '$07
4374(0008): b1 00 7c 5c ' CPYB    jmp #copy_b     '$08
4378(0009): be 00 7c 5c ' NEWF    jmp #new_fp     '$09
437c(000a): c4 00 7c 5c ' RETF    jmp #fp_ret     '$0a
4380(000b): c9 00 7c 5c ' CALA    jmp #f_call     '$0b
4384(000c): c6 00 7c 5c ' RETN    jmp #f_ret      '$0c
4388(000d): cb 00 7c 5c ' CALI    jmp #f_cali     '$0d
438c(000e): ce 00 7c 5c ' JMPA    jmp #f_jump     '$0e
4390(000f): d0 00 7c 5c ' JMPI    jmp #f_jmpi     '$0f
4394(0010): de 00 7c 5c ' DIVS    jmp #f_d32s     '$10
4398(0011): f0 00 7c 5c ' DIVU    jmp #f_d32u     '$11
439c(0012): fc 00 7c 5c ' MULT    jmp #f_m32      '$12
43a0(0013): 06 01 7c 5c ' BR_Z    jmp #bra_z      '$13
43a4(0014): 08 01 7c 5c ' BRNZ    jmp #bra_nz     '$14
43a8(0015): 0a 01 7c 5c ' BRAE    jmp #bra_ae     '$15
43ac(0016): 0c 01 7c 5c ' BR_A    jmp #bra_a      '$16
43b0(0017): 0e 01 7c 5c ' BRBE    jmp #bra_be     '$17
43b4(0018): 10 01 7c 5c ' BR_B    jmp #bra_b      '$18
43b8(0019): 12 01 7c 5c ' SYSP    jmp #plugin     '$19
43bc(001a): 8b 00 7c 5c ' PSHA    jmp #push_a     '$1a
43c0(001b): 32 01 7c 5c ' FADD    jmp #flt_add    '$1b
43c4(001c): 31 01 7c 5c ' FSUB    jmp #flt_sub    '$1c
43c8(001d): 47 01 7c 5c ' FMUL    jmp #flt_mul    '$1d
43cc(001e): 56 01 7c 5c ' FDIV    jmp #flt_div    '$1e
43d0(001f): 82 01 7c 5c ' FCMP    jmp #flt_cmp    '$1f
43d4(0020): 66 01 7c 5c ' FLIN    jmp #flt_int    '$20
43d8(0021): 73 01 7c 5c ' INFL    jmp #int_flt    '$21
43dc(0022): 93 00 7c 5c ' PSHM    jmp #push_m     '$22
43e0(0023): 9e 00 7c 5c ' POPM    jmp #pop_m      '$23
43e4(0024): 8d 00 7c 5c ' PSHF    jmp #push_i     '$24
43e8(0025): d2 00 7c 5c ' RLNG    jmp #rd_long    '$25
43ec(0026): d4 00 7c 5c ' RWRD    jmp #rd_word    '$26
43f0(0027): d6 00 7c 5c ' RBYT    jmp #rd_byte    '$27
43f4(0028): d8 00 7c 5c ' WLNG    jmp #wr_long    '$28
43f8(0029): da 00 7c 5c ' WWRD    jmp #wr_word    '$29
43fc(002a): dc 00 7c 5c ' WBYT    jmp #wr_byte    '$2a
4400(002b): 00 00 00 00 ' PC      long 0          '$2b
4404(002c): 00 00 00 00 ' SP      long 0          '$2c
4408(002d): 00 00 00 00 ' FP      long 0          '$2d
440c(002e): 00 00 00 00 ' RI      long 0          '$2e
4410(002f): 00 00 00 00 ' BC      long 0          '$2f
4414(0030): 00 00 00 00 ' BA      long 0          '$30
4418(0031): 00 00 00 00 ' BZ      long 0          '$31
441c(0032): 00 00 00 00 ' CS      long 0          '$32
4420(0033): 00 00 00 00 ' r0      long 0          '$33
4424(0034): 00 00 00 00 ' r1      long 0          '$34
4428(0035): 00 00 00 00 ' r2      long 0          '$35
442c(0036): 00 00 00 00 ' r3      long 0          '$36
4430(0037): 00 00 00 00 ' r4      long 0          '$37
4434(0038): 00 00 00 00 ' r5      long 0          '$38
4438(0039): 00 00 00 00 ' r6      long 0          '$39
443c(003a): 00 00 00 00 ' r7      long 0          '$3a
4440(003b): 00 00 00 00 ' r8      long 0          '$3b
4444(003c): 00 00 00 00 ' r9      long 0          '$3c
4448(003d): 00 00 00 00 ' r10     long 0          '$3d
444c(003e): 00 00 00 00 ' r11     long 0          '$3e
4450(003f): 00 00 00 00 ' r12     long 0          '$3f
4454(0040): 00 00 00 00 ' r13     long 0          '$40
4458(0041): 00 00 00 00 ' r14     long 0          '$41
445c(0042): 00 00 00 00 ' r15     long 0          '$42
4460(0043): 00 00 00 00 ' r16     long 0          '$43
4464(0044): 00 00 00 00 ' r17     long 0          '$44
4468(0045): 00 00 00 00 ' r18     long 0          '$45
446c(0046): 00 00 00 00 ' r19     long 0          '$46
4470(0047): 00 00 00 00 ' r20     long 0          '$47
4474(0048): 00 00 00 00 ' r21     long 0          '$48
4478(0049): 00 00 00 00 ' r22     long 0          '$49
447c(004a): 00 00 00 00 ' r23     long 0          '$4a
4480(004b): 00 00 00 80 ' Bit31   long  $80000000 '$4b
4484(004c): ff ff ff ff ' all_1s  long  $ffffffff '$4c
4488(004d): ff 00 00 00 ' cviu_m1 long  $000000ff '$4d
448c(004e): ff ff 00 00 ' cviu_m2 long  $0000ffff '$4e
4490(004f): 00 00 00 ff ' top8    long  $ff000000 '$4f   ' top 8 bits bitmask
4494(0050): ff ff ff 00 ' low24   long  $00ffffff '$50   ' low 24 bits bitmask
4498(0051): 00 00 00 00 ' init_BZ long  $00000000 '$51   ' end of code / start of heap
449c(0052): 00 00 00 00 ' init_PC long  $00000000 '$52   ' the initial PC
44a0(0053):             ' lmm_init
44a0(0053): 01 66 fc 0c '         cogid   r0              '1 convert ...
44a4(0054): 02 66 fc 2c '         shl     r0,#2           '2 ... my cog id ...
44a8(0055): f0 67 bc 80 '         add     r0,par          '3 ... to my registration addr
44ac(0056): 33 66 bc 08 '         rdlong  r0,r0           '4 get my request block addr
44b0(0057):             ' wait
44b0(0057): 33 60 bc 0a '         rdlong  BA,r0 wz        '5 Wait till we are given the base address ...
44b4(0058): 57 00 68 5c '   if_z  jmp     #wait           '6 .. (required to relocate segments)
44b8(0059): 04 66 fc 80 '         add     r0,#4           '7 Load our initial SP ...
44bc(005a): 33 58 bc 08 '         rdlong  SP,r0           '8 ... from the request block
44c0(005b): 4c 63 fc a0 '         mov     BZ,#init_BZ<<2+8 '9 calculate ...
44c4(005c): 30 62 bc 80 '         add     BZ,BA           '10 ... pointer to initial BZ
44c8(005d): 31 56 bc a0 '         mov     PC,BZ           '11 load ...
44cc(005e): 04 56 fc 80 '         add     PC,#4           '12 ... initial  ...
44d0(005f): 2b 56 bc 08 '         rdlong  PC,PC           '13 ... PC and ...
44d4(0060): 31 62 bc 08 '         rdlong  BZ,BZ           '14 ... BZ and ...
44d8(0061): 72 00 fd 5c '         call    #Reloc          '15 ... relocate segments 
44dc(0062): 65 00 7c 5c '         jmp     #LMM_loop       '16 we can now start executing LMM code
44e0(0063): 00 00 00 00 '         nop                     '17
44e4(0064):             ' LMM_next
44e4(0064): 04 56 fc 80 '         add    PC,#4
44e8(0065):             ' LMM_loop
44e8(0065): 2b ce bc 08 '         rdlong LMM_1,PC
44ec(0066): 04 56 fc 80 '         add    PC,#4
44f0(0067):             ' LMM_1
44f0(0067): 00 00 00 00 '         nop
44f4(0068): 2b d4 bc 08 '         rdlong LMM_2,PC
44f8(0069): 04 56 fc 80 '         add    PC,#4
44fc(006a):             ' LMM_2
44fc(006a): 00 00 00 00 '         nop
4500(006b): 2b da bc 08 '         rdlong LMM_3,PC
4504(006c): 04 56 fc 80 '         add    PC,#4
4508(006d):             ' LMM_3
4508(006d): 00 00 00 00 '         nop
450c(006e): 2b e0 bc 08 '         rdlong LMM_4,PC
4510(006f): 04 56 fc 80 '         add    PC,#4
4514(0070):             ' LMM_4
4514(0070): 00 00 00 00 '         nop
4518(0071): 65 00 7c 5c '         jmp    #LMM_loop
451c(0072):             ' Reloc
451c(0072): 31 5e bc a0 '         mov   BC,BZ         ' length of data to be relocated
4520(0073): 03 5e fc 80 '         add   BC,#3         ' round up ...
4524(0074): 03 5e fc 64 '         andn  BC,#3         ' ... to a multiple of 4 bytes
4528(0075): 10 5e fc 84 '         sub   BC,#$10       ' omit first 16 bytes
452c(0076): 10 b6 ff a0 '         mov   t2,#$10       ' destination is byte 16
4530(0077): 30 b4 bf a0 '         mov   t1,BA         ' source is BA ...
4534(0078): 10 b4 ff 80 '         add   t1,#$10       ' ... plus 16 bytes 
4538(0079):             ' reloc_loop
4538(0079): 80 5e 7c ec '        tjz    BC,#Reloc_ret ' no more to copy
453c(007a): da b9 bf 08 '        rdlong t3,t1         ' read from src to t3
4540(007b): db b9 3f 08 '        wrlong t3,t2         ' write t3 to dst
4544(007c): 04 b4 ff 80 '        add    t1,#4         ' increment source
4548(007d): 04 b6 ff 80 '        add    t2,#4         ' increment destination
454c(007e): 04 5e fc 84 '        sub    BC,#4         ' decrement count ...
4550(007f): 79 00 7c 5c '        jmp    #reloc_loop   ' ... and keep copying
4554(0080):             ' Reloc_ret
4554(0080): 00 00 7c 5c '        ret        
4558(0081):             ' load_l
4558(0081): 2b 5c bc 08 '        rdlong RI,PC         ' load the long value
455c(0082): 64 00 7c 5c '        jmp    #LMM_next     ' increment PC, execute next instruction
4560(0083):             ' load_a
4560(0083): 2b 5c bc 08 '        rdlong RI,PC         ' load the address
4564(0084): 64 00 7c 5c '        jmp    #LMM_next     ' increment PC, execute next instruction
4568(0085):             ' fp_ind
4568(0085): 2b 5c bc 08 '        rdlong RI,PC         ' load the long value
456c(0086): 2d 5c bc d0 '        adds   RI,FP         ' add the frame pointer
4570(0087): 64 00 7c 5c '        jmp    #LMM_next     ' increment PC, execute next instruction
4574(0088):             ' push_l
4574(0088): 04 58 fc 84 '        sub    SP,#4         ' decrement SP
4578(0089): 2c 5c 3c 08 '        wrlong RI,SP         ' save value on stack
457c(008a): 65 00 7c 5c '        jmp    #LMM_loop     ' increment PC, execute next instruction
4580(008b):             ' push_a
4580(008b): 2b 5c bc 08 '        rdlong RI,PC         ' load the address
4584(008c): 8f 00 7c 5c '        jmp    #push_x       ' use the result as an address of the value to push
4588(008d):             ' push_i
4588(008d): 2b 5c bc 08 '        rdlong RI,PC         ' load the long value
458c(008e): 2d 5c bc d0 '        adds   RI,FP         ' add the frame pointer
4590(008f):             ' push_x
4590(008f): 2e 5c bc 08 '        rdlong RI,RI         ' read the value at that address
4594(0090): 04 58 fc 84 '        sub    SP,#4         ' decrement SP
4598(0091): 2c 5c 3c 08 '        wrlong RI,SP         ' save value on stack
459c(0092): 64 00 7c 5c '        jmp    #LMM_next     ' increment PC, execute next instruction
45a0(0093):             ' push_m
45a0(0093): 2b 5c bc 08 '        rdlong RI,PC         ' load the long value specifying the registers to push
45a4(0094): 39 32 fd 54 '        movd   :push_x,#r6   ' start with ...
45a8(0095): 06 5c fc 28 '        shr    RI,#6         ' ... r6
45ac(0096): 12 b4 ff a0 '        mov    t1,#18        ' we will push up to 18 registers (up to R24)
45b0(0097):             ' :push_nxt
45b0(0097): 01 5c fc 2b '        shr    RI,#1 wc,wz   ' save rx?
45b4(0098): 04 58 f0 84 '  if_c  sub    SP,#4         ' if so ...
45b8(0099):             ' :push_x                     ' ... save ...
45b8(0099): 2c 00 30 08 '  if_c  wrlong 0,SP          ' ... the register
45bc(009a): 64 00 68 5c '  if_z  jmp    #LMM_next     ' no more to save
45c0(009b): d9 33 bd 80 '        add    :push_x,dlsb  ' point to next register
45c4(009c): 97 b4 ff e4 '        djnz   t1,#:push_nxt ' continue till all 24 registers checked
45c8(009d): 64 00 7c 5c '        jmp    #LMM_next     ' increment PC, execute next instruction
45cc(009e):             ' pop_m
45cc(009e): 2b 5c bc 08 '        rdlong RI,PC         ' load the long value specifying the registers to push
45d0(009f): 4a 46 fd 54 '        movd   :pop_x,#r23   ' start with ...
45d4(00a0): 08 5c fc 2c '        shl    RI,#(32-24)   ' ... r23         
45d8(00a1): 12 b4 ff a0 '        mov    t1,#18        ' we will pop up to 18 registers (down to r6)
45dc(00a2):             ' :pop_nxt
45dc(00a2): 01 5c fc 2f '        shl    RI,#1 wc,wz   ' load rx?
45e0(00a3):             ' :pop_x                      ' if so ...
45e0(00a3): 2c 00 b0 08 '  if_c  rdlong 0,SP          ' ... load ...
45e4(00a4): 04 58 f0 80 '  if_c  add    SP,#4         ' ... the register
45e8(00a5): 64 00 68 5c '  if_z  jmp    #LMM_next
45ec(00a6): d9 47 bd 84 '        sub    :pop_x,dlsb   ' point to previous register
45f0(00a7): a2 b4 ff e4 '        djnz   t1,#:pop_nxt  ' continue till all 24 registers checked
45f4(00a8): 64 00 7c 5c '        jmp    #LMM_next     ' increment PC, execute next instruction
45f8(00a9):             ' push_b
45f8(00a9): 2b 5e bc 08 '        rdlong BC,PC         ' load the byte count
45fc(00aa): 04 56 fc 80 '        add    PC,#4         ' increment the PC
4600(00ab): 03 5e fc 80 '        add    BC,#3         ' round up BC ...
4604(00ac): 03 5e fc 64 '        andn   BC,#3         ' ... to be a multiple of 4
4608(00ad): 2f 58 bc 84 '        sub    SP,BC         ' decrement SP by rounded up size
460c(00ae): 33 b4 bf a0 '        mov    t1,R0         ' source is in R0
4610(00af): 2c b6 bf a0 '        mov    t2,SP         ' destination is SP
4614(00b0): b7 00 7c 5c '        jmp    #copy_longs   ' do the copy
4618(00b1):             ' copy_b
4618(00b1): 2b 5e bc 08 '        rdlong BC,PC         ' load the byte count
461c(00b2): 04 56 fc 80 '        add    PC,#4         ' increment the PC
4620(00b3): 03 5e fc 80 '        add    BC,#3         ' round up BC ...
4624(00b4): 03 5e fc 64 '        andn   BC,#3         ' ... to be a multiple of 4
4628(00b5): 34 b4 bf a0 '        mov    t1,R1         ' source is in R1
462c(00b6): 33 b6 bf a0 '        mov    t2,R0         ' destination is in R0
4630(00b7):             ' copy_longs
4630(00b7): 65 5e 7c ec '        tjz    BC,#LMM_Loop  ' no more to copy
4634(00b8): da b9 bf 08 '        rdlong t3,t1         ' read from src to t3
4638(00b9): db b9 3f 08 '        wrlong t3,t2         ' write t3 to dst
463c(00ba): 04 b4 ff 80 '        add    t1,#4         ' increment source
4640(00bb): 04 b6 ff 80 '        add    t2,#4         ' increment destination
4644(00bc): 04 5e fc 84 '        sub    BC,#4         ' decrement count ...
4648(00bd): b7 00 7c 5c '        jmp    #copy_longs   ' ... and keep copying
464c(00be):             ' new_fp
464c(00be): 04 58 fc 84 '        sub     SP,#4         ' decrement the stack pointer
4650(00bf): 2c 5a 3c 08 '        wrlong FP,SP         ' save FP to stack
4654(00c0): 2c 5a bc a0 '        mov    FP,SP         ' set up new FP
4658(00c1): 08 5e fc 80 '        add    BC,#8         ' calculate what SP was ...
465c(00c2): 2d 5e bc 80 '        add    BC,FP         ' ... before arguments were pushed
4660(00c3): 65 00 7c 5c '        jmp    #LMM_loop     ' execute the next instruction
4664(00c4):             ' fp_ret
4664(00c4): 2c 5a bc 08 '        rdlong FP,SP         ' restore previous FP
4668(00c5): 04 58 fc 80 '        add    SP,#4         ' increment the SP
466c(00c6):             ' f_ret
466c(00c6): 2c 56 bc 08 '        rdlong PC,SP         ' read the PC
4670(00c7): 04 58 fc 80 '        add    SP,#4         ' increment the SP
4674(00c8): 65 00 7c 5c '        jmp    #LMM_loop     ' execute the next instruction
4678(00c9):             ' f_call                    
4678(00c9): 2b 5c bc 08 '        rdlong RI,PC         ' get the address to call
467c(00ca): 04 56 fc 80 '        add    PC,#4         ' increment the PC (this is the return address)
4680(00cb):             ' f_cali
4680(00cb): 04 58 fc 84 '        sub    SP,#4         ' decrement the SP
4684(00cc): 2c 56 3c 08 '        wrlong PC,SP         ' save current PC to stack
4688(00cd): d0 00 7c 5c '        jmp    #f_jmpi       ' jump to location in RI
468c(00ce):             ' f_jump
468c(00ce): 2b 56 bc 08 '        rdlong PC,PC         ' get the address to jump to
4690(00cf): 65 00 7c 5c '        jmp    #LMM_loop     ' execute next instruction
4694(00d0):             ' f_jmpi
4694(00d0): 2e 56 bc a0 '        mov    PC,RI         ' get the address to jump to
4698(00d1): 65 00 7c 5c '        jmp    #LMM_loop     ' execute next instruction
469c(00d2):             ' rd_long
469c(00d2): 2e 5e bc 08 '         rdlong  BC,RI
46a0(00d3): 64 00 7c 5c '         jmp     #LMM_Next
46a4(00d4):             ' rd_word
46a4(00d4): 2e 5e bc 04 '         rdword  BC,RI
46a8(00d5): 64 00 7c 5c '         jmp     #LMM_Next
46ac(00d6):             ' rd_byte
46ac(00d6): 2e 5e bc 00 '         rdbyte  BC,RI
46b0(00d7): 64 00 7c 5c '         jmp     #LMM_Next
46b4(00d8):             ' wr_long
46b4(00d8): 2e 5e 3c 08 '         wrlong  BC,RI
46b8(00d9): 64 00 7c 5c '         jmp     #LMM_Next
46bc(00da):             ' wr_word
46bc(00da): 2e 5e 3c 04 '         wrword  BC,RI
46c0(00db): 64 00 7c 5c '         jmp     #LMM_Next
46c4(00dc):             ' wr_byte
46c4(00dc): 2e 5e 3c 00 '         wrbyte  BC,RI
46c8(00dd): 64 00 7c 5c '         jmp     #LMM_Next
46cc(00de):             ' f_d32s
46cc(00de): 20 b4 ff a0 '         mov  t1,#32
46d0(00df): 00 b6 ff a0 '         mov  t2,#0           ' tmp2 is temp register to hold the remainder
46d4(00e0): 34 c6 bf a0 '         mov  ftemp,r1
46d8(00e1): 33 c8 bf a0 '         mov  ftmp2,r0
46dc(00e2): 34 68 bc a8 '         abs  r1, r1
46e0(00e3): 33 66 bc a8 '         abs  r0, r0
46e4(00e4): e4 c7 bf 6c '         xor  ftemp, ftmp2
46e8(00e5):             ' :loop
46e8(00e5): 01 66 fc 2d '         shl  r0,#1 WC
46ec(00e6): 01 b6 ff 35 '         rcl  t2,#1 WC
46f0(00e7): 34 b6 bf e3 '         cmpsub t2,r1 WC,WZ
46f4(00e8): 01 66 f8 80 '  if_be add  r0,#1
46f8(00e9): e5 b4 ff e4 '         djnz t1,#:loop
46fc(00ea): db 69 bc a0 '         mov  r1,t2
4700(00eb): e4 c9 bf a1 '         mov  ftmp2,ftmp2 WC  ' get bit #31 into carry
4704(00ec): 34 68 bc b0 '         negc r1,r1                   ' adjust the sign of the remainder
4708(00ed): e3 c7 bf a1 '         mov  ftemp,ftemp WC  ' get bit #31 into carry
470c(00ee): 33 66 bc b0 '         negc r0,r0                   ' adjust the sign of the result
4710(00ef): 65 00 7c 5c '         jmp  #LMM_loop
4714(00f0):             ' f_d32u
4714(00f0): 20 c6 ff a0 '         mov ftemp,#32
4718(00f1): 00 c8 ff a0 '         mov ftmp2, #0
471c(00f2):             ' :up2
471c(00f2): 01 66 fc 2d '         shl r0,#1       WC
4720(00f3): 01 c8 ff 35 '         rcl ftmp2,#1    WC
4724(00f4): e4 69 3c 87 '         cmp r1,ftmp2    WC,WZ
4728(00f5): f8 00 44 5c '  if_a   jmp #:down
472c(00f6): 34 c8 bf 84 '         sub ftmp2,r1
4730(00f7): 01 66 fc 80 '         add r0,#1
4734(00f8):             ' :down
4734(00f8): 01 c6 ff 86 '         sub ftemp, #1   WZ
4738(00f9): f2 00 54 5c '  if_ne  jmp #:up2
473c(00fa): e4 69 bc a0 '         mov r1,ftmp2
4740(00fb): 65 00 7c 5c '         jmp #LMM_loop
4744(00fc):             ' f_m32
4744(00fc): 00 c6 ff a0 '         mov ftemp,#0
4748(00fd):             ' :start
4748(00fd): 00 66 7c 86 '         cmp r0,#0       WZ
474c(00fe): 04 01 68 5c '  if_e   jmp #:down3
4750(00ff): 01 66 fc 29 '         shr r0,#1       WC
4754(0100): 02 01 4c 5c '  if_ae  jmp #:down2
4758(0101): 34 c6 bf 81 '         add ftemp,r1    WC
475c(0102):             ' :down2
475c(0102): 01 68 fc 2d '         shl r1,#1       WC
4760(0103): fd 00 7c 5c '         jmp #:start
4764(0104):             ' :down3
4764(0104): e3 67 bc a0 '         mov r0,ftemp
4768(0105): 65 00 7c 5c '         jmp #LMM_loop
476c(0106):             ' bra_z
476c(0106): ce 00 68 5c '   if_z  jmp    #f_jump       ' if condition true, branch is equiv to jump
4770(0107): 64 00 7c 5c '         jmp    #LMM_next     ' increment PC, execute next instruction
4774(0108):             ' bra_nz
4774(0108): ce 00 54 5c '  if_nz  jmp    #f_jump       ' if condition true, branch is equiv to jump
4778(0109): 64 00 7c 5c '         jmp    #LMM_next     ' increment PC, execute next instruction
477c(010a):             ' bra_ae
477c(010a): ce 00 4c 5c '  if_ae  jmp    #f_jump       ' if condition true, branch is equiv to jump
4780(010b): 64 00 7c 5c '         jmp    #LMM_next     ' increment PC, execute next instruction
4784(010c):             ' bra_a
4784(010c): ce 00 44 5c '  if_a   jmp    #f_jump       ' if condition true, branch is equiv to jump
4788(010d): 64 00 7c 5c '         jmp    #LMM_next     ' increment PC, execute next instruction
478c(010e):             ' bra_be
478c(010e): ce 00 78 5c '  if_be  jmp    #f_jump       ' if condition true, branch is equiv to jump
4790(010f): 64 00 7c 5c '         jmp    #LMM_next     ' increment PC, execute next instruction
4794(0110):             ' bra_b
4794(0110): ce 00 70 5c '  if_b   jmp    #f_jump       ' if condition true, branch is equiv to jump
4798(0111): 64 00 7c 5c '         jmp    #LMM_next     ' increment PC, execute next instruction
479c(0112):             ' plugin
479c(0112): 36 66 bc a0 '         mov     r0,r3           ' get plugin type
47a0(0113): 80 66 7c 62 '         test    r0,#$80 wz      ' request by type?
47a4(0114): 17 01 68 5c '  if_z   jmp     #ptype          ' yes - must find plugin of this type
47a8(0115): 7f 66 fc 60 '         and     r0,#$7f         ' no - code is cog id
47ac(0116): 23 01 7c 5c '         jmp     #pid            ' invoke plugin by cog id
47b0(0117):             ' ptype
47b0(0117): f0 b5 bf a0 '         mov     t1,par          ' no - point to registry
47b4(0118): 00 b6 ff a0 '         mov     t2,#0           ' start at cog 0
47b8(0119):             ' plgt1
47b8(0119): 08 b6 7f 87 '         cmp     t2,#8 wc,wz     ' run out of plugins?
47bc(011a): 2f 01 4c 5c '  if_ae  jmp     #plugerr        ' yes - no such plugin
47c0(011b): da b9 bf 08 '         rdlong  t3,t1           ' no - check next plugin type
47c4(011c): 18 b8 ff 28 '         shr     t3,#24          ' is it ...
47c8(011d): 33 b8 3f 86 '         cmp     t3,r0 wz        ' ... the type what we wanted?
47cc(011e): 22 01 68 5c '  if_z   jmp     #plgt2          ' yes - use this plugin
47d0(011f): 01 b6 ff 80 '         add     t2,#1           ' no ...
47d4(0120): 04 b4 ff 80 '         add     t1,#4           ' ... check ...
47d8(0121): 19 01 7c 5c '         jmp     #plgt1          ' ... next cog
47dc(0122):             ' plgt2
47dc(0122): db 67 bc a0 '         mov     r0,t2           ' use the cog where we found the plugin
47e0(0123):             ' pid
47e0(0123): 02 66 fc 2c '         shl     r0,#2           ' multiply plugin (cog) id by 4 ...
47e4(0124): f0 67 bc 80 '         add     r0,par          ' add registry base to get registry entry
47e8(0125): 33 66 bc 08 '         rdlong  r0,r0           ' get request block from registry
47ec(0126): 4f 66 3c 62 '         test    r0,top8 wz      ' plugin registered?
47f0(0127): 2f 01 68 5c '  if_z   jmp     #plugerr        ' no - error 255
47f4(0128): 50 66 bc 60 '         and     r0,low24        ' yes - write request ...
47f8(0129): 33 6a 3c 08 '         wrlong  r2,r0           ' ... to request block
47fc(012a): 33 6c bc 0a ' loop    rdlong  r3,r0   wz      ' wait till ...
4800(012b): 2a 01 54 5c '  if_nz  jmp     #loop           ' ... request completed
4804(012c): 04 66 fc 80 '         add     r0,#4           ' get results ...
4808(012d): 33 66 bc 08 '         rdlong  r0,r0           ' ... from request block
480c(012e): 65 00 7c 5c '         jmp     #LMM_loop       'done
4810(012f): 01 66 fc a4 ' plugerr neg     r0,#1           ' plugin not registered
4814(0130): 65 00 7c 5c '         jmp     #LMM_loop
4818(0131): 4b 68 bc 6c ' flt_sub                 xor     r1, Bit31               ' negate B
481c(0132): 92 3b ff 5c ' flt_add                 call    #_Unpack2               ' unpack two variables
4820(0133): 65 00 78 5c '           if_c_or_z     jmp     #LMM_Loop               ' check for NaN or B = 0
4824(0134): 01 ba 7f 62 '                         test    flagA, #SignFlag wz     ' negate A mantissa if negative
4828(0135): df bf 97 a4 '           if_nz         neg     manA, manA
482c(0136): 01 c0 7f 62 '                         test    flagB, #SignFlag wz     ' negate B mantissa if negative
4830(0137): e2 c5 97 a4 '           if_nz         neg     manB, manB
4834(0138): de b5 bf a0 '                         mov     t1, expA                ' align mantissas
4838(0139): e1 b5 bf 84 '                         sub     t1, expB
483c(013a): da b5 bf a8 '                         abs     t1, t1
4840(013b): 1f b4 ff 4c '                         max     t1, #31
4844(013c): e1 bd 3f c3 '                         cmps    expA, expB wz,wc
4848(013d): da c5 87 38 '           if_nz_and_nc  sar     manB, t1
484c(013e): da bf 93 38 '           if_nz_and_c   sar     manA, t1
4850(013f): e1 bd 93 a0 '           if_nz_and_c   mov     expA, expB
4854(0140): e2 bf bf 80 '                         add     manA, manB              ' add the two mantissas
4858(0141): 00 be 7f c1 '                         cmps    manA, #0 wc, nr         ' set sign of result
485c(0142): 01 ba f3 68 '           if_c          or      flagA, #SignFlag
4860(0143): 01 ba cf 64 '           if_nc         andn    flagA, #SignFlag
4864(0144): df bf bf a8 '                         abs     manA, manA              ' pack result and exit
4868(0145): bc a9 ff 5c '                         call    #_Pack
486c(0146): 65 00 7c 5c '                         jmp     #LMM_Loop
4870(0147): 92 3b ff 5c ' flt_mul                 call    #_Unpack2               ' unpack two variables
4874(0148): 65 00 70 5c '           if_c          jmp     #LMM_Loop               ' check for NaN
4878(0149): e0 bb bf 6c '                         xor     flagA, flagB            ' get sign of result
487c(014a): e1 bd bf 80 '                         add     expA, expB              ' add exponents
4880(014b): 00 b4 ff a0 '                         mov     t1, #0                  ' t2 = upper 32 bits of manB
4884(014c): 20 b6 ff a0 '                         mov     t2, #32                 ' loop counter for multiply
4888(014d): 01 c4 ff 29 '                         shr     manB, #1 wc             ' get initial multiplier bit
488c(014e): df b5 b3 81 ' :multiply if_c          add     t1, manA wc             ' 32x32 bit multiply
4890(014f): 01 b4 ff 31 '                         rcr     t1, #1 wc
4894(0150): 01 c4 ff 31 '                         rcr     manB, #1 wc
4898(0151): 4e b7 ff e4 '                         djnz    t2, #:multiply
489c(0152): 03 b4 ff 2c '                         shl     t1, #3                  ' justify result and exit
48a0(0153): da bf bf a0 '                         mov     manA, t1
48a4(0154): bc a9 ff 5c '                         call    #_Pack
48a8(0155): 65 00 7c 5c '                         jmp     #LMM_Loop
48ac(0156): 92 3b ff 5c ' flt_div                 call    #_Unpack2               ' unpack two variables
48b0(0157): d5 67 b8 a0 '           if_c_or_z     mov     r0, NaN                 ' check for NaN or divide by 0
48b4(0158): 65 00 78 5c '           if_c_or_z     jmp     #LMM_Loop
48b8(0159): e0 bb bf 6c '                         xor     flagA, flagB            ' get sign of result
48bc(015a): e1 bd bf 84 '                         sub     expA, expB              ' subtract exponents
48c0(015b): 00 b4 ff a0 '                         mov     t1, #0                  ' clear quotient
48c4(015c): 1e b6 ff a0 '                         mov     t2, #30                 ' loop counter for divide
48c8(015d): 01 b4 ff 2c ' :divide                 shl     t1, #1                  ' divide the mantissas
48cc(015e): e2 bf 3f c3 '                         cmps    manA, manB wz,wc
48d0(015f): e2 bf af 84 '           if_z_or_nc    sub     manA, manB
48d4(0160): 01 b4 ef 80 '           if_z_or_nc    add     t1, #1
48d8(0161): 01 be ff 2c '                         shl     manA, #1
48dc(0162): 5d b7 ff e4 '                         djnz    t2, #:divide
48e0(0163): da bf bf a0 '                         mov     manA, t1                ' get result and exit
48e4(0164): bc a9 ff 5c '                         call    #_Pack
48e8(0165): 65 00 7c 5c '                         jmp     #LMM_Loop
48ec(0166): 33 ba bf a0 ' flt_int                 mov     flagA, r0               ' get integer value
48f0(0167): 00 66 fc a0 '                         mov     r0, #0                  ' set initial result to zero
48f4(0168): dd bf bf aa '                         abs     manA, flagA wz          ' get absolute value of integer
48f8(0169): 65 00 68 5c '           if_z          jmp     #LMM_Loop               ' if zero, exit
48fc(016a): 1f ba ff 28 '                         shr     flagA, #31              ' set sign flag
4900(016b): 1f bc ff a0 '                         mov     expA, #31               ' set initial value for exponent
4904(016c): 01 be ff 2d ' :normalize              shl     manA, #1 wc             ' normalize the mantissa
4908(016d): 01 bc cf 84 '           if_nc         sub     expA, #1                ' adjust exponent
490c(016e): 6c 01 4c 5c '           if_nc         jmp     #:normalize
4910(016f): 01 be ff 30 '                         rcr     manA, #1                ' justify mantissa
4914(0170): 02 be ff 28 '                         shr     manA, #2
4918(0171): bc a9 ff 5c '                         call    #_Pack                  ' pack and exit
491c(0172): 65 00 7c 5c '                         jmp     #LMM_Loop
4920(0173): 00 b4 ff a0 ' int_flt                 mov     t1, #0                  ' set for no rounding
4924(0174): 9e 77 ff 5c ' fix                     call    #_Unpack                ' unpack floating point value
4928(0175): 65 00 70 5c '           if_c          jmp     #LMM_Loop               ' check for NaN
492c(0176): 02 be ff 2c '                         shl     manA, #2                ' left justify mantissa
4930(0177): 00 66 fc a0 '                         mov     r0, #0                  ' initialize result to zero
4934(0178): de bd bf a4 '                         neg     expA, expA              ' adjust for exponent value
4938(0179): 1e bc ff 82 '                         add     expA, #30 wz
493c(017a): 20 bc 7f c1 '                         cmps    expA, #32 wc
4940(017b): 65 00 6c 5c '           if_nc_or_z    jmp     #LMM_Loop
4944(017c): de bf bf 28 '                         shr     manA, expA
4948(017d): da bf bf 80 '                         add     manA, t1                ' round up 1/2 lsb
494c(017e): 01 be ff 28 '                         shr     manA, #1
4950(017f): 01 ba 7f 62 '                         test    flagA, #signFlag wz     ' check sign and exit
4954(0180): df 67 bc 9c '                         sumnz   r0, manA
4958(0181): 65 00 7c 5c '                         jmp     #LMM_Loop
495c(0182): 33 b4 bf a0 ' flt_cmp                 mov     t1, r0               ' compare signs
4960(0183): 34 b4 bf 6c '                         xor     t1, r1
4964(0184): 4b b4 bf 62 '                         and     t1, Bit31 wz
4968(0185): 8c 01 68 5c '           if_z          jmp     #:cmp1                  ' same, then compare magnitude
496c(0186): 33 b4 bf a0 '                         mov     t1, r0               ' check for +0 or -0
4970(0187): 34 b4 bf 68 '                         or      t1, r1
4974(0188): 4b b4 bf 67 '                         andn    t1, Bit31 wz,wc
4978(0189): 65 00 68 5c '           if_z          jmp     #LMM_Loop
497c(018a): 4b 66 3c 61 '                         test    r0, Bit31 wc         ' compare signs
4980(018b): 65 00 7c 5c '                         jmp     #LMM_Loop
4984(018c): 4b 66 3c 62 ' :cmp1                   test    r0, Bit31 wz         ' check signs
4988(018d): 90 01 54 5c '           if_nz         jmp     #:cmp2
498c(018e): 34 66 3c 87 '                         cmp     r0, r1 wz,wc
4990(018f): 65 00 7c 5c '                         jmp     #LMM_Loop
4994(0190): 33 68 3c 87 ' :cmp2                   cmp     r1, r0 wz,wc      ' reverse test if negative
4998(0191): 65 00 7c 5c '                         jmp     #LMM_Loop
499c(0192): 33 b4 bf a0 ' _Unpack2                mov     t1, r0               ' save A
49a0(0193): 34 66 bc a0 '                         mov     r0, r1            ' unpack B to A
49a4(0194): 9e 77 ff 5c '                         call    #_Unpack
49a8(0195): 9d 01 70 5c '           if_c          jmp     #_Unpack2_ret           ' check for NaN
49ac(0196): 33 68 bc a0 '                         mov     r1, r0            ' save B variables
49b0(0197): dd c1 bf a0 '                         mov     flagB, flagA
49b4(0198): de c3 bf a0 '                         mov     expB, expA
49b8(0199): df c5 bf a0 '                         mov     manB, manA
49bc(019a): da 67 bc a0 '                         mov     r0, t1               ' unpack A
49c0(019b): 9e 77 ff 5c '                         call    #_Unpack
49c4(019c): 00 c4 7f 86 '                         cmp     manB, #0 wz             ' set Z flag
49c8(019d): 00 00 7c 5c ' _Unpack2_ret            ret
49cc(019e): 33 ba bf a0 ' _Unpack                 mov     flagA, r0            ' get sign
49d0(019f): 1f ba ff 28 '                         shr     flagA, #31
49d4(01a0): 33 be bf a0 '                         mov     manA, r0             ' get mantissa
49d8(01a1): d7 bf bf 60 '                         and     manA, Mask23
49dc(01a2): 33 bc bf a0 '                         mov     expA, r0             ' get exponent
49e0(01a3): 01 bc ff 2c '                         shl     expA, #1
49e4(01a4): 18 bc ff 2a '                         shr     expA, #24 wz
49e8(01a5): ab 01 68 5c '           if_z          jmp     #:zeroSubnormal         ' check for zero or subnormal
49ec(01a6): ff bc 7f 86 '                         cmp     expA, #255 wz           ' check if finite
49f0(01a7): b6 01 54 5c '           if_nz         jmp     #:finite
49f4(01a8): d5 67 bc a0 '                         mov     r0, NaN              ' no, then return NaN
49f8(01a9): 08 ba ff a0 '                         mov     flagA, #NaNFlag
49fc(01aa): b9 01 7c 5c '                         jmp     #:exit2
4a00(01ab): de bf 3f 6a ' :zeroSubnormal          or      manA, expA wz,nr        ' check for zero
4a04(01ac): b0 01 54 5c '           if_nz         jmp     #:subnorm
4a08(01ad): 02 ba ff 68 '                         or      flagA, #ZeroFlag        ' yes, then set zero flag
4a0c(01ae): 96 bc ff a4 '                         neg     expA, #150              ' set exponent and exit
4a10(01af): b9 01 7c 5c '                         jmp     #:exit2
4a14(01b0): 07 be ff 2c ' :subnorm                shl     manA, #7                ' fix justification for subnormals
4a18(01b1): d8 bf 3f 62 ' :subnorm2               test    manA, Bit29 wz
4a1c(01b2): b8 01 54 5c '           if_nz         jmp     #:exit1
4a20(01b3): 01 be ff 2c '                         shl     manA, #1
4a24(01b4): 01 bc ff 84 '                         sub     expA, #1
4a28(01b5): b1 01 7c 5c '                         jmp     #:subnorm2
4a2c(01b6): 06 be ff 2c ' :finite                 shl     manA, #6                ' justify mantissa to bit 29
4a30(01b7): d8 bf bf 68 '                         or      manA, Bit29             ' add leading one bit
4a34(01b8): 7f bc ff 84 ' :exit1                  sub     expA, #127              ' remove bias from exponent
4a38(01b9): 08 ba 7f 61 ' :exit2                  test    flagA, #NaNFlag wc      ' set C flag
4a3c(01ba): 00 be 7f 86 '                         cmp     manA, #0 wz             ' set Z flag
4a40(01bb): 00 00 7c 5c ' _Unpack_ret             ret
4a44(01bc): 00 be 7f 86 ' _Pack                   cmp     manA, #0 wz             ' check for zero
4a48(01bd): 00 bc eb a0 '           if_z          mov     expA, #0
4a4c(01be): cf 01 68 5c '           if_z          jmp     #:exit1
4a50(01bf): 01 be ff 2d ' :normalize              shl     manA, #1 wc             ' normalize the mantissa
4a54(01c0): 01 bc cf 84 '           if_nc         sub     expA, #1                ' adjust exponent
4a58(01c1): bf 01 4c 5c '           if_nc         jmp     #:normalize
4a5c(01c2): 02 bc ff 80 '                         add     expA, #2                ' adjust exponent
4a60(01c3): 00 bf ff 81 '                         add     manA, #$100 wc          ' round up by 1/2 lsb
4a64(01c4): 01 bc f3 80 '           if_c          add     expA, #1
4a68(01c5): 7f bc ff 80 '                         add     expA, #127              ' add bias to exponent
4a6c(01c6): d6 bd bf 40 '                         mins    expA, Minus23
4a70(01c7): ff bc ff 44 '                         maxs    expA, #255
4a74(01c8): 01 bc 7f c1 '                         cmps    expA, #1 wc             ' check for subnormals
4a78(01c9): cf 01 4c 5c '           if_nc         jmp     #:exit1
4a7c(01ca): 01 be ff 68 ' :subnormal              or      manA, #1                ' adjust mantissa
4a80(01cb): 01 be ff 20 '                         ror     manA, #1
4a84(01cc): de bd bf a4 '                         neg     expA, expA
4a88(01cd): de bf bf 28 '                         shr     manA, expA
4a8c(01ce): 00 bc ff a0 '                         mov     expA, #0                ' biased exponent = 0
4a90(01cf): df 67 bc a0 ' :exit1                  mov     r0, manA             ' bits 22:0 mantissa
4a94(01d0): 09 66 fc 28 '                         shr     r0, #9
4a98(01d1): de 67 bc 58 '                         movi    r0, expA             ' bits 23:30 exponent
4a9c(01d2): 1f ba ff 2c '                         shl     flagA, #31
4aa0(01d3): dd 67 bc 68 '                         or      r0, flagA            ' bit 31 sign
4aa4(01d4): 00 00 7c 5c ' _Pack_ret               ret
4aa8(01d5): ff ff ff 7f ' NaN                     long    $7FFF_FFFF
4aac(01d6): e9 ff ff ff ' Minus23                 long    -23
4ab0(01d7): ff ff 7f 00 ' Mask23                  long    $007F_FFFF
4ab4(01d8): 00 00 00 20 ' Bit29                   long    $2000_0000
4ab8(01d9): 00 02 00 00 ' dlsb                    long    1 << 9
4abc(01da):             ' t1                      res     1                       ' temporary values
4abc(01db):             ' t2                      res     1
4abc(01dc):             ' t3                      res     1
4abc(01dd):             ' flagA                   res     1
4abc(01de):             ' expA                    res     1
4abc(01df):             ' manA                    res     1
4abc(01e0):             ' flagB                   res     1
4abc(01e1):             ' expB                    res     1
4abc(01e2):             ' manB                    res     1
4abc(01e3):             ' ftemp                   res     1
4abc(01e4):             ' ftmp2                   res     1
4abc(01eb):             '               org       $1eb
4abc(01eb): 00 00 00 00 ' DEBUG_VECTORS long      0,0,0,0,0
4ac0(01ec): 00 00 00 00 ' 
4ac4(01ed): 00 00 00 00 ' 
4ac8(01ee): 00 00 00 00 ' 
4acc(01ef): 00 00 00 00 ' 
'========================= Method #1: PUB Entry_Addr ==========================
'PUB Entry_Addr : addr
'------------------------------------------------------------------------------
   addr := @entry ' Kernel Entry Address
'------------------------------------------------------------------------------
4ad0: c7 0c          PUSH#.L	OBJ+12
4ad2: 61             POP  	Locals+0
4ad3: 32             RETURN	
'============================ Method #2: PUB Run ==============================
'PUB Run (registry, request, Initial_BA, Initial_SP) : cog
'------------------------------------------------------------------------------
  long[request][2 * cogid + 1] := Initial_SP
'------------------------------------------------------------------------------
4ad4: 70             PUSH 	Locals+16
4ad5: 68             PUSH 	Locals+8
4ad6: 37 00          PUSH#kp	2 ($2)
4ad8: 3f 89          REGPUSH	$89?
4ada: f4             MPY  	
4adb: 36             PUSH#1	
4adc: ec             ADD  	
4add: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  long[request][2 * cogid]     := Initial_BA
'------------------------------------------------------------------------------
4ade: 6c             PUSH 	Locals+12
4adf: 68             PUSH 	Locals+8
4ae0: 37 00          PUSH#kp	2 ($2)
4ae2: 3f 89          REGPUSH	$89?
4ae4: f4             MPY  	
4ae5: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  coginit(cogid, @entry, registry)
'------------------------------------------------------------------------------
4ae6: 3f 89          REGPUSH	$89?
4ae8: c7 0c          PUSH#.L	OBJ+12
4aea: 64             PUSH 	Locals+4
4aeb: 2c             COGISUB	
4aec: 32             RETURN	
4aed: 00 00 00    

'******************************************************************************
'                         Catalina_HMI_Plugin_PC.spin                          
'******************************************************************************

'=================================== CONs =====================================
cols = 40
rows = 13
chrs = 520
sc_count = 281
nx = 0
ny = 1
buffer = 3
DATASIZE = 296
'=============================== Object Header ================================
4af0: 38 04 03 03 ' 1080 bytes, 3-1 methods, 3 object pointers
4af4: c4 03 00 00 ' ptr #1 to $4eb4: PUB ProxySetup (locals size: 0)
4af8: cb 03 34 00 ' ptr #2 to $4ebb: PUB Start (locals size: 52)
4afc: 38 04 0c 00 ' ptr #3 to $4f28: OBJ kbd : Catalina_PC_Keyboard.spin (VAR offset: 12)
4b00: 30 05 0c 00 ' ptr #4 to $5020: OBJ screen : Catalina_PC_Text.spin (VAR offset: 12)
4b04: f8 05 0c 00 ' ptr #5 to $50e8: OBJ common : Catalina_Common.spin (VAR offset: 12)
'================================ DAT Section =================================
4b08(0000):             '         org     0
4b08(0000):             ' HmiStart
4b08(0000): 01 e0 fd 0c '         cogid   t1              ' calculate ...
4b0c(0001): 02 e0 fd 2c '         shl     t1,#2           ' ... my ...
4b10(0002): f0 e1 bd 80 '         add     t1,par          ' ... request ...
4b14(0003): f0 d6 bd 08 '         rdlong  rqstptr,t1      ' ... block ...
4b18(0004): e2 d6 bd 60 '         and     rqstptr,low24   ' ... address
4b1c(0005): eb d8 bd a0 '         mov     rsltptr,rqstptr ' calculate ...
4b20(0006): 04 d8 fd 80 '         add     rsltptr,#4      ' ... my result address
4b24(0007):             ' loop
4b24(0007): eb da bd 0a '         rdlong  rqst,rqstptr wz ' wait ...
4b28(0008): 07 00 68 5c '   if_z  jmp     #loop           ' ... for a request
4b2c(0009): ed e0 bd a0 '         mov     t1,rqst
4b30(000a): 18 e0 fd 28 '         shr     t1,#24
4b34(000b): 20 e0 7d 87 '         cmp     t1,#32 wz,wc
4b38(000c): a1 00 44 5c '   if_a  jmp     #done_bad
4b3c(000d): 02 e0 fd 20 '         ror     t1,#2           ' lookup code address
4b40(000e): 16 e0 fd 80 '         add     t1,#svctable
4b44(000f): f0 24 bc 50 '         movs    :table,t1
4b48(0010): 02 e0 fd 24 '         rol     t1,#2
4b4c(0011): 03 e0 fd 2c '         shl     t1,#3
4b50(0012): 00 e2 bd a0 ' :table  mov     t2,0
4b54(0013): f0 e2 bd 28 '         shr     t2,t1
4b58(0014): ff e2 fd 60 '         and     t2,#$FF
4b5c(0015): f1 00 3c 5c '         jmp     t2              ' jump to code routine
4b60(0016):             ' svctable
4b60(0016): 1f          '         byte    initialize      ' 0
4b61(----): 38          '         byte    k_present       ' 1 
4b62(----): 3b          '         byte    k_get           ' 2
4b63(----): 47          '         byte    k_wait          ' 3
4b64(0017): 43          '         byte    k_new           ' 4
4b65(----): 4a          '         byte    k_ready         ' 5
4b66(----): 4e          '         byte    k_clear         ' 6
4b67(----): 3a          '         byte    k_state         ' 7 
4b68(0018): a1          '         byte    done_bad        ' 8
4b69(----): a1          '         byte    done_bad        ' 9
4b6a(----): a1          '         byte    done_bad        '10
4b6b(----): a3          '         byte    done_ok         '11 m_present ignored
4b6c(0019): a3          '         byte    done_ok         '12 m_button ignored  
4b6d(----): a3          '         byte    done_ok         '13 m_buttons ignored 
4b6e(----): a3          '         byte    done_ok         '14 m_abs_x ignored   
4b6f(----): a3          '         byte    done_ok         '15 m_abs_y ignored   
4b70(001a): a3          '         byte    done_ok         '16 m_abs_z ignored   
4b71(----): a3          '         byte    done_ok         '17 m_delta_x ignored 
4b72(----): a3          '         byte    done_ok         '18 m_delta_y ignored 
4b73(----): a3          '         byte    done_ok         '19 m_delta_z ignored 
4b74(001b): a3          '         byte    done_ok         '20 m_reset ignored   
4b75(----): 52          '         byte    t_geometry      '21
4b76(----): 56          '         byte    t_char          '22
4b77(----): 5f          '         byte    t_string        '23
4b78(001c): 6a          '         byte    t_int           '24
4b79(----): 8b          '         byte    t_unsigned      '25
4b7a(----): 8d          '         byte    t_hex           '26
4b7b(----): 98          '         byte    t_bin           '27
4b7c(001d): a3          '         byte    done_ok         '28 t_setpos ignored
4b7d(----): a3          '         byte    done_ok         '29 t_getpos ignored
4b7e(----): a3          '         byte    done_ok         '30 t_mode ignored
4b7f(----): a3          '         byte    done_ok         '31 t_scroll ignored
4b80(001e): a3          '         byte    done_ok         '32 t_color ignored
4b81(----): 00 00 00    
4b84(001f):             '         long                    ' align long
4b84(001f):             ' initialize
4b84(001f): ed f4 bd 08 '         rdlong  ppkbd,rqst      ' save pointer to keyboard parameters
4b88(0020): 04 da fd 80 '         add     rqst,#4         ' save pointer to ...
4b8c(0021): ed f6 bd 08 '         rdlong  ppmouse,rqst    ' ... mouse params
4b90(0022): 04 da fd 80 '         add     rqst,#4         ' save pointer to ...
4b94(0023): ed f8 bd 08 '         rdlong  ppscrn,rqst     ' ... screen parameters
4b98(0024): 04 da fd 80 '         add     rqst,#4         ' save pointer to ...
4b9c(0025): ed fa bd 08 '         rdlong  pptv,rqst       ' ... tv parameters
4ba0(0026): fc de bd a0 '         mov     t0,ppscrn       ' get ...
4ba4(0027): ef e0 bd 08 '         rdlong  t1,t0           ' ... screen ...
4ba8(0028): f0 fc bd a0 '         mov     scrcols,t1      ' ... cols
4bac(0029): 04 de fd 80 '         add     t0,#4           ' get ...
4bb0(002a): ef e2 bd 08 '         rdlong  t2,t0           ' ... screen ...
4bb4(002b): f1 fe bd a0 '         mov     scrrows,t2      ' ... rows
4bb8(002c): cf a6 fd 5c '         call    #m32            ' multiply rows by cols
4bbc(002d): ef 00 be a0 '         mov     scrsize,t0      ' save as acreen size
4bc0(002e): fc 04 be a0 '         mov     scrclrs,ppscrn  ' calculate ...
4bc4(002f): 08 04 fe 80 '         add     scrclrs,#8      ' ... screen color address
4bc8(0030): fc 02 be a0 '         mov     scrbuff,ppscrn  ' calculate ...
4bcc(0031): 0c 02 fe 80 '         add     scrbuff,#12     ' ... screen buffer address
4bd0(0032): 01 07 be a0 '         mov     scrpall,scrbuff ' calculate ...
4bd4(0033): 00 07 be 80 '         add     scrpall,scrsize ' ... palette ...
4bd8(0034): 00 07 be 80 '         add     scrpall,scrsize ' ... address
4bdc(0035): 03 09 be a0 '         mov     scrcurs,scrpall ' calculate ...
4be0(0036): 40 08 fe 80 '         add     scrcurs,#64     ' ... screen cursors address
4be4(0037): a3 00 7c 5c '         jmp     #done_ok
4be8(0038):             ' k_present
4be8(0038): 01 dc fd a0 '         mov     rslt,#1         ' presume ...
4bec(0039): a4 00 7c 5c '         jmp     #done           ' ... always present
4bf0(003a):             ' k_state
4bf0(003a): a3 00 7c 5c '         jmp     #done_ok        ' ignore        
4bf4(003b):             ' k_get
4bf4(003b): af 72 fd 5c '         call    #k_load         ' load key pointed to by par_tail
4bf8(003c): a3 00 68 5c '    if_z jmp     #done_ok        ' Z set if no key available
4bfc(003d):             ' k_consume
4bfc(003d): 01 e0 fd 80 '         add     t1,#1           ' increment ...
4c00(003e): 0f e0 fd 60 '         and     t1,#$f          ' ...
4c04(003f): fa de bd a0 '         mov     t0,ppkbd        ' ...
4c08(0040): 04 de fd 80 '         add     t0,#4           ' ...
4c0c(0041): ef e0 3d 08 '         wrlong  t1,t0           ' ... par_tail
4c10(0042): a4 00 7c 5c '         jmp     #done
4c14(0043): a8 5c fd 5c ' k_new   call    #k_setup        ' setup common values
4c18(0044): fa de bd a0 '         mov     t0,ppkbd        ' set par_tail ...
4c1c(0045): 04 de fd 80 '         add     t0,#4           ' ... to ...
4c20(0046): ef e2 3d 08 '         wrlong  t2,t0           ' ... par_head
4c24(0047):             ' k_wait
4c24(0047): af 72 fd 5c '         call    #k_load         ' load key pointed to by par_tail
4c28(0048): 47 00 68 5c '  if_z   jmp     #k_wait         ' Z set if no key available
4c2c(0049): 3d 00 7c 5c '         jmp     #k_consume      ' consume and return the key
4c30(004a):             ' k_ready
4c30(004a): a8 5c fd 5c '         call    #k_setup        ' setup common values
4c34(004b): a4 00 68 5c '   if_z  jmp     #done           ' rslt == 0 if no key ready
4c38(004c): 01 dc fd a4 '         neg     rslt,#1         ' rslt == -1 if a key is ready
4c3c(004d): a4 00 7c 5c '         jmp     #done
4c40(004e):             ' k_clear
4c40(004e): a8 5c fd 5c '         call    #k_setup        ' setup common values
4c44(004f): fa de bd a0 '         mov     t0,ppkbd        ' set par_head ...
4c48(0050): ef e0 3d 08 '         wrlong  t1,t0           ' .... to par_tail
4c4c(0051): a4 00 7c 5c '         jmp     #done
4c50(0052):             ' t_geometry
4c50(0052): fe dc bd a0 '         mov     rslt,scrcols    ' result is ...
4c54(0053): 08 dc fd 2c '         shl     rslt,#8         ' ... cols*256 ...
4c58(0054): ff dc bd 80 '         add     rslt,scrrows    ' ... plus rows
4c5c(0055): a4 00 7c 5c '         jmp     #done
4c60(0056):             ' t_char
4c60(0056): ed e8 bd a0 '         mov     t5,rqst         ' get ...
4c64(0057): ff e8 fd 60 '         and     t5,#$ff         ' ... char to write
4c68(0058): 0a e8 7d 86 '         cmp     t5,#$0a wz      ' translate ...
4c6c(0059): 5d 00 54 5c '   if_nz jmp     #:t_char_1      ' ... lf ...
4c70(005a): 0d e8 fd a0 '         mov     t5,#$0d         ' ... to ...
4c74(005b): c6 9c fd 5c '         call    #t_put5         ' ... cr ...
4c78(005c): 0a e8 fd a0 '         mov     t5,#$0a         ' ... lf
4c7c(005d):             ' :t_char_1
4c7c(005d): c6 9c fd 5c '         call    #t_put5         ' write char to screen at cursor
4c80(005e): a3 00 7c 5c '         jmp     #done_ok
4c84(005f):             ' t_string 
4c84(005f): e1 da bd 60 '         and     rqst,low23      ' source address is lower 23 bits of request
4c88(0060):             ' :t_strloop
4c88(0060): ed e8 bd 02 '         rdbyte  t5,rqst wz      ' get char to write
4c8c(0061): a3 00 68 5c '   if_z  jmp     #done_ok        ' finished if null byte
4c90(0062): 0a e8 7d 86 '         cmp     t5,#$0a wz      ' translate ...
4c94(0063): 67 00 54 5c '   if_nz jmp     #:t_str_1      ' ... lf ...
4c98(0064): 0d e8 fd a0 '         mov     t5,#$0d         ' ... to ...
4c9c(0065): c6 9c fd 5c '         call    #t_put5         ' ... cr ...
4ca0(0066): 0a e8 fd a0 '         mov     t5,#$0a         ' ... lf
4ca4(0067):             ' :t_str_1
4ca4(0067): c6 9c fd 5c '         call    #t_put5         ' write char to screen
4ca8(0068): 01 da fd 80 '         add     rqst,#1         ' increment string pointer
4cac(0069): 60 00 7c 5c '         jmp     #:t_strloop     ' put more chars
4cb0(006a):             ' t_int
4cb0(006a): c3 8a fd 5c '         call    #t_getnum       ' get number to print
4cb4(006b): 00 da 7d c3 '         cmps    rqst,#0 WC,WZ   ' positive?
4cb8(006c): 70 00 4c 5c '  if_ae  jmp     #t_uint         ' yes - no sign
4cbc(006d): 2d e8 fd a0 '         mov     t5,#$2d         ' no - prefix number with '-'
4cc0(006e): c6 9c fd 5c '         call    #t_put5         ' write char to screen at cursor
4cc4(006f): ed da bd ab '         abs     rqst,rqst WC,WZ ' make number positive
4cc8(0070):             ' t_uint
4cc8(0070): 87 00 68 5c '   if_z  jmp     #:t_int4        ' if zero, just print one digit
4ccc(0071): e3 e6 bd a0 '         mov     t4,maxdec       ' get largest possible decimal divisor
4cd0(0072):             ' :t_int2
4cd0(0072): f3 da 3d 87 '         cmp     rqst,t4 WC,WZ   ' is our number larger than that?
4cd4(0073): 79 00 4c 5c '  if_ae  jmp     #:t_int3        ' yes - start extracting decimal digits
4cd8(0074): f3 de bd a0 '         mov     t0,t4           ' no - divide divisor ...
4cdc(0075): 0a e0 fd a0 '         mov     t1,#10          ' ... by 10 ...
4ce0(0076): d4 be fd 5c '         call    #d32u           ' ... and ...
4ce4(0077): ef e6 bd a0 '         mov     t4,t0           ' ... try ...
4ce8(0078): 72 00 7c 5c '         jmp     #:t_int2        ' ... again
4cec(0079):             ' :t_int3
4cec(0079): 0a e6 7d 87 '         cmp     t4,#10 WC,WZ    ' is this the last digit?
4cf0(007a): 87 00 70 5c '  if_b   jmp     #:t_int4        ' yes - no need to divide any more
4cf4(007b): ed de bd a0 '         mov     t0,rqst         ' no - divide number ...
4cf8(007c): f3 e0 bd a0 '         mov     t1,t4           ' ... by  ...
4cfc(007d): d4 be fd 5c '         call    #d32u           ' ... divisor
4d00(007e): ef e8 bd a0 '         mov     t5,t0           ' convert quotient ...
4d04(007f): 30 e8 fd 80 '         add     t5,#$30         ' ... to digit char
4d08(0080): f0 da bd a0 '         mov     rqst,t1         ' save remainder for next time
4d0c(0081): c6 9c fd 5c '         call    #t_put5         ' write char to screen at cursor
4d10(0082): f3 de bd a0 '         mov     t0,t4           ' divide divisor ...
4d14(0083): 0a e0 fd a0 '         mov     t1,#10          ' ... by 10 ...
4d18(0084): d4 be fd 5c '         call    #d32u           ' ... and ...
4d1c(0085): ef e6 bd a0 '         mov     t4,t0           ' ... continue ...
4d20(0086): 79 00 7c 5c '         jmp     #:t_int3        ' ... with next digit
4d24(0087):             ' :t_int4
4d24(0087): ed e8 bd a0 '         mov     t5,rqst           ' convert last decimal digit ...
4d28(0088): 30 e8 fd 80 '         add     t5,#$30         ' ... to digit char
4d2c(0089): c6 9c fd 5c '         call    #t_put5         ' write char to screen
4d30(008a): a3 00 7c 5c '         jmp     #done_ok
4d34(008b):             ' t_unsigned
4d34(008b): c3 8a fd 5c '         call    #t_getnum       ' get number to print
4d38(008c): 70 00 7c 5c '         jmp     #t_uint         ' no sign, just print digits
4d3c(008d):             ' t_hex
4d3c(008d): c3 8a fd 5c '         call    #t_getnum       ' and get number to print
4d40(008e): 08 e6 fd a0 '         mov     t4,#8           ' print 8 digits
4d44(008f):             ' :t_hex1
4d44(008f): 04 da fd 24 '         rol     rqst,#4         ' convert 4 bits ...
4d48(0090): ed e8 bd a0 '         mov     t5,rqst         ' ... to '0' .. '9'
4d4c(0091): 0f e8 fd 60 '         and     t5,#$f          ' ... or ...
4d50(0092): 0a e8 7d 87 '         cmp     t5,#10 wc,wz    ' ... 'A' .. 'F' ...
4d54(0093): 07 e8 cd 80 '  if_ae  add     t5,#($41-$30-10)' ... depending ...
4d58(0094): 30 e8 fd 80 '         add     t5,#$30         ' ... on the digit value
4d5c(0095): c6 9c fd 5c '         call    #t_put5         ' write char to screen
4d60(0096): 8f e6 fd e4 '         djnz    t4,#:t_hex1     ' continue with next digit
4d64(0097): a3 00 7c 5c '         jmp     #done_ok
4d68(0098):             ' t_bin
4d68(0098): c3 8a fd 5c '         call    #t_getnum       ' get number to print
4d6c(0099): 20 e6 fd a0 '         mov     t4,#32          ' print 32 digits
4d70(009a):             ' :t_bin1
4d70(009a): 01 da fd 24 '         rol     rqst,#1         ' convert bit ...
4d74(009b): ed e8 bd a0 '         mov     t5,rqst         ' ... to '0' ...
4d78(009c): 01 e8 fd 60 '         and     t5,#1           ' ... or ...
4d7c(009d): 30 e8 fd 80 '         add     t5,#$30         ' ... '1'
4d80(009e): c6 9c fd 5c '         call    #t_put5         ' write char to screen
4d84(009f): 9a e6 fd e4 '         djnz    t4,#:t_bin1     ' continue with next digit
4d88(00a0): a3 00 7c 5c '         jmp     #done_ok
4d8c(00a1):             ' done_bad
4d8c(00a1): 01 dc fd a4 '         neg     rslt,#1         ' unknown code specified
4d90(00a2): a4 00 7c 5c '         jmp     #done
4d94(00a3):             ' done_ok
4d94(00a3): 00 dc fd a0 '         mov      rslt,#0        ' return zero
4d98(00a4):             ' done
4d98(00a4): ec dc 3d 08 '         wrlong   rslt,rsltptr   ' save result
4d9c(00a5): 00 dc fd a0 '         mov      rslt,#0        ' indicate ...
4da0(00a6): eb dc 3d 08 '         wrlong   rslt,rqstptr   ' ... request complete
4da4(00a7): 07 00 7c 5c '         jmp      #loop          ' wait for next request
4da8(00a8):             ' k_setup
4da8(00a8): fa de bd a0 '         mov     t0,ppkbd        ' get ...
4dac(00a9): ef e2 bd 08 '         rdlong  t2,t0           ' ... par_head
4db0(00aa): 04 de fd 80 '         add     t0,#4           ' get ...
4db4(00ab): ef e0 bd 08 '         rdlong  t1,t0           ' ... par_tail
4db8(00ac): f0 dc bd a0 '         mov     rslt,t1         ' set Z flag ...
4dbc(00ad): f1 dc bd 86 '         sub     rslt,t2 wz      ' ... and rslt = 0 if par_tail == par_head
4dc0(00ae):             ' k_setup_ret
4dc0(00ae): 00 00 7c 5c '         ret
4dc4(00af):             ' k_load
4dc4(00af): a8 5c fd 5c '         call    #k_setup        ' setup common values
4dc8(00b0): b9 00 68 5c '  if_z   jmp     #k_load_ret     ' Z flag set if no key available
4dcc(00b1): 10 de fd 80 '         add     t0,#16          ' get ...
4dd0(00b2): ef de bd 08 '         rdlong  t0,t0           ' ... bufaddr
4dd4(00b3): ef dc bd a0 '         mov     rslt,t0         ' load key ...
4dd8(00b4): f0 dc bd 80 '         add     rslt,t1         ' ... indicated ...
4ddc(00b5): ee dc bd 00 '         rdbyte  rslt,rslt       ' ... by par_tail
4de0(00b6): 04 dc 7d 86 '         cmp     rslt,#$04 wz    ' EOT?
4de4(00b7): 01 dc e9 a4 '  if_z   neg     rslt,#1         ' if so, return -1 (EOF)
4de8(00b8): 01 de fd a2 '         mov     t0,#1 wz        ' ensure Z flag not set!
4dec(00b9):             ' k_load_ret
4dec(00b9): 00 00 7c 5c '         ret
4df0(00ba):             ' t_setup
4df0(00ba): fd de bd a0 '         mov     t0,pptv         ' get ...
4df4(00bb): ef e2 bd 08 '         rdlong  t2,t0           ' ... tx_head
4df8(00bc): 04 de fd 80 '         add     t0,#4           ' get ...
4dfc(00bd): ef e0 bd 08 '         rdlong  t1,t0           ' ... tx_tail
4e00(00be): f1 e4 bd a0 '         mov     t3,t2           ' set Z flag ...
4e04(00bf): 01 e4 fd 80 '         add     t3,#1           ' ... if ...
4e08(00c0): ff e5 fd 60 '         and     t3,#$1ff        ' ... tx_tail 
4e0c(00c1): f2 e0 3d 86 '         cmp     t1,t3 wz        ' ... == (tx_head + 1) & $1ff
4e10(00c2):             ' t_setup_ret
4e10(00c2): 00 00 7c 5c '         ret
4e14(00c3):             ' t_getnum
4e14(00c3): e1 da bd 60 '         and     rqst,low23      ' source address is lower 23 bits of request
4e18(00c4): ed da bd 0a '         rdlong  rqst,rqst wz    ' get the actual number in the rquest
4e1c(00c5):             ' t_getnum_ret                                
4e1c(00c5): 00 00 7c 5c '         ret
4e20(00c6):             ' t_put5
4e20(00c6): ba 84 fd 5c '         call    #t_setup        ' setup common values
4e24(00c7): c6 00 68 5c '  if_z   jmp     #t_put5         ' repeat until (tx_tail <> (tx_head + 1) & $1FF)
4e28(00c8): 0c de fd 80 '         add     t0,#12          ' txbuffer...
4e2c(00c9): ef de bd 08 '         rdlong  t0,t0           ' ...
4e30(00ca): f1 de bd 80 '         add     t0,t2           ' ... [tx_head] ...
4e34(00cb): ef e8 3d 00 '         wrbyte  t5,t0           ' ... := t5
4e38(00cc): fd de bd a0 '         mov     t0,pptv         ' tx_head ...
4e3c(00cd): ef e4 3d 08 '         wrlong  t3,t0           ' ... := (tx_head + 1) & $1FF
4e40(00ce):             ' t_put5_ret
4e40(00ce): 00 00 7c 5c '         ret
4e44(00cf):             ' m32
4e44(00cf): 00 de fd a0 '         mov t0,#0
4e48(00d0): d3 e2 7d ec '         tjz t2,#m32_ret
4e4c(00d1):             ' :m32_loop
4e4c(00d1): f0 de bd 80 '         add t0,t1
4e50(00d2): d1 e2 fd e4 '         djnz t2,#:m32_loop
4e54(00d3):             ' m32_ret
4e54(00d3): 00 00 7c 5c '         ret
4e58(00d4):             ' d32u
4e58(00d4): 20 f0 fd a0 '         mov d1,#32
4e5c(00d5): 00 f2 fd a0 '         mov d2, #0
4e60(00d6):             ' :d32up
4e60(00d6): 01 de fd 2d '         shl t0,#1    WC
4e64(00d7): 01 f2 fd 35 '         rcl d2,#1    WC
4e68(00d8): f9 e0 3d 87 '         cmp t1,d2    WC,WZ
4e6c(00d9): dc 00 44 5c '  if_a   jmp #:d32down
4e70(00da): f0 f2 bd 84 '         sub d2,t1
4e74(00db): 01 de fd 80 '         add t0,#1
4e78(00dc):             ' :d32down
4e78(00dc): 01 f0 fd 86 '         sub d1, #1   WZ
4e7c(00dd): d6 00 54 5c '  if_ne  jmp #:d32up
4e80(00de): f9 e0 bd a0 '         mov t1,d2
4e84(00df):             ' d32u_ret
4e84(00df): 00 00 7c 5c '         ret
4e88(00e0): 00 00 80 00 ' curs_1  long     $00800000
4e8c(00e1): ff ff 7f 00 ' low23   long     $007FFFFF
4e90(00e2): ff ff ff 00 ' low24   long     $00ffffff
4e94(00e3): 00 ca 9a 3b ' maxdec  long     1000000000     ' maximum decimal divisor for 32 bit values
4e98(00e4): 00 02 00 00 ' ctrl    long     $00000200      ' mask to detect control keys
4e9c(00e5): 00 fd ff ff ' noctrl  long     $fffffd00      ' mask to correct control keys
4ea0(00e6): 20 02 00 00 ' space   long     $00000220      ' space used when filling
4ea4(00e7): 00 00 00 00 ' lastcur long     $0
4ea8(00e8): 00 00 00 00 ' kstat   long     $0
4eac(00e9): 00 02 00 00 ' hex200  long     $200
4eb0(00ea): 32 03 00 00 ' c_snail long     $332           ' control snail should return NUL 
4eb4(00eb):             ' rqstptr res      1      ' address of my request block
4eb4(00ec):             ' rsltptr res      1      ' address to put results
4eb4(00ed):             ' rqst    res      1      ' request being processed
4eb4(00ee):             ' rslt    res      1      ' result to return
4eb4(00ef):             ' t0      res      1
4eb4(00f0):             ' t1      res      1
4eb4(00f1):             ' t2      res      1
4eb4(00f2):             ' t3      res      1
4eb4(00f3):             ' t4      res      1
4eb4(00f4):             ' t5      res      1
4eb4(00f5):             ' t6      res      1
4eb4(00f6):             ' t7      res      1
4eb4(00f7):             ' t8      res      1
4eb4(00f8):             ' d1      res      1      ' used when dividing
4eb4(00f9):             ' d2      res      1      ' used when dividing
4eb4(00fa):             ' ppkbd   res      1
4eb4(00fb):             ' ppmouse res      1
4eb4(00fc):             ' ppscrn  res      1
4eb4(00fd):             ' pptv    res      1
4eb4(00fe):             ' scrcols res      1      ' screen cols
4eb4(00ff):             ' scrrows res      1      ' screen rows
4eb4(0100):             ' scrsize res      1      ' screen size
4eb4(0101):             ' scrbuff res      1      ' pointer to screen buffer
4eb4(0102):             ' scrclrs res      1      ' current color data
4eb4(0103):             ' scrpall res      1      ' pointer to screen palette
4eb4(0104):             ' scrcurs res      1      ' pointer to screen cursors
'========================= Method #1: PUB ProxySetup ==========================
'PUB ProxySetup(io_block, proxy_lock, server_cpu)
'------------------------------------------------------------------------------
  v_io_block     := io_block
'------------------------------------------------------------------------------
4eb4: 64             PUSH 	Locals+4
4eb5: 41             POP  	VAR+0
'------------------------------------------------------------------------------
  v_proxy_lock   := proxy_lock
'------------------------------------------------------------------------------
4eb6: 68             PUSH 	Locals+8
4eb7: 45             POP  	VAR+4
'------------------------------------------------------------------------------
  v_Server_cpu   := server_cpu
'------------------------------------------------------------------------------
4eb8: 6c             PUSH 	Locals+12
4eb9: 49             POP  	VAR+8
4eba: 32             RETURN	
'=========================== Method #2: PUB Start =============================
'PUB Start (registry, data, start_kbd, start_mouse, start_screen) : ok | prqst, pkbd, pmouse, pscreen, ptv, px_pkbd, px_pmouse, px_pscreen, px_ptv, px_ioblk, px_lock, px_cpu, cog
'------------------------------------------------------------------------------
  pkbd    := data
'------------------------------------------------------------------------------
4ebb: 68             PUSH 	Locals+8
4ebc: 7d             POP  	Locals+28
'------------------------------------------------------------------------------
  pmouse  := 0  
'------------------------------------------------------------------------------
4ebd: 35             PUSH#0	
4ebe: cd 20          POP.L	Locals+32
'------------------------------------------------------------------------------
  pscreen := pkbd    + 4 * kbd#kb_count  
'------------------------------------------------------------------------------
4ec0: 7c             PUSH 	Locals+28
4ec1: 37 01          PUSH#kp	4 ($4)
4ec3: 38 0a          PUSH#k1	10
4ec5: f4             MPY  	
4ec6: ec             ADD  	
4ec7: cd 24          POP.L	Locals+36
'------------------------------------------------------------------------------
  ptv     := pscreen + 4 * sc_count 
'------------------------------------------------------------------------------
4ec9: cc 24          PUSH.L	Locals+36
4ecb: 37 01          PUSH#kp	4 ($4)
4ecd: 39 01 19       PUSH#k2	281
4ed0: f4             MPY  	
4ed1: ec             ADD  	
4ed2: cd 28          POP.L	Locals+40
'------------------------------------------------------------------------------
  long[pscreen][nx] := cols
'------------------------------------------------------------------------------
4ed4: 38 28          PUSH#k1	40
4ed6: cc 24          PUSH.L	Locals+36
4ed8: 35             PUSH#0	
4ed9: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  long[pscreen][ny] := rows
'------------------------------------------------------------------------------
4eda: 38 0d          PUSH#k1	13
4edc: cc 24          PUSH.L	Locals+36
4ede: 36             PUSH#1	
4edf: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  if start_kbd
'------------------------------------------------------------------------------
4ee0: 6c             PUSH 	Locals+12
4ee1: 0a 07          JPF  	.+7 (dest:$4eea)
'------------------------------------------------------------------------------
    kbd.start(pkbd, common#SI_PIN)
'------------------------------------------------------------------------------
4ee3: 01             FRAME	Call without return value	
4ee4: 7c             PUSH 	Locals+28
4ee5: 37 24          PUSH#kp	31 ($1f)
4ee7: 06 03 01       CALLOBJ	3:1
'------------------------------------------------------------------------------
  px_pkbd := 0
'------------------------------------------------------------------------------
4eea: 35             PUSH#0	
4eeb: cd 2c          POP.L	Locals+44
'------------------------------------------------------------------------------
  if start_screen
'------------------------------------------------------------------------------
4eed: 74             PUSH 	Locals+20
4eee: 0a 0d          JPF  	.+13 (dest:$4efd)
'------------------------------------------------------------------------------
    screen.start(ptv, common#SO_PIN, @long[pscreen][buffer])
'------------------------------------------------------------------------------
4ef0: 01             FRAME	Call without return value	
4ef1: cc 28          PUSH.L	Locals+40
4ef3: 38 1e          PUSH#k1	30
4ef5: cc 24          PUSH.L	Locals+36
4ef7: 37 21          PUSH#kp	3 ($3)
4ef9: d3             PUSH#.L	Mem[][]
4efa: 06 04 01       CALLOBJ	4:1
'------------------------------------------------------------------------------
  px_pscreen := 0
'------------------------------------------------------------------------------
4efd: 35             PUSH#0	
4efe: cd 34          POP.L	Locals+52
'------------------------------------------------------------------------------
  cog := cognew(@HmiStart, registry)
'------------------------------------------------------------------------------
4f00: 34             PUSH#-1	
4f01: c7 18          PUSH#.L	OBJ+24
4f03: 64             PUSH 	Locals+4
4f04: 28             COGIFUN	
4f05: cd 48          POP.L	Locals+72
'------------------------------------------------------------------------------
  ok := (cog => 0)
'------------------------------------------------------------------------------
4f07: cc 48          PUSH.L	Locals+72
4f09: 35             PUSH#0	
4f0a: fe             GE   	
4f0b: 61             POP  	Locals+0
'------------------------------------------------------------------------------
  if ok
'------------------------------------------------------------------------------
4f0c: 60             PUSH 	Locals+0
4f0d: 0a 15          JPF  	.+21 (dest:$4f24)
'------------------------------------------------------------------------------
    common.SendInitializationData(cog, @pkbd, 0)
'------------------------------------------------------------------------------
4f0f: 01             FRAME	Call without return value	
4f10: cc 48          PUSH.L	Locals+72
4f12: 7f             PUSH#	Locals+28
4f13: 35             PUSH#0	
4f14: 06 05 04       CALLOBJ	5:4
'------------------------------------------------------------------------------
    common.WaitForRequest(cog)
'------------------------------------------------------------------------------
4f17: 01             FRAME	Call without return value	
4f18: cc 48          PUSH.L	Locals+72
4f1a: 06 05 05       CALLOBJ	5:5
'------------------------------------------------------------------------------
    common.Register(cog, common#LMM_HMI)
'------------------------------------------------------------------------------
4f1d: 01             FRAME	Call without return value	
4f1e: cc 48          PUSH.L	Locals+72
4f20: 36             PUSH#1	
4f21: 06 05 02       CALLOBJ	5:2
4f24: 32             RETURN	
4f25: 00 00 00    

'******************************************************************************
'                          Catalina_PC_Keyboard.spin                           
'******************************************************************************

'=================================== CONs =====================================
BAUDRATE = 115200
RXINVERSE = 0
kb_count = 10
rx_pin = 2
rx_mode = 3
rx_ticks = 4
rx_bufptr = 5
rx_buffer = 6
'=============================== Object Header ================================
4f28: f8 00 02 01 ' 248 bytes, 2-1 methods, 1 object pointers
4f2c: c4 00 00 00 ' ptr #1 to $4fec: PUB start (locals size: 0)
4f30: c0 01 00 00 ' ptr #2 to $50e8: OBJ Common : Catalina_Common.spin (VAR offset: 0)
'================================ DAT Section =================================
4f34(0000):             '                         org     0
4f34(0000): f0 5d bc a0 ' entry                   mov     t1,par                'get structure address
4f38(0001): 08 5c fc 80 '                         add     t1,#2 << 2            'skip past heads and tails
4f3c(0002): 2e 5e bc 08 '                         rdlong  t2,t1                 'get rx_pin
4f40(0003): 01 64 fc a0 '                         mov     rxmask,#1
4f44(0004): 2f 64 bc 2c '                         shl     rxmask,t2
4f48(0005): 04 5c fc 80 '                         add     t1,#4                 'get rx_mode
4f4c(0006): 2e 60 bc 08 '                         rdlong  rxmode,t1
4f50(0007): 04 5c fc 80 '                         add     t1,#4                 'get bit_ticks
4f54(0008): 2e 62 bc 08 '                         rdlong  bitticks,t1
4f58(0009): 04 5c fc 80 '                         add     t1,#4                 'get buffer_ptr
4f5c(000a): 2e 66 bc 08 '                         rdlong  rxbuff,t1
4f60(000b): 01 60 7c 62 ' receive                 test    rxmode,#%001    wz    'wait for start bit on rx pin
4f64(000c): f2 65 3c 61 '                         test    rxmask,ina      wc
4f68(000d): 0b 00 64 5c '         if_z_eq_c       jmp     #receive
4f6c(000e): 09 6a fc a0 '                         mov     rxbits,#9             'ready to receive byte
4f70(000f): 31 6c bc a0 '                         mov     rxcnt,bitticks
4f74(0010): 01 6c fc 28 '                         shr     rxcnt,#1
4f78(0011): f1 6d bc 80 '                         add     rxcnt,cnt                          
4f7c(0012): 31 6c bc 80 ' :bit                    add     rxcnt,bitticks        'ready next bit period
4f80(0013): 36 5c bc a0 ' :wait                   mov     t1,rxcnt              'check if bit receive period done
4f84(0014): f1 5d bc 84 '                         sub     t1,cnt
4f88(0015): 00 5c 7c c1 '                         cmps    t1,#0           wc
4f8c(0016): 13 00 4c 5c '         if_nc           jmp     #:wait
4f90(0017): f2 65 3c 61 '                         test    rxmask,ina      wc    'receive bit on rx pin
4f94(0018): 01 68 fc 30 '                         rcr     rxdata,#1
4f98(0019): 12 6a fc e4 '                         djnz    rxbits,#:bit
4f9c(001a): 17 68 fc 28 '                         shr     rxdata,#32-9          'justify and trim received byte
4fa0(001b): ff 68 fc 60 '                         and     rxdata,#$FF
4fa4(001c): 01 60 7c 62 '                         test    rxmode,#%001    wz    'if rx inverted, invert byte
4fa8(001d): ff 68 d4 6c '         if_nz           xor     rxdata,#$FF
4fac(001e): 00 5a 7c 86 '                         cmp     mscnt,#0        wz     'mouse receiving?
4fb0(001f): 23 00 54 5c '         if_nz           jmp     #getMsPar
4fb4(0020): 05 68 7c 86 '                         cmp     rxdata,#5      wz     'new mouse Event?
4fb8(0021): 25 00 54 5c '         if_nz           jmp     #toRxBuff             'no: write in buffer
4fbc(0022): 04 5a fc a0 '                         mov     mscnt,#4              '4 bytes to ignore
4fc0(0023): 01 5a fc 84 ' getMsPar                sub     mscnt,#1              'ignore byte
4fc4(0024): 0b 00 7c 5c '                         jmp     #receive
4fc8(0025): f0 5f bc 08 ' toRxBuff                rdlong  t2,par                'save received byte and inc head
4fcc(0026): 33 5e bc 80 '                         add     t2,rxbuff
4fd0(0027): 2f 68 3c 00 '                         wrbyte  rxdata,t2
4fd4(0028): 33 5e bc 84 '                         sub     t2,rxbuff
4fd8(0029): 01 5e fc 80 '                         add     t2,#1
4fdc(002a): 0f 5e fc 60 '                         and     t2,#$0F
4fe0(002b): f0 5f 3c 08 '                         wrlong  t2,par
4fe4(002c): 0b 00 7c 5c '                         jmp     #receive
4fe8(002d): 00 00 00 00 ' mscnt                   long    0
4fec(002e):             ' t1                      res     1
4fec(002f):             ' t2                      res     1
4fec(0030):             ' rxmode                  res     1
4fec(0031):             ' bitticks                res     1
4fec(0032):             ' rxmask                  res     1
4fec(0033):             ' rxbuff                  res     1
4fec(0034):             ' rxdata                  res     1
4fec(0035):             ' rxbits                  res     1
4fec(0036):             ' rxcnt                   res     1
4fec(0037):             ' rxcode                  res     1
'=========================== Method #1: PUB start =============================
'PUB start(kb_block, basepin) : okay
'------------------------------------------------------------------------------
  longfill(kb_block, 0, kb_count)
'------------------------------------------------------------------------------
4fec: 64             PUSH 	Locals+4
4fed: 35             PUSH#0	
4fee: 38 0a          PUSH#k1	10
4ff0: 1a             LONGFIL	
'------------------------------------------------------------------------------
  long[kb_block][rx_pin]    := basepin
'------------------------------------------------------------------------------
4ff1: 68             PUSH 	Locals+8
4ff2: 64             PUSH 	Locals+4
4ff3: 37 00          PUSH#kp	2 ($2)
4ff5: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  long[kb_block][rx_mode]   := RXINVERSE
'------------------------------------------------------------------------------
4ff6: 35             PUSH#0	
4ff7: 64             PUSH 	Locals+4
4ff8: 37 21          PUSH#kp	3 ($3)
4ffa: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  long[kb_block][rx_ticks]  := Common#CLOCKFREQ / BAUDRATE
'------------------------------------------------------------------------------
4ffb: 3b 04 c4 b4 00 PUSH#k4	80000000
5000: 3a 01 c2 00    PUSH#k3	115200
5004: f6             DIV  	
5005: 64             PUSH 	Locals+4
5006: 37 01          PUSH#kp	4 ($4)
5008: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  long[kb_block][rx_bufptr] := kb_block + rx_buffer*4 
'------------------------------------------------------------------------------
5009: 64             PUSH 	Locals+4
500a: 38 06          PUSH#k1	6
500c: 37 01          PUSH#kp	4 ($4)
500e: f4             MPY  	
500f: ec             ADD  	
5010: 64             PUSH 	Locals+4
5011: 38 05          PUSH#k1	5
5013: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  okay := cognew(@entry, kb_block) + 1
'------------------------------------------------------------------------------
5014: 34             PUSH#-1	
5015: c7 0c          PUSH#.L	OBJ+12
5017: 64             PUSH 	Locals+4
5018: 28             COGIFUN	
5019: 36             PUSH#1	
501a: ec             ADD  	
501b: 61             POP  	Locals+0
501c: 32             RETURN	
501d: 00 00 00    

'******************************************************************************
'                            Catalina_PC_Text.spin                             
'******************************************************************************

'=================================== CONs =====================================
BAUDRATE = 115200
cols = 40
rows = 13
tv_count = 5
tx_pin = 2
tx_ticks = 3
tx_buffer = 4
'=============================== Object Header ================================
5020: c8 00 02 01 ' 200 bytes, 2-1 methods, 1 object pointers
5024: a0 00 00 00 ' ptr #1 to $50c0: PUB start (locals size: 0)
5028: c8 00 00 00 ' ptr #2 to $50e8: OBJ Common : Catalina_Common.spin (VAR offset: 0)
'================================ DAT Section =================================
502c(0000):             '                         org     0
502c(0000): f0 4b bc a0 ' entry                   mov     t1,par                'get structure address
5030(0001): 08 4a fc 80 '                         add     t1,#2 << 2            'skip past heads and tails
5034(0002): 25 4c bc 08 '                         rdlong  t2,t1                 'get tx_pin
5038(0003): 01 54 fc a0 '                         mov     txmask,#1
503c(0004): 26 54 bc 2c '                         shl     txmask,t2 
5040(0005): 2a e8 bf 68 '                         or      outa,txmask           'idle = 1  
5044(0006): 2a ec bf 68 '                         or      dira,txmask           'Pin30 = output
5048(0007): 04 4a fc 80 '                         add     t1,#4                 'get bit_ticks
504c(0008): 25 52 bc 08 '                         rdlong  bittime,t1
5050(0009): 04 4a fc 80 '                         add     t1,#4                 'get buffer_ptr
5054(000a): 25 5a bc 08 '                         rdlong  txbuff,t1
5058(000b): f0 4b bc a0 ' transmit                mov     t1,par                'check for head <> tail
505c(000c): 25 4c bc 08 '                         rdlong  t2,t1
5060(000d): 04 4a fc 80 '                         add     t1,#1 << 2
5064(000e): 25 4e bc 08 '                         rdlong  t3,t1
5068(000f): 27 4c 3c 86 '                         cmp     t2,t3           wz
506c(0010): 0b 00 68 5c '         if_z            jmp     #transmit
5070(0011): 2d 4e bc 80 ' sendloop                add     t3,txbuff             'get byte and inc tail
5074(0012): 27 56 bc 00 '                         rdbyte  txdata,t3
5078(0013): 2d 4e bc 84 '                         sub     t3,txbuff
507c(0014): 01 4e fc 80 '                         add     t3,#1
5080(0015): ff 4f fc 60 '                         and     t3,#$1FF
5084(0016): 25 4e 3c 08 '                         wrlong  t3,t1
5088(0017): 0a 58 fc a0 '                         mov     txcnt,#10
508c(0018): 00 57 fc 68 '                         or      txdata,#$100          'add stoppbit
5090(0019): 01 56 fc 2c '                         shl     txdata,#1             'add startbit
5094(001a): f1 51 bc a0 '                         mov     dtime,cnt
5098(001b): 29 50 bc 80 '                         add     dtime,bittime
509c(001c): 01 56 fc 29 ' sendbit                 shr     txdata,#1    wc       'test LSB
50a0(001d): f4 4d bc a0 '                         mov     t2,outa
50a4(001e): 2a 4c 8c 64 '               if_nc     andn    t2,txmask             'bit=0  or
50a8(001f): 2a 4c b0 68 '               if_c      or      t2,txmask             'bit=1
50ac(0020): 26 e8 bf a0 '                         mov     outa,t2
50b0(0021): 29 50 bc f8 '                         waitcnt dtime,bittime         'wait 1 bit
50b4(0022): 1c 58 fc e4 '                         djnz    txcnt,#sendbit        '10 times
50b8(0023): 29 50 bc f8 '                         waitcnt dtime,bittime         '2 stopbits
50bc(0024): 0b 00 7c 5c '                         jmp     #transmit             'done,wait for next
50c0(0025):             ' t1                      res     1
50c0(0026):             ' t2                      res     1
50c0(0027):             ' t3                      res     1
50c0(0028):             ' dtime                   res     1
50c0(0029):             ' bittime                 res     1
50c0(002a):             ' txmask                  res     1
50c0(002b):             ' txdata                  res     1
50c0(002c):             ' txcnt                   res     1
50c0(002d):             ' txbuff                  res     1
'=========================== Method #1: PUB start =============================
'PUB start(tv_block, basepin, buffer) : okay
'------------------------------------------------------------------------------
  longfill(tv_block, 0, tv_count)
'------------------------------------------------------------------------------
50c0: 64             PUSH 	Locals+4
50c1: 35             PUSH#0	
50c2: 38 05          PUSH#k1	5
50c4: 1a             LONGFIL	
'------------------------------------------------------------------------------
  long[tv_block][tx_pin] := basepin
'------------------------------------------------------------------------------
50c5: 68             PUSH 	Locals+8
50c6: 64             PUSH 	Locals+4
50c7: 37 00          PUSH#kp	2 ($2)
50c9: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  long[tv_block][tx_ticks]:= Common#CLOCKFREQ / BAUDRATE
'------------------------------------------------------------------------------
50ca: 3b 04 c4 b4 00 PUSH#k4	80000000
50cf: 3a 01 c2 00    PUSH#k3	115200
50d3: f6             DIV  	
50d4: 64             PUSH 	Locals+4
50d5: 37 21          PUSH#kp	3 ($3)
50d7: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  long[tv_block][tx_buffer] := buffer
'------------------------------------------------------------------------------
50d8: 6c             PUSH 	Locals+12
50d9: 64             PUSH 	Locals+4
50da: 37 01          PUSH#kp	4 ($4)
50dc: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  okay := cognew(@entry, tv_block) + 1 
'------------------------------------------------------------------------------
50dd: 34             PUSH#-1	
50de: c7 0c          PUSH#.L	OBJ+12
50e0: 64             PUSH 	Locals+4
50e1: 28             COGIFUN	
50e2: 36             PUSH#1	
50e3: ec             ADD  	
50e4: 61             POP  	Locals+0
50e5: 32             RETURN	
50e6: 00 00       

'******************************************************************************
'                            Catalina_Common.spin                              
'******************************************************************************

'=================================== CONs =====================================
SI_PIN = 31
SO_PIN = 30
CLOCKMODE = 1032
XTALFREQ = 5000000
CLOCKFREQ = 80000000
STACKSIZE = 50
LMM_HMI = 1
COGSTORE = 32508
REGISTRY_END = 32508
REGISTRY = 32476
REQUESTS = 32412
ARGC_ADDR = 32560
ARGV_ADDR = 32562
ARGV_0 = 32564
ARGV_MAX = 32
'=============================== Object Header ================================
50e8: 88 00 06 00 ' 136 bytes, 6-1 methods, 0 object pointers
50ec: 18 00 04 00 ' ptr #1 to $5100: PUB InitializeRegistry (locals size: 4)
50f0: 42 00 00 00 ' ptr #2 to $512a: PUB Register (locals size: 0)
50f4: 55 00 00 00 ' ptr #3 to $513d: PUB UnRegister (locals size: 0)
50f8: 63 00 00 00 ' ptr #4 to $514b: PUB SendInitializationData (locals size: 0)
50fc: 78 00 00 00 ' ptr #5 to $5160: PUB WaitForRequest (locals size: 0)
'===================== Method #1: PUB InitializeRegistry ======================
'PUB InitializeRegistry | i
'------------------------------------------------------------------------------
  repeat i from 0 to 7
'------------------------------------------------------------------------------
5100: 35             PUSH#0	
5101: 65             POP  	Locals+4
'------------------------------------------------------------------------------
    long[REGISTRY][i] := REQUESTS + (8*i)
'------------------------------------------------------------------------------
5102: 39 7e 9c       PUSH#k2	32412
5105: 37 02          PUSH#kp	8 ($8)
5107: 64             PUSH 	Locals+4
5108: f4             MPY  	
5109: ec             ADD  	
510a: 39 7e dc       PUSH#k2	32476
510d: 64             PUSH 	Locals+4
510e: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
    long[REQUESTS][2 * i] := 0
'------------------------------------------------------------------------------
510f: 35             PUSH#0	
5110: 39 7e 9c       PUSH#k2	32412
5113: 37 00          PUSH#kp	2 ($2)
5115: 64             PUSH 	Locals+4
5116: f4             MPY  	
5117: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
    long[REQUESTS][2 * i + 1] := 0
'------------------------------------------------------------------------------
5118: 35             PUSH#0	
5119: 39 7e 9c       PUSH#k2	32412
511c: 37 00          PUSH#kp	2 ($2)
511e: 64             PUSH 	Locals+4
511f: f4             MPY  	
5120: 36             PUSH#1	
5121: ec             ADD  	
5122: d1             POP.L	Mem[][]
5123: 35             PUSH#0	
5124: 37 22          PUSH#kp	7 ($7)
5126: 66 02 59       USING	Locals+4, RPTINCJ .-39 (dest:$5102)
5129: 32             RETURN	
'========================== Method #2: PUB Register ===========================
'PUB Register (my_cog, my_plugin_type)
'------------------------------------------------------------------------------
  long[REGISTRY][my_cog] := (my_plugin_type<<24) + (long[REGISTRY][my_cog] & $00FFFFFF)
'------------------------------------------------------------------------------
512a: 68             PUSH 	Locals+8
512b: 38 18          PUSH#k1	24
512d: e3             SHL  	
512e: 39 7e dc       PUSH#k2	32476
5131: 64             PUSH 	Locals+4
5132: d0             PUSH.L	Mem[][]
5133: 37 37          PUSH#kp	16777215 ($ffffff)
5135: e8             BIT_AND	
5136: ec             ADD  	
5137: 39 7e dc       PUSH#k2	32476
513a: 64             PUSH 	Locals+4
513b: d1             POP.L	Mem[][]
513c: 32             RETURN	
'========================= Method #3: PUB UnRegister ==========================
'PUB UnRegister (my_cog)
'------------------------------------------------------------------------------
  long[REGISTRY][my_cog] := (long[REGISTRY][my_cog] & $00FFFFFF)
'------------------------------------------------------------------------------
513d: 39 7e dc       PUSH#k2	32476
5140: 64             PUSH 	Locals+4
5141: d0             PUSH.L	Mem[][]
5142: 37 37          PUSH#kp	16777215 ($ffffff)
5144: e8             BIT_AND	
5145: 39 7e dc       PUSH#k2	32476
5148: 64             PUSH 	Locals+4
5149: d1             POP.L	Mem[][]
514a: 32             RETURN	
'=================== Method #4: PUB SendInitializationData ====================
'PUB SendInitializationData(to_cog, data_1, data_2)
'------------------------------------------------------------------------------
  long[REQUESTS][2 * to_cog + 1] := data_2
'------------------------------------------------------------------------------
514b: 6c             PUSH 	Locals+12
514c: 39 7e 9c       PUSH#k2	32412
514f: 37 00          PUSH#kp	2 ($2)
5151: 64             PUSH 	Locals+4
5152: f4             MPY  	
5153: 36             PUSH#1	
5154: ec             ADD  	
5155: d1             POP.L	Mem[][]
'------------------------------------------------------------------------------
  long[REQUESTS][2 * to_cog]     := data_1
'------------------------------------------------------------------------------
5156: 68             PUSH 	Locals+8
5157: 39 7e 9c       PUSH#k2	32412
515a: 37 00          PUSH#kp	2 ($2)
515c: 64             PUSH 	Locals+4
515d: f4             MPY  	
515e: d1             POP.L	Mem[][]
515f: 32             RETURN	
'======================= Method #5: PUB WaitForRequest ========================
'PUB WaitForRequest(to_cog)
'------------------------------------------------------------------------------
  repeat while long[REQUESTS][2 * to_cog] <> 0
'------------------------------------------------------------------------------
5160: 39 7e 9c       PUSH#k2	32412
5163: 37 00          PUSH#kp	2 ($2)
5165: 64             PUSH 	Locals+4
5166: f4             MPY  	
5167: d0             PUSH.L	Mem[][]
5168: 35             PUSH#0	
5169: fb             NE   	
516a: 0a 02          JPF  	.+2 (dest:$516e)
516c: 04 72          GOTO 	.-14 (dest:$5160)
516e: 32             RETURN	
516f: 00          
5170: 00 00 00 00             ' LONG HMI.v_io_block
5174: 00 00 00 00             ' LONG HMI.v_proxy_lock
5178: 00 00 00 00             ' LONG HMI.v_server_cpu
517c: ff ff f9 ff ff ff f9 ff 

